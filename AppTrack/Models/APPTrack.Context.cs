//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated from a template.
//
//     Manual changes to this file may cause unexpected behavior in your application.
//     Manual changes to this file will be overwritten if the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace AppTrack.Models
{
    using System;
    using System.Data.Entity;
    using System.Data.Entity.Infrastructure;
    using System.Data.Entity.Core.Objects;
    using System.Linq;
    
    public partial class DevProvidentIDOCEntities : DbContext
    {
        public DevProvidentIDOCEntities()
            : base("name=DevProvidentIDOCEntities")
        {
        }
    
        protected override void OnModelCreating(DbModelBuilder modelBuilder)
        {
            throw new UnintentionalCodeFirstException();
        }
    
        public virtual DbSet<C_AdminUser> C_AdminUser { get; set; }
        public virtual DbSet<C_AutoShipHeader> C_AutoShipHeader { get; set; }
        public virtual DbSet<C_CommissionDetail> C_CommissionDetail { get; set; }
        public virtual DbSet<C_Company> C_Company { get; set; }
        public virtual DbSet<C_Departments> C_Departments { get; set; }
        public virtual DbSet<C_EmailTemplates> C_EmailTemplates { get; set; }
        public virtual DbSet<C_EventDetail> C_EventDetail { get; set; }
        public virtual DbSet<C_EventHeader> C_EventHeader { get; set; }
        public virtual DbSet<C_ExportDataLogDetail> C_ExportDataLogDetail { get; set; }
        public virtual DbSet<C_FeeDetail> C_FeeDetail { get; set; }
        public virtual DbSet<C_Fees> C_Fees { get; set; }
        public virtual DbSet<C_Info> C_Info { get; set; }
        public virtual DbSet<C_InfoDetail> C_InfoDetail { get; set; }
        public virtual DbSet<C_Item> C_Item { get; set; }
        public virtual DbSet<C_ItemBOM> C_ItemBOM { get; set; }
        public virtual DbSet<C_Lookup> C_Lookup { get; set; }
        public virtual DbSet<C_OrderHeader> C_OrderHeader { get; set; }
        public virtual DbSet<C_PayOut> C_PayOut { get; set; }
        public virtual DbSet<C_PayOutPlan> C_PayOutPlan { get; set; }
        public virtual DbSet<C_PromotionDetail> C_PromotionDetail { get; set; }
        public virtual DbSet<C_PromotionHeader> C_PromotionHeader { get; set; }
        public virtual DbSet<C_RankDetail> C_RankDetail { get; set; }
        public virtual DbSet<C_RankHeader> C_RankHeader { get; set; }
        public virtual DbSet<C_Ranks> C_Ranks { get; set; }
        public virtual DbSet<C_StateDetail> C_StateDetail { get; set; }
        public virtual DbSet<C_StateHeader> C_StateHeader { get; set; }
        public virtual DbSet<C_Stores> C_Stores { get; set; }
        public virtual DbSet<C_sysDetail> C_sysDetail { get; set; }
        public virtual DbSet<C_Tagged> C_Tagged { get; set; }
        public virtual DbSet<C_Tree> C_Tree { get; set; }
        public virtual DbSet<C_TreeLog> C_TreeLog { get; set; }
        public virtual DbSet<C_VolumeHeader> C_VolumeHeader { get; set; }
        public virtual DbSet<C_Volumes> C_Volumes { get; set; }
        public virtual DbSet<C_EmailFormSubmitLog> C_EmailFormSubmitLog { get; set; }
        public virtual DbSet<C_FormSubmitLog> C_FormSubmitLog { get; set; }
        public virtual DbSet<C_ItemPromotion> C_ItemPromotion { get; set; }
        public virtual DbSet<C_ItemVendors> C_ItemVendors { get; set; }
        public virtual DbSet<c_PaymentDetail> c_PaymentDetail { get; set; }
        public virtual DbSet<C_StatementHeader> C_StatementHeader { get; set; }
        public virtual DbSet<C_StatementLog> C_StatementLog { get; set; }
        public virtual DbSet<C_StatusLog> C_StatusLog { get; set; }
        public virtual DbSet<C_StockBin> C_StockBin { get; set; }
        public virtual DbSet<AspNetRole> AspNetRoles { get; set; }
        public virtual DbSet<AspNetUserClaim> AspNetUserClaims { get; set; }
        public virtual DbSet<AspNetUserLogin> AspNetUserLogins { get; set; }
        public virtual DbSet<AspNetUser> AspNetUsers { get; set; }
        public virtual DbSet<C_Regions> C_Regions { get; set; }
        public virtual DbSet<C_Commissions> C_Commissions { get; set; }
        public virtual DbSet<C_Periods> C_Periods { get; set; }
        public virtual DbSet<C_ItemPricing> C_ItemPricing { get; set; }
        public virtual DbSet<C_OrderDetail> C_OrderDetail { get; set; }
        public virtual DbSet<C_AutoShipDetail> C_AutoShipDetail { get; set; }
        public virtual DbSet<C_VolumeDetail> C_VolumeDetail { get; set; }
        public virtual DbSet<C_ExportDataLog> C_ExportDataLog { get; set; }
        public virtual DbSet<C_ImportDataLogDetail> C_ImportDataLogDetail { get; set; }
        public virtual DbSet<C_VendorRebateTransactions> C_VendorRebateTransactions { get; set; }
        public virtual DbSet<C_ImportDataLog> C_ImportDataLog { get; set; }
        public virtual DbSet<C_Program> C_Program { get; set; }
        public virtual DbSet<C_OrderHistory> C_OrderHistory { get; set; }
        public virtual DbSet<C_VolumeItem> C_VolumeItem { get; set; }
        public virtual DbSet<C_ImportPayoutTransactions> C_ImportPayoutTransactions { get; set; }
        public virtual DbSet<CMSContent> CMSContents { get; set; }
        public virtual DbSet<CMSViewFile> CMSViewFiles { get; set; }
        public virtual DbSet<CMSContentArchive> CMSContentArchives { get; set; }
        public virtual DbSet<C_PaymentMethod> C_PaymentMethod { get; set; }
        public virtual DbSet<C_PaymentHistory> C_PaymentHistory { get; set; }
        public virtual DbSet<TmpOrderHeaderForPayment> TmpOrderHeaderForPayments { get; set; }
        public virtual DbSet<C_MembershipActivity> C_MembershipActivity { get; set; }
        public virtual DbSet<C_ItemDeptStore> C_ItemDeptStore { get; set; }
        public virtual DbSet<C_Categories> C_Categories { get; set; }
        public virtual DbSet<C_Notes> C_Notes { get; set; }
        public virtual DbSet<C_ActivityTracking> C_ActivityTracking { get; set; }
    
        public virtual ObjectResult<AC_GetC_infoListByDateCustomerType_Result> AC_GetC_infoListByDateCustomerType(Nullable<System.DateTime> startDate, Nullable<System.DateTime> endDate, Nullable<int> customerType, Nullable<int> statusID)
        {
            var startDateParameter = startDate.HasValue ?
                new ObjectParameter("StartDate", startDate) :
                new ObjectParameter("StartDate", typeof(System.DateTime));
    
            var endDateParameter = endDate.HasValue ?
                new ObjectParameter("EndDate", endDate) :
                new ObjectParameter("EndDate", typeof(System.DateTime));
    
            var customerTypeParameter = customerType.HasValue ?
                new ObjectParameter("CustomerType", customerType) :
                new ObjectParameter("CustomerType", typeof(int));
    
            var statusIDParameter = statusID.HasValue ?
                new ObjectParameter("StatusID", statusID) :
                new ObjectParameter("StatusID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<AC_GetC_infoListByDateCustomerType_Result>("AC_GetC_infoListByDateCustomerType", startDateParameter, endDateParameter, customerTypeParameter, statusIDParameter);
        }
    
        public virtual ObjectResult<AC_GetC_infoListByCustomerType_Result> AC_GetC_infoListByCustomerType(Nullable<int> customerType, Nullable<int> statusID)
        {
            var customerTypeParameter = customerType.HasValue ?
                new ObjectParameter("CustomerType", customerType) :
                new ObjectParameter("CustomerType", typeof(int));
    
            var statusIDParameter = statusID.HasValue ?
                new ObjectParameter("StatusID", statusID) :
                new ObjectParameter("StatusID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<AC_GetC_infoListByCustomerType_Result>("AC_GetC_infoListByCustomerType", customerTypeParameter, statusIDParameter);
        }
    
        public virtual ObjectResult<AC_GetC_infoListByCustomerTypeV2_Result> AC_GetC_infoListByCustomerTypeV2(Nullable<int> customerType)
        {
            var customerTypeParameter = customerType.HasValue ?
                new ObjectParameter("CustomerType", customerType) :
                new ObjectParameter("CustomerType", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<AC_GetC_infoListByCustomerTypeV2_Result>("AC_GetC_infoListByCustomerTypeV2", customerTypeParameter);
        }
    
        public virtual ObjectResult<Nullable<int>> LB_UpdateMemberUpdatePage2(Nullable<int> custID, string salesForceID, string accountingID, string secCode, string alternateID, string password, Nullable<int> emailFlag, Nullable<int> textFlag, string siteName, Nullable<System.DateTime> startDate, string activationStatus, Nullable<System.DateTime> activationStatusDate, string status, Nullable<System.DateTime> statusDate, string variantData2, string variantData3, string variantData4)
        {
            var custIDParameter = custID.HasValue ?
                new ObjectParameter("CustID", custID) :
                new ObjectParameter("CustID", typeof(int));
    
            var salesForceIDParameter = salesForceID != null ?
                new ObjectParameter("SalesForceID", salesForceID) :
                new ObjectParameter("SalesForceID", typeof(string));
    
            var accountingIDParameter = accountingID != null ?
                new ObjectParameter("AccountingID", accountingID) :
                new ObjectParameter("AccountingID", typeof(string));
    
            var secCodeParameter = secCode != null ?
                new ObjectParameter("SecCode", secCode) :
                new ObjectParameter("SecCode", typeof(string));
    
            var alternateIDParameter = alternateID != null ?
                new ObjectParameter("AlternateID", alternateID) :
                new ObjectParameter("AlternateID", typeof(string));
    
            var passwordParameter = password != null ?
                new ObjectParameter("password", password) :
                new ObjectParameter("password", typeof(string));
    
            var emailFlagParameter = emailFlag.HasValue ?
                new ObjectParameter("EmailFlag", emailFlag) :
                new ObjectParameter("EmailFlag", typeof(int));
    
            var textFlagParameter = textFlag.HasValue ?
                new ObjectParameter("TextFlag", textFlag) :
                new ObjectParameter("TextFlag", typeof(int));
    
            var siteNameParameter = siteName != null ?
                new ObjectParameter("SiteName", siteName) :
                new ObjectParameter("SiteName", typeof(string));
    
            var startDateParameter = startDate.HasValue ?
                new ObjectParameter("StartDate", startDate) :
                new ObjectParameter("StartDate", typeof(System.DateTime));
    
            var activationStatusParameter = activationStatus != null ?
                new ObjectParameter("ActivationStatus", activationStatus) :
                new ObjectParameter("ActivationStatus", typeof(string));
    
            var activationStatusDateParameter = activationStatusDate.HasValue ?
                new ObjectParameter("ActivationStatusDate", activationStatusDate) :
                new ObjectParameter("ActivationStatusDate", typeof(System.DateTime));
    
            var statusParameter = status != null ?
                new ObjectParameter("Status", status) :
                new ObjectParameter("Status", typeof(string));
    
            var statusDateParameter = statusDate.HasValue ?
                new ObjectParameter("StatusDate", statusDate) :
                new ObjectParameter("StatusDate", typeof(System.DateTime));
    
            var variantData2Parameter = variantData2 != null ?
                new ObjectParameter("VariantData2", variantData2) :
                new ObjectParameter("VariantData2", typeof(string));
    
            var variantData3Parameter = variantData3 != null ?
                new ObjectParameter("VariantData3", variantData3) :
                new ObjectParameter("VariantData3", typeof(string));
    
            var variantData4Parameter = variantData4 != null ?
                new ObjectParameter("VariantData4", variantData4) :
                new ObjectParameter("VariantData4", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<Nullable<int>>("LB_UpdateMemberUpdatePage2", custIDParameter, salesForceIDParameter, accountingIDParameter, secCodeParameter, alternateIDParameter, passwordParameter, emailFlagParameter, textFlagParameter, siteNameParameter, startDateParameter, activationStatusParameter, activationStatusDateParameter, statusParameter, statusDateParameter, variantData2Parameter, variantData3Parameter, variantData4Parameter);
        }
    
        public virtual int LB_GetC_infoPartialPage1(Nullable<int> sponsorID, Nullable<int> sourceID, string company, string taxID, string nameTitle, string firstName, string middleName, string lastName, string displayName, string address1, string city, string state, string postalCode, string country, string email, string companyPhone, string variantData1, Nullable<int> flag1, Nullable<int> custID)
        {
            var sponsorIDParameter = sponsorID.HasValue ?
                new ObjectParameter("SponsorID", sponsorID) :
                new ObjectParameter("SponsorID", typeof(int));
    
            var sourceIDParameter = sourceID.HasValue ?
                new ObjectParameter("SourceID", sourceID) :
                new ObjectParameter("SourceID", typeof(int));
    
            var companyParameter = company != null ?
                new ObjectParameter("Company", company) :
                new ObjectParameter("Company", typeof(string));
    
            var taxIDParameter = taxID != null ?
                new ObjectParameter("TaxID", taxID) :
                new ObjectParameter("TaxID", typeof(string));
    
            var nameTitleParameter = nameTitle != null ?
                new ObjectParameter("NameTitle", nameTitle) :
                new ObjectParameter("NameTitle", typeof(string));
    
            var firstNameParameter = firstName != null ?
                new ObjectParameter("FirstName", firstName) :
                new ObjectParameter("FirstName", typeof(string));
    
            var middleNameParameter = middleName != null ?
                new ObjectParameter("MiddleName", middleName) :
                new ObjectParameter("MiddleName", typeof(string));
    
            var lastNameParameter = lastName != null ?
                new ObjectParameter("LastName", lastName) :
                new ObjectParameter("LastName", typeof(string));
    
            var displayNameParameter = displayName != null ?
                new ObjectParameter("DisplayName", displayName) :
                new ObjectParameter("DisplayName", typeof(string));
    
            var address1Parameter = address1 != null ?
                new ObjectParameter("Address1", address1) :
                new ObjectParameter("Address1", typeof(string));
    
            var cityParameter = city != null ?
                new ObjectParameter("City", city) :
                new ObjectParameter("City", typeof(string));
    
            var stateParameter = state != null ?
                new ObjectParameter("State", state) :
                new ObjectParameter("State", typeof(string));
    
            var postalCodeParameter = postalCode != null ?
                new ObjectParameter("PostalCode", postalCode) :
                new ObjectParameter("PostalCode", typeof(string));
    
            var countryParameter = country != null ?
                new ObjectParameter("Country", country) :
                new ObjectParameter("Country", typeof(string));
    
            var emailParameter = email != null ?
                new ObjectParameter("Email", email) :
                new ObjectParameter("Email", typeof(string));
    
            var companyPhoneParameter = companyPhone != null ?
                new ObjectParameter("CompanyPhone", companyPhone) :
                new ObjectParameter("CompanyPhone", typeof(string));
    
            var variantData1Parameter = variantData1 != null ?
                new ObjectParameter("VariantData1", variantData1) :
                new ObjectParameter("VariantData1", typeof(string));
    
            var flag1Parameter = flag1.HasValue ?
                new ObjectParameter("Flag1", flag1) :
                new ObjectParameter("Flag1", typeof(int));
    
            var custIDParameter = custID.HasValue ?
                new ObjectParameter("CustID", custID) :
                new ObjectParameter("CustID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("LB_GetC_infoPartialPage1", sponsorIDParameter, sourceIDParameter, companyParameter, taxIDParameter, nameTitleParameter, firstNameParameter, middleNameParameter, lastNameParameter, displayNameParameter, address1Parameter, cityParameter, stateParameter, postalCodeParameter, countryParameter, emailParameter, companyPhoneParameter, variantData1Parameter, flag1Parameter, custIDParameter);
        }
    
        public virtual ObjectResult<string> AC_CookieTblDetailRead(string stateID, string dataLabel)
        {
            var stateIDParameter = stateID != null ?
                new ObjectParameter("StateID", stateID) :
                new ObjectParameter("StateID", typeof(string));
    
            var dataLabelParameter = dataLabel != null ?
                new ObjectParameter("DataLabel", dataLabel) :
                new ObjectParameter("DataLabel", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<string>("AC_CookieTblDetailRead", stateIDParameter, dataLabelParameter);
        }
    
        public virtual int AC_CookieTblDetailWrite(string stateID, string dataLabel, string dataValue)
        {
            var stateIDParameter = stateID != null ?
                new ObjectParameter("StateID", stateID) :
                new ObjectParameter("StateID", typeof(string));
    
            var dataLabelParameter = dataLabel != null ?
                new ObjectParameter("DataLabel", dataLabel) :
                new ObjectParameter("DataLabel", typeof(string));
    
            var dataValueParameter = dataValue != null ?
                new ObjectParameter("DataValue", dataValue) :
                new ObjectParameter("DataValue", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("AC_CookieTblDetailWrite", stateIDParameter, dataLabelParameter, dataValueParameter);
        }
    
        public virtual ObjectResult<Nullable<System.Guid>> AC_CookieTblHeader(Nullable<int> adminID, Nullable<int> accessLevel)
        {
            var adminIDParameter = adminID.HasValue ?
                new ObjectParameter("AdminID", adminID) :
                new ObjectParameter("AdminID", typeof(int));
    
            var accessLevelParameter = accessLevel.HasValue ?
                new ObjectParameter("AccessLevel", accessLevel) :
                new ObjectParameter("AccessLevel", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<Nullable<System.Guid>>("AC_CookieTblHeader", adminIDParameter, accessLevelParameter);
        }
    
        public virtual ObjectResult<AC_CookieTblHeaderRead_Result> AC_CookieTblHeaderRead(string stateID)
        {
            var stateIDParameter = stateID != null ?
                new ObjectParameter("StateID", stateID) :
                new ObjectParameter("StateID", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<AC_CookieTblHeaderRead_Result>("AC_CookieTblHeaderRead", stateIDParameter);
        }
    
        public virtual ObjectResult<AC_CookieTblHeaderUpdate_Result> AC_CookieTblHeaderUpdate(string stateID, Nullable<int> timeOut)
        {
            var stateIDParameter = stateID != null ?
                new ObjectParameter("StateID", stateID) :
                new ObjectParameter("StateID", typeof(string));
    
            var timeOutParameter = timeOut.HasValue ?
                new ObjectParameter("TimeOut", timeOut) :
                new ObjectParameter("TimeOut", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<AC_CookieTblHeaderUpdate_Result>("AC_CookieTblHeaderUpdate", stateIDParameter, timeOutParameter);
        }
    
        public virtual int AC_CookieTblHeaderUpdateStatus(string stateID, Nullable<int> statusID)
        {
            var stateIDParameter = stateID != null ?
                new ObjectParameter("StateID", stateID) :
                new ObjectParameter("StateID", typeof(string));
    
            var statusIDParameter = statusID.HasValue ?
                new ObjectParameter("StatusID", statusID) :
                new ObjectParameter("StatusID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("AC_CookieTblHeaderUpdateStatus", stateIDParameter, statusIDParameter);
        }
    
        public virtual ObjectResult<LB_GetC_InfoByCustID_Result> LB_GetC_InfoByCustID(Nullable<int> custID)
        {
            var custIDParameter = custID.HasValue ?
                new ObjectParameter("CustID", custID) :
                new ObjectParameter("CustID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<LB_GetC_InfoByCustID_Result>("LB_GetC_InfoByCustID", custIDParameter);
        }
    
        public virtual int LB_InsertC_infoPartial(Nullable<int> sponsorID, Nullable<int> sourceID, string company, string taxID, string nameTitle, string firstName, string middleName, string lastName, string displayName, string address1, string city, string state, string postalCode, string country, string email, string companyPhone, string variantData1, Nullable<int> flag1, ObjectParameter memberID)
        {
            var sponsorIDParameter = sponsorID.HasValue ?
                new ObjectParameter("SponsorID", sponsorID) :
                new ObjectParameter("SponsorID", typeof(int));
    
            var sourceIDParameter = sourceID.HasValue ?
                new ObjectParameter("SourceID", sourceID) :
                new ObjectParameter("SourceID", typeof(int));
    
            var companyParameter = company != null ?
                new ObjectParameter("Company", company) :
                new ObjectParameter("Company", typeof(string));
    
            var taxIDParameter = taxID != null ?
                new ObjectParameter("TaxID", taxID) :
                new ObjectParameter("TaxID", typeof(string));
    
            var nameTitleParameter = nameTitle != null ?
                new ObjectParameter("NameTitle", nameTitle) :
                new ObjectParameter("NameTitle", typeof(string));
    
            var firstNameParameter = firstName != null ?
                new ObjectParameter("FirstName", firstName) :
                new ObjectParameter("FirstName", typeof(string));
    
            var middleNameParameter = middleName != null ?
                new ObjectParameter("MiddleName", middleName) :
                new ObjectParameter("MiddleName", typeof(string));
    
            var lastNameParameter = lastName != null ?
                new ObjectParameter("LastName", lastName) :
                new ObjectParameter("LastName", typeof(string));
    
            var displayNameParameter = displayName != null ?
                new ObjectParameter("DisplayName", displayName) :
                new ObjectParameter("DisplayName", typeof(string));
    
            var address1Parameter = address1 != null ?
                new ObjectParameter("Address1", address1) :
                new ObjectParameter("Address1", typeof(string));
    
            var cityParameter = city != null ?
                new ObjectParameter("City", city) :
                new ObjectParameter("City", typeof(string));
    
            var stateParameter = state != null ?
                new ObjectParameter("State", state) :
                new ObjectParameter("State", typeof(string));
    
            var postalCodeParameter = postalCode != null ?
                new ObjectParameter("PostalCode", postalCode) :
                new ObjectParameter("PostalCode", typeof(string));
    
            var countryParameter = country != null ?
                new ObjectParameter("Country", country) :
                new ObjectParameter("Country", typeof(string));
    
            var emailParameter = email != null ?
                new ObjectParameter("Email", email) :
                new ObjectParameter("Email", typeof(string));
    
            var companyPhoneParameter = companyPhone != null ?
                new ObjectParameter("CompanyPhone", companyPhone) :
                new ObjectParameter("CompanyPhone", typeof(string));
    
            var variantData1Parameter = variantData1 != null ?
                new ObjectParameter("VariantData1", variantData1) :
                new ObjectParameter("VariantData1", typeof(string));
    
            var flag1Parameter = flag1.HasValue ?
                new ObjectParameter("Flag1", flag1) :
                new ObjectParameter("Flag1", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("LB_InsertC_infoPartial", sponsorIDParameter, sourceIDParameter, companyParameter, taxIDParameter, nameTitleParameter, firstNameParameter, middleNameParameter, lastNameParameter, displayNameParameter, address1Parameter, cityParameter, stateParameter, postalCodeParameter, countryParameter, emailParameter, companyPhoneParameter, variantData1Parameter, flag1Parameter, memberID);
        }
    
        public virtual int LB_InsertC_Lookup(Nullable<int> dataGroupID, string dataLabel, Nullable<int> iDValue, string description, ObjectParameter lookupID)
        {
            var dataGroupIDParameter = dataGroupID.HasValue ?
                new ObjectParameter("DataGroupID", dataGroupID) :
                new ObjectParameter("DataGroupID", typeof(int));
    
            var dataLabelParameter = dataLabel != null ?
                new ObjectParameter("DataLabel", dataLabel) :
                new ObjectParameter("DataLabel", typeof(string));
    
            var iDValueParameter = iDValue.HasValue ?
                new ObjectParameter("IDValue", iDValue) :
                new ObjectParameter("IDValue", typeof(int));
    
            var descriptionParameter = description != null ?
                new ObjectParameter("Description", description) :
                new ObjectParameter("Description", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("LB_InsertC_Lookup", dataGroupIDParameter, dataLabelParameter, iDValueParameter, descriptionParameter, lookupID);
        }
    
        public virtual int LB_InsertSalesRep(string salesForceID, string taxID, string firstName, string lastName, string email, ObjectParameter returnCustID, ObjectParameter returnMessage)
        {
            var salesForceIDParameter = salesForceID != null ?
                new ObjectParameter("SalesForceID", salesForceID) :
                new ObjectParameter("SalesForceID", typeof(string));
    
            var taxIDParameter = taxID != null ?
                new ObjectParameter("TaxID", taxID) :
                new ObjectParameter("TaxID", typeof(string));
    
            var firstNameParameter = firstName != null ?
                new ObjectParameter("FirstName", firstName) :
                new ObjectParameter("FirstName", typeof(string));
    
            var lastNameParameter = lastName != null ?
                new ObjectParameter("LastName", lastName) :
                new ObjectParameter("LastName", typeof(string));
    
            var emailParameter = email != null ?
                new ObjectParameter("Email", email) :
                new ObjectParameter("Email", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("LB_InsertSalesRep", salesForceIDParameter, taxIDParameter, firstNameParameter, lastNameParameter, emailParameter, returnCustID, returnMessage);
        }
    
        public virtual int LB_UpdateC_InfoStatus(Nullable<int> custID, string status, Nullable<int> adminID)
        {
            var custIDParameter = custID.HasValue ?
                new ObjectParameter("CustID", custID) :
                new ObjectParameter("CustID", typeof(int));
    
            var statusParameter = status != null ?
                new ObjectParameter("Status", status) :
                new ObjectParameter("Status", typeof(string));
    
            var adminIDParameter = adminID.HasValue ?
                new ObjectParameter("AdminID", adminID) :
                new ObjectParameter("AdminID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("LB_UpdateC_InfoStatus", custIDParameter, statusParameter, adminIDParameter);
        }
    
        public virtual int LB_UpdateSalesRep(Nullable<int> custID, string salesForceID, string taxID, string firstName, string lastName, string email, ObjectParameter returnCustID, ObjectParameter returnMessage)
        {
            var custIDParameter = custID.HasValue ?
                new ObjectParameter("CustID", custID) :
                new ObjectParameter("CustID", typeof(int));
    
            var salesForceIDParameter = salesForceID != null ?
                new ObjectParameter("SalesForceID", salesForceID) :
                new ObjectParameter("SalesForceID", typeof(string));
    
            var taxIDParameter = taxID != null ?
                new ObjectParameter("TaxID", taxID) :
                new ObjectParameter("TaxID", typeof(string));
    
            var firstNameParameter = firstName != null ?
                new ObjectParameter("FirstName", firstName) :
                new ObjectParameter("FirstName", typeof(string));
    
            var lastNameParameter = lastName != null ?
                new ObjectParameter("LastName", lastName) :
                new ObjectParameter("LastName", typeof(string));
    
            var emailParameter = email != null ?
                new ObjectParameter("Email", email) :
                new ObjectParameter("Email", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("LB_UpdateSalesRep", custIDParameter, salesForceIDParameter, taxIDParameter, firstNameParameter, lastNameParameter, emailParameter, returnCustID, returnMessage);
        }
    
        public virtual ObjectResult<LB_GetSalesRepList_Result> LB_GetSalesRepList(string lastName, string status)
        {
            var lastNameParameter = lastName != null ?
                new ObjectParameter("LastName", lastName) :
                new ObjectParameter("LastName", typeof(string));
    
            var statusParameter = status != null ?
                new ObjectParameter("Status", status) :
                new ObjectParameter("Status", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<LB_GetSalesRepList_Result>("LB_GetSalesRepList", lastNameParameter, statusParameter);
        }
    
        public virtual ObjectResult<LB_GetNotes_Result> LB_GetNotes(Nullable<System.DateTime> startDate, Nullable<System.DateTime> endDate, string searchPhrase, string status, Nullable<int> custID)
        {
            var startDateParameter = startDate.HasValue ?
                new ObjectParameter("StartDate", startDate) :
                new ObjectParameter("StartDate", typeof(System.DateTime));
    
            var endDateParameter = endDate.HasValue ?
                new ObjectParameter("EndDate", endDate) :
                new ObjectParameter("EndDate", typeof(System.DateTime));
    
            var searchPhraseParameter = searchPhrase != null ?
                new ObjectParameter("SearchPhrase", searchPhrase) :
                new ObjectParameter("SearchPhrase", typeof(string));
    
            var statusParameter = status != null ?
                new ObjectParameter("Status", status) :
                new ObjectParameter("Status", typeof(string));
    
            var custIDParameter = custID.HasValue ?
                new ObjectParameter("CustID", custID) :
                new ObjectParameter("CustID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<LB_GetNotes_Result>("LB_GetNotes", startDateParameter, endDateParameter, searchPhraseParameter, statusParameter, custIDParameter);
        }
    
        public virtual int LB_InsertMemberDirector(Nullable<int> customerType, Nullable<int> memberID, string company, string displayName, string taxID, string accountingID, string nameTitle, string firstName, string lastName, string address1, string address2, string city, string state, string postalCode, string dayPhone, string mobile, string fax, string email, ObjectParameter returnCustID, ObjectParameter returnMessage)
        {
            var customerTypeParameter = customerType.HasValue ?
                new ObjectParameter("CustomerType", customerType) :
                new ObjectParameter("CustomerType", typeof(int));
    
            var memberIDParameter = memberID.HasValue ?
                new ObjectParameter("MemberID", memberID) :
                new ObjectParameter("MemberID", typeof(int));
    
            var companyParameter = company != null ?
                new ObjectParameter("Company", company) :
                new ObjectParameter("Company", typeof(string));
    
            var displayNameParameter = displayName != null ?
                new ObjectParameter("DisplayName", displayName) :
                new ObjectParameter("DisplayName", typeof(string));
    
            var taxIDParameter = taxID != null ?
                new ObjectParameter("TaxID", taxID) :
                new ObjectParameter("TaxID", typeof(string));
    
            var accountingIDParameter = accountingID != null ?
                new ObjectParameter("AccountingID", accountingID) :
                new ObjectParameter("AccountingID", typeof(string));
    
            var nameTitleParameter = nameTitle != null ?
                new ObjectParameter("NameTitle", nameTitle) :
                new ObjectParameter("NameTitle", typeof(string));
    
            var firstNameParameter = firstName != null ?
                new ObjectParameter("FirstName", firstName) :
                new ObjectParameter("FirstName", typeof(string));
    
            var lastNameParameter = lastName != null ?
                new ObjectParameter("LastName", lastName) :
                new ObjectParameter("LastName", typeof(string));
    
            var address1Parameter = address1 != null ?
                new ObjectParameter("Address1", address1) :
                new ObjectParameter("Address1", typeof(string));
    
            var address2Parameter = address2 != null ?
                new ObjectParameter("Address2", address2) :
                new ObjectParameter("Address2", typeof(string));
    
            var cityParameter = city != null ?
                new ObjectParameter("City", city) :
                new ObjectParameter("City", typeof(string));
    
            var stateParameter = state != null ?
                new ObjectParameter("State", state) :
                new ObjectParameter("State", typeof(string));
    
            var postalCodeParameter = postalCode != null ?
                new ObjectParameter("PostalCode", postalCode) :
                new ObjectParameter("PostalCode", typeof(string));
    
            var dayPhoneParameter = dayPhone != null ?
                new ObjectParameter("DayPhone", dayPhone) :
                new ObjectParameter("DayPhone", typeof(string));
    
            var mobileParameter = mobile != null ?
                new ObjectParameter("Mobile", mobile) :
                new ObjectParameter("Mobile", typeof(string));
    
            var faxParameter = fax != null ?
                new ObjectParameter("Fax", fax) :
                new ObjectParameter("Fax", typeof(string));
    
            var emailParameter = email != null ?
                new ObjectParameter("Email", email) :
                new ObjectParameter("Email", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("LB_InsertMemberDirector", customerTypeParameter, memberIDParameter, companyParameter, displayNameParameter, taxIDParameter, accountingIDParameter, nameTitleParameter, firstNameParameter, lastNameParameter, address1Parameter, address2Parameter, cityParameter, stateParameter, postalCodeParameter, dayPhoneParameter, mobileParameter, faxParameter, emailParameter, returnCustID, returnMessage);
        }
    
        public virtual int LB_UpdateMemberDirector(Nullable<int> customerType, Nullable<int> custID, string taxID, string company, string displayName, string accountingID, string nameTitle, string firstName, string lastName, string address1, string address2, string city, string state, string postalCode, string dayPhone, string mobile, string fax, string email, ObjectParameter returnCustID, ObjectParameter returnMessage)
        {
            var customerTypeParameter = customerType.HasValue ?
                new ObjectParameter("CustomerType", customerType) :
                new ObjectParameter("CustomerType", typeof(int));
    
            var custIDParameter = custID.HasValue ?
                new ObjectParameter("CustID", custID) :
                new ObjectParameter("CustID", typeof(int));
    
            var taxIDParameter = taxID != null ?
                new ObjectParameter("TaxID", taxID) :
                new ObjectParameter("TaxID", typeof(string));
    
            var companyParameter = company != null ?
                new ObjectParameter("Company", company) :
                new ObjectParameter("Company", typeof(string));
    
            var displayNameParameter = displayName != null ?
                new ObjectParameter("DisplayName", displayName) :
                new ObjectParameter("DisplayName", typeof(string));
    
            var accountingIDParameter = accountingID != null ?
                new ObjectParameter("AccountingID", accountingID) :
                new ObjectParameter("AccountingID", typeof(string));
    
            var nameTitleParameter = nameTitle != null ?
                new ObjectParameter("NameTitle", nameTitle) :
                new ObjectParameter("NameTitle", typeof(string));
    
            var firstNameParameter = firstName != null ?
                new ObjectParameter("FirstName", firstName) :
                new ObjectParameter("FirstName", typeof(string));
    
            var lastNameParameter = lastName != null ?
                new ObjectParameter("LastName", lastName) :
                new ObjectParameter("LastName", typeof(string));
    
            var address1Parameter = address1 != null ?
                new ObjectParameter("Address1", address1) :
                new ObjectParameter("Address1", typeof(string));
    
            var address2Parameter = address2 != null ?
                new ObjectParameter("Address2", address2) :
                new ObjectParameter("Address2", typeof(string));
    
            var cityParameter = city != null ?
                new ObjectParameter("City", city) :
                new ObjectParameter("City", typeof(string));
    
            var stateParameter = state != null ?
                new ObjectParameter("State", state) :
                new ObjectParameter("State", typeof(string));
    
            var postalCodeParameter = postalCode != null ?
                new ObjectParameter("PostalCode", postalCode) :
                new ObjectParameter("PostalCode", typeof(string));
    
            var dayPhoneParameter = dayPhone != null ?
                new ObjectParameter("DayPhone", dayPhone) :
                new ObjectParameter("DayPhone", typeof(string));
    
            var mobileParameter = mobile != null ?
                new ObjectParameter("Mobile", mobile) :
                new ObjectParameter("Mobile", typeof(string));
    
            var faxParameter = fax != null ?
                new ObjectParameter("Fax", fax) :
                new ObjectParameter("Fax", typeof(string));
    
            var emailParameter = email != null ?
                new ObjectParameter("Email", email) :
                new ObjectParameter("Email", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("LB_UpdateMemberDirector", customerTypeParameter, custIDParameter, taxIDParameter, companyParameter, displayNameParameter, accountingIDParameter, nameTitleParameter, firstNameParameter, lastNameParameter, address1Parameter, address2Parameter, cityParameter, stateParameter, postalCodeParameter, dayPhoneParameter, mobileParameter, faxParameter, emailParameter, returnCustID, returnMessage);
        }
    
        public virtual ObjectResult<LB_GetCustByLastNameStatusType_Result> LB_GetCustByLastNameStatusType(string lastName, string status, Nullable<int> customerType, Nullable<int> sponsorID)
        {
            var lastNameParameter = lastName != null ?
                new ObjectParameter("LastName", lastName) :
                new ObjectParameter("LastName", typeof(string));
    
            var statusParameter = status != null ?
                new ObjectParameter("Status", status) :
                new ObjectParameter("Status", typeof(string));
    
            var customerTypeParameter = customerType.HasValue ?
                new ObjectParameter("CustomerType", customerType) :
                new ObjectParameter("CustomerType", typeof(int));
    
            var sponsorIDParameter = sponsorID.HasValue ?
                new ObjectParameter("SponsorID", sponsorID) :
                new ObjectParameter("SponsorID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<LB_GetCustByLastNameStatusType_Result>("LB_GetCustByLastNameStatusType", lastNameParameter, statusParameter, customerTypeParameter, sponsorIDParameter);
        }
    
        public virtual int LB_DeleteSalesRep(Nullable<int> custID, Nullable<int> adminID, ObjectParameter returnCustID, ObjectParameter returnMessage)
        {
            var custIDParameter = custID.HasValue ?
                new ObjectParameter("CustID", custID) :
                new ObjectParameter("CustID", typeof(int));
    
            var adminIDParameter = adminID.HasValue ?
                new ObjectParameter("AdminID", adminID) :
                new ObjectParameter("AdminID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("LB_DeleteSalesRep", custIDParameter, adminIDParameter, returnCustID, returnMessage);
        }
    
        public virtual int LB_InsertAdmin(string displayName, string email, ObjectParameter returnAdminID, ObjectParameter returnMessage)
        {
            var displayNameParameter = displayName != null ?
                new ObjectParameter("DisplayName", displayName) :
                new ObjectParameter("DisplayName", typeof(string));
    
            var emailParameter = email != null ?
                new ObjectParameter("Email", email) :
                new ObjectParameter("Email", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("LB_InsertAdmin", displayNameParameter, emailParameter, returnAdminID, returnMessage);
        }
    
        public virtual int LB_UpdateAdmin(Nullable<int> adminID, string displayName, string email, ObjectParameter returnAdminID, ObjectParameter returnMessage)
        {
            var adminIDParameter = adminID.HasValue ?
                new ObjectParameter("AdminID", adminID) :
                new ObjectParameter("AdminID", typeof(int));
    
            var displayNameParameter = displayName != null ?
                new ObjectParameter("DisplayName", displayName) :
                new ObjectParameter("DisplayName", typeof(string));
    
            var emailParameter = email != null ?
                new ObjectParameter("Email", email) :
                new ObjectParameter("Email", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("LB_UpdateAdmin", adminIDParameter, displayNameParameter, emailParameter, returnAdminID, returnMessage);
        }
    
        public virtual int LB_DeleteAdmin(string userID, ObjectParameter returnAdminID, ObjectParameter returnMessage)
        {
            var userIDParameter = userID != null ?
                new ObjectParameter("UserID", userID) :
                new ObjectParameter("UserID", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("LB_DeleteAdmin", userIDParameter, returnAdminID, returnMessage);
        }
    
        public virtual int LB_InsertNote(Nullable<int> custID, string noteText, Nullable<int> adminID, Nullable<int> assignedTo, Nullable<int> accessLevel, string noteReason, string noteType, string resultCode, string resultDescription, string status, Nullable<System.DateTime> assignedDate, Nullable<System.DateTime> startDate, Nullable<System.DateTime> endDate, Nullable<System.DateTime> statusDate, Nullable<int> statusID)
        {
            var custIDParameter = custID.HasValue ?
                new ObjectParameter("CustID", custID) :
                new ObjectParameter("CustID", typeof(int));
    
            var noteTextParameter = noteText != null ?
                new ObjectParameter("NoteText", noteText) :
                new ObjectParameter("NoteText", typeof(string));
    
            var adminIDParameter = adminID.HasValue ?
                new ObjectParameter("AdminID", adminID) :
                new ObjectParameter("AdminID", typeof(int));
    
            var assignedToParameter = assignedTo.HasValue ?
                new ObjectParameter("AssignedTo", assignedTo) :
                new ObjectParameter("AssignedTo", typeof(int));
    
            var accessLevelParameter = accessLevel.HasValue ?
                new ObjectParameter("AccessLevel", accessLevel) :
                new ObjectParameter("AccessLevel", typeof(int));
    
            var noteReasonParameter = noteReason != null ?
                new ObjectParameter("NoteReason", noteReason) :
                new ObjectParameter("NoteReason", typeof(string));
    
            var noteTypeParameter = noteType != null ?
                new ObjectParameter("NoteType", noteType) :
                new ObjectParameter("NoteType", typeof(string));
    
            var resultCodeParameter = resultCode != null ?
                new ObjectParameter("ResultCode", resultCode) :
                new ObjectParameter("ResultCode", typeof(string));
    
            var resultDescriptionParameter = resultDescription != null ?
                new ObjectParameter("ResultDescription", resultDescription) :
                new ObjectParameter("ResultDescription", typeof(string));
    
            var statusParameter = status != null ?
                new ObjectParameter("Status", status) :
                new ObjectParameter("Status", typeof(string));
    
            var assignedDateParameter = assignedDate.HasValue ?
                new ObjectParameter("AssignedDate", assignedDate) :
                new ObjectParameter("AssignedDate", typeof(System.DateTime));
    
            var startDateParameter = startDate.HasValue ?
                new ObjectParameter("StartDate", startDate) :
                new ObjectParameter("StartDate", typeof(System.DateTime));
    
            var endDateParameter = endDate.HasValue ?
                new ObjectParameter("EndDate", endDate) :
                new ObjectParameter("EndDate", typeof(System.DateTime));
    
            var statusDateParameter = statusDate.HasValue ?
                new ObjectParameter("StatusDate", statusDate) :
                new ObjectParameter("StatusDate", typeof(System.DateTime));
    
            var statusIDParameter = statusID.HasValue ?
                new ObjectParameter("StatusID", statusID) :
                new ObjectParameter("StatusID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("LB_InsertNote", custIDParameter, noteTextParameter, adminIDParameter, assignedToParameter, accessLevelParameter, noteReasonParameter, noteTypeParameter, resultCodeParameter, resultDescriptionParameter, statusParameter, assignedDateParameter, startDateParameter, endDateParameter, statusDateParameter, statusIDParameter);
        }
    
        public virtual ObjectResult<LB_GetNoteByID_Result> LB_GetNoteByID(Nullable<int> noteID)
        {
            var noteIDParameter = noteID.HasValue ?
                new ObjectParameter("NoteID", noteID) :
                new ObjectParameter("NoteID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<LB_GetNoteByID_Result>("LB_GetNoteByID", noteIDParameter);
        }
    
        public virtual int LB_UpdateNote(Nullable<int> noteID, string noteText, string status, Nullable<int> assignedTo)
        {
            var noteIDParameter = noteID.HasValue ?
                new ObjectParameter("NoteID", noteID) :
                new ObjectParameter("NoteID", typeof(int));
    
            var noteTextParameter = noteText != null ?
                new ObjectParameter("NoteText", noteText) :
                new ObjectParameter("NoteText", typeof(string));
    
            var statusParameter = status != null ?
                new ObjectParameter("Status", status) :
                new ObjectParameter("Status", typeof(string));
    
            var assignedToParameter = assignedTo.HasValue ?
                new ObjectParameter("AssignedTo", assignedTo) :
                new ObjectParameter("AssignedTo", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("LB_UpdateNote", noteIDParameter, noteTextParameter, statusParameter, assignedToParameter);
        }
    
        public virtual ObjectResult<CMS_GetViewFile_Result> CMS_GetViewFile(string viewRights, Nullable<int> adminID, Nullable<int> statusID)
        {
            var viewRightsParameter = viewRights != null ?
                new ObjectParameter("ViewRights", viewRights) :
                new ObjectParameter("ViewRights", typeof(string));
    
            var adminIDParameter = adminID.HasValue ?
                new ObjectParameter("AdminID", adminID) :
                new ObjectParameter("AdminID", typeof(int));
    
            var statusIDParameter = statusID.HasValue ?
                new ObjectParameter("StatusID", statusID) :
                new ObjectParameter("StatusID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<CMS_GetViewFile_Result>("CMS_GetViewFile", viewRightsParameter, adminIDParameter, statusIDParameter);
        }
    
        public virtual int LB_InsertNoteMin(Nullable<int> custID, string noteText, Nullable<int> adminID)
        {
            var custIDParameter = custID.HasValue ?
                new ObjectParameter("CustID", custID) :
                new ObjectParameter("CustID", typeof(int));
    
            var noteTextParameter = noteText != null ?
                new ObjectParameter("NoteText", noteText) :
                new ObjectParameter("NoteText", typeof(string));
    
            var adminIDParameter = adminID.HasValue ?
                new ObjectParameter("AdminID", adminID) :
                new ObjectParameter("AdminID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("LB_InsertNoteMin", custIDParameter, noteTextParameter, adminIDParameter);
        }
    
        public virtual int LB_InsertVendor(Nullable<int> customerType, string company, string displayName, string address1, string address2, string city, string state, string postalCode, string companyPhone, string fax, Nullable<int> flag1, string nameTitle, string firstName, string lastName, string email, string dayPhone, string mobile, Nullable<int> flag2, string siteName, Nullable<int> hideFlag, ObjectParameter returnCustID, ObjectParameter returnMessage)
        {
            var customerTypeParameter = customerType.HasValue ?
                new ObjectParameter("CustomerType", customerType) :
                new ObjectParameter("CustomerType", typeof(int));
    
            var companyParameter = company != null ?
                new ObjectParameter("Company", company) :
                new ObjectParameter("Company", typeof(string));
    
            var displayNameParameter = displayName != null ?
                new ObjectParameter("DisplayName", displayName) :
                new ObjectParameter("DisplayName", typeof(string));
    
            var address1Parameter = address1 != null ?
                new ObjectParameter("Address1", address1) :
                new ObjectParameter("Address1", typeof(string));
    
            var address2Parameter = address2 != null ?
                new ObjectParameter("Address2", address2) :
                new ObjectParameter("Address2", typeof(string));
    
            var cityParameter = city != null ?
                new ObjectParameter("City", city) :
                new ObjectParameter("City", typeof(string));
    
            var stateParameter = state != null ?
                new ObjectParameter("State", state) :
                new ObjectParameter("State", typeof(string));
    
            var postalCodeParameter = postalCode != null ?
                new ObjectParameter("PostalCode", postalCode) :
                new ObjectParameter("PostalCode", typeof(string));
    
            var companyPhoneParameter = companyPhone != null ?
                new ObjectParameter("CompanyPhone", companyPhone) :
                new ObjectParameter("CompanyPhone", typeof(string));
    
            var faxParameter = fax != null ?
                new ObjectParameter("Fax", fax) :
                new ObjectParameter("Fax", typeof(string));
    
            var flag1Parameter = flag1.HasValue ?
                new ObjectParameter("Flag1", flag1) :
                new ObjectParameter("Flag1", typeof(int));
    
            var nameTitleParameter = nameTitle != null ?
                new ObjectParameter("NameTitle", nameTitle) :
                new ObjectParameter("NameTitle", typeof(string));
    
            var firstNameParameter = firstName != null ?
                new ObjectParameter("FirstName", firstName) :
                new ObjectParameter("FirstName", typeof(string));
    
            var lastNameParameter = lastName != null ?
                new ObjectParameter("LastName", lastName) :
                new ObjectParameter("LastName", typeof(string));
    
            var emailParameter = email != null ?
                new ObjectParameter("Email", email) :
                new ObjectParameter("Email", typeof(string));
    
            var dayPhoneParameter = dayPhone != null ?
                new ObjectParameter("DayPhone", dayPhone) :
                new ObjectParameter("DayPhone", typeof(string));
    
            var mobileParameter = mobile != null ?
                new ObjectParameter("Mobile", mobile) :
                new ObjectParameter("Mobile", typeof(string));
    
            var flag2Parameter = flag2.HasValue ?
                new ObjectParameter("Flag2", flag2) :
                new ObjectParameter("Flag2", typeof(int));
    
            var siteNameParameter = siteName != null ?
                new ObjectParameter("SiteName", siteName) :
                new ObjectParameter("SiteName", typeof(string));
    
            var hideFlagParameter = hideFlag.HasValue ?
                new ObjectParameter("HideFlag", hideFlag) :
                new ObjectParameter("HideFlag", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("LB_InsertVendor", customerTypeParameter, companyParameter, displayNameParameter, address1Parameter, address2Parameter, cityParameter, stateParameter, postalCodeParameter, companyPhoneParameter, faxParameter, flag1Parameter, nameTitleParameter, firstNameParameter, lastNameParameter, emailParameter, dayPhoneParameter, mobileParameter, flag2Parameter, siteNameParameter, hideFlagParameter, returnCustID, returnMessage);
        }
    
        public virtual int LB_InsertVendorContact(Nullable<int> sponsorID, Nullable<int> customertype, string contactType, string nameTitle, string firstName, string lastName, string email, string address1, string address2, string city, string state, string postalCode, string dayPhone, string mobile, string fax, Nullable<int> flag2, ObjectParameter returnCustID, ObjectParameter returnMessage)
        {
            var sponsorIDParameter = sponsorID.HasValue ?
                new ObjectParameter("SponsorID", sponsorID) :
                new ObjectParameter("SponsorID", typeof(int));
    
            var customertypeParameter = customertype.HasValue ?
                new ObjectParameter("Customertype", customertype) :
                new ObjectParameter("Customertype", typeof(int));
    
            var contactTypeParameter = contactType != null ?
                new ObjectParameter("ContactType", contactType) :
                new ObjectParameter("ContactType", typeof(string));
    
            var nameTitleParameter = nameTitle != null ?
                new ObjectParameter("NameTitle", nameTitle) :
                new ObjectParameter("NameTitle", typeof(string));
    
            var firstNameParameter = firstName != null ?
                new ObjectParameter("FirstName", firstName) :
                new ObjectParameter("FirstName", typeof(string));
    
            var lastNameParameter = lastName != null ?
                new ObjectParameter("LastName", lastName) :
                new ObjectParameter("LastName", typeof(string));
    
            var emailParameter = email != null ?
                new ObjectParameter("Email", email) :
                new ObjectParameter("Email", typeof(string));
    
            var address1Parameter = address1 != null ?
                new ObjectParameter("Address1", address1) :
                new ObjectParameter("Address1", typeof(string));
    
            var address2Parameter = address2 != null ?
                new ObjectParameter("Address2", address2) :
                new ObjectParameter("Address2", typeof(string));
    
            var cityParameter = city != null ?
                new ObjectParameter("City", city) :
                new ObjectParameter("City", typeof(string));
    
            var stateParameter = state != null ?
                new ObjectParameter("State", state) :
                new ObjectParameter("State", typeof(string));
    
            var postalCodeParameter = postalCode != null ?
                new ObjectParameter("PostalCode", postalCode) :
                new ObjectParameter("PostalCode", typeof(string));
    
            var dayPhoneParameter = dayPhone != null ?
                new ObjectParameter("DayPhone", dayPhone) :
                new ObjectParameter("DayPhone", typeof(string));
    
            var mobileParameter = mobile != null ?
                new ObjectParameter("Mobile", mobile) :
                new ObjectParameter("Mobile", typeof(string));
    
            var faxParameter = fax != null ?
                new ObjectParameter("Fax", fax) :
                new ObjectParameter("Fax", typeof(string));
    
            var flag2Parameter = flag2.HasValue ?
                new ObjectParameter("Flag2", flag2) :
                new ObjectParameter("Flag2", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("LB_InsertVendorContact", sponsorIDParameter, customertypeParameter, contactTypeParameter, nameTitleParameter, firstNameParameter, lastNameParameter, emailParameter, address1Parameter, address2Parameter, cityParameter, stateParameter, postalCodeParameter, dayPhoneParameter, mobileParameter, faxParameter, flag2Parameter, returnCustID, returnMessage);
        }
    
        public virtual int LB_InsertVendorProgram(Nullable<int> custID, Nullable<int> c_ProgramID, string programName, string programSummary, string programDescription, string programRequirements, string programDirections, Nullable<int> memberParticipationRequired, Nullable<decimal> memberRebate, Nullable<decimal> corporateRebate, Nullable<int> adminID, ObjectParameter returnProgramID, ObjectParameter returnMessage)
        {
            var custIDParameter = custID.HasValue ?
                new ObjectParameter("CustID", custID) :
                new ObjectParameter("CustID", typeof(int));
    
            var c_ProgramIDParameter = c_ProgramID.HasValue ?
                new ObjectParameter("C_ProgramID", c_ProgramID) :
                new ObjectParameter("C_ProgramID", typeof(int));
    
            var programNameParameter = programName != null ?
                new ObjectParameter("ProgramName", programName) :
                new ObjectParameter("ProgramName", typeof(string));
    
            var programSummaryParameter = programSummary != null ?
                new ObjectParameter("ProgramSummary", programSummary) :
                new ObjectParameter("ProgramSummary", typeof(string));
    
            var programDescriptionParameter = programDescription != null ?
                new ObjectParameter("ProgramDescription", programDescription) :
                new ObjectParameter("ProgramDescription", typeof(string));
    
            var programRequirementsParameter = programRequirements != null ?
                new ObjectParameter("ProgramRequirements", programRequirements) :
                new ObjectParameter("ProgramRequirements", typeof(string));
    
            var programDirectionsParameter = programDirections != null ?
                new ObjectParameter("ProgramDirections", programDirections) :
                new ObjectParameter("ProgramDirections", typeof(string));
    
            var memberParticipationRequiredParameter = memberParticipationRequired.HasValue ?
                new ObjectParameter("MemberParticipationRequired", memberParticipationRequired) :
                new ObjectParameter("MemberParticipationRequired", typeof(int));
    
            var memberRebateParameter = memberRebate.HasValue ?
                new ObjectParameter("MemberRebate", memberRebate) :
                new ObjectParameter("MemberRebate", typeof(decimal));
    
            var corporateRebateParameter = corporateRebate.HasValue ?
                new ObjectParameter("CorporateRebate", corporateRebate) :
                new ObjectParameter("CorporateRebate", typeof(decimal));
    
            var adminIDParameter = adminID.HasValue ?
                new ObjectParameter("AdminID", adminID) :
                new ObjectParameter("AdminID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("LB_InsertVendorProgram", custIDParameter, c_ProgramIDParameter, programNameParameter, programSummaryParameter, programDescriptionParameter, programRequirementsParameter, programDirectionsParameter, memberParticipationRequiredParameter, memberRebateParameter, corporateRebateParameter, adminIDParameter, returnProgramID, returnMessage);
        }
    
        public virtual int LB_InsertDocument(Nullable<int> custID, Nullable<int> parentID, string secIDName, Nullable<int> secID, string fileName, string path, string templateID, string documentType, string documentTitle, string documentName, string documentDescription, Nullable<int> hideFlag, Nullable<int> adminID, ObjectParameter returnID, ObjectParameter returnMessage)
        {
            var custIDParameter = custID.HasValue ?
                new ObjectParameter("CustID", custID) :
                new ObjectParameter("CustID", typeof(int));
    
            var parentIDParameter = parentID.HasValue ?
                new ObjectParameter("ParentID", parentID) :
                new ObjectParameter("ParentID", typeof(int));
    
            var secIDNameParameter = secIDName != null ?
                new ObjectParameter("SecIDName", secIDName) :
                new ObjectParameter("SecIDName", typeof(string));
    
            var secIDParameter = secID.HasValue ?
                new ObjectParameter("SecID", secID) :
                new ObjectParameter("SecID", typeof(int));
    
            var fileNameParameter = fileName != null ?
                new ObjectParameter("FileName", fileName) :
                new ObjectParameter("FileName", typeof(string));
    
            var pathParameter = path != null ?
                new ObjectParameter("Path", path) :
                new ObjectParameter("Path", typeof(string));
    
            var templateIDParameter = templateID != null ?
                new ObjectParameter("TemplateID", templateID) :
                new ObjectParameter("TemplateID", typeof(string));
    
            var documentTypeParameter = documentType != null ?
                new ObjectParameter("DocumentType", documentType) :
                new ObjectParameter("DocumentType", typeof(string));
    
            var documentTitleParameter = documentTitle != null ?
                new ObjectParameter("DocumentTitle", documentTitle) :
                new ObjectParameter("DocumentTitle", typeof(string));
    
            var documentNameParameter = documentName != null ?
                new ObjectParameter("DocumentName", documentName) :
                new ObjectParameter("DocumentName", typeof(string));
    
            var documentDescriptionParameter = documentDescription != null ?
                new ObjectParameter("DocumentDescription", documentDescription) :
                new ObjectParameter("DocumentDescription", typeof(string));
    
            var hideFlagParameter = hideFlag.HasValue ?
                new ObjectParameter("HideFlag", hideFlag) :
                new ObjectParameter("HideFlag", typeof(int));
    
            var adminIDParameter = adminID.HasValue ?
                new ObjectParameter("AdminID", adminID) :
                new ObjectParameter("AdminID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("LB_InsertDocument", custIDParameter, parentIDParameter, secIDNameParameter, secIDParameter, fileNameParameter, pathParameter, templateIDParameter, documentTypeParameter, documentTitleParameter, documentNameParameter, documentDescriptionParameter, hideFlagParameter, adminIDParameter, returnID, returnMessage);
        }
    
        public virtual int LB_UpdateVendorContact(Nullable<int> sponsorID, Nullable<int> custID, Nullable<int> customerType, string contactType, string nameTitle, string firstName, string lastName, string email, string address1, string address2, string city, string state, string postalCode, string dayPhone, string mobile, string fax, Nullable<int> flag2, ObjectParameter returnCustID, ObjectParameter returnMessage)
        {
            var sponsorIDParameter = sponsorID.HasValue ?
                new ObjectParameter("SponsorID", sponsorID) :
                new ObjectParameter("SponsorID", typeof(int));
    
            var custIDParameter = custID.HasValue ?
                new ObjectParameter("CustID", custID) :
                new ObjectParameter("CustID", typeof(int));
    
            var customerTypeParameter = customerType.HasValue ?
                new ObjectParameter("CustomerType", customerType) :
                new ObjectParameter("CustomerType", typeof(int));
    
            var contactTypeParameter = contactType != null ?
                new ObjectParameter("ContactType", contactType) :
                new ObjectParameter("ContactType", typeof(string));
    
            var nameTitleParameter = nameTitle != null ?
                new ObjectParameter("NameTitle", nameTitle) :
                new ObjectParameter("NameTitle", typeof(string));
    
            var firstNameParameter = firstName != null ?
                new ObjectParameter("FirstName", firstName) :
                new ObjectParameter("FirstName", typeof(string));
    
            var lastNameParameter = lastName != null ?
                new ObjectParameter("LastName", lastName) :
                new ObjectParameter("LastName", typeof(string));
    
            var emailParameter = email != null ?
                new ObjectParameter("Email", email) :
                new ObjectParameter("Email", typeof(string));
    
            var address1Parameter = address1 != null ?
                new ObjectParameter("Address1", address1) :
                new ObjectParameter("Address1", typeof(string));
    
            var address2Parameter = address2 != null ?
                new ObjectParameter("Address2", address2) :
                new ObjectParameter("Address2", typeof(string));
    
            var cityParameter = city != null ?
                new ObjectParameter("City", city) :
                new ObjectParameter("City", typeof(string));
    
            var stateParameter = state != null ?
                new ObjectParameter("State", state) :
                new ObjectParameter("State", typeof(string));
    
            var postalCodeParameter = postalCode != null ?
                new ObjectParameter("PostalCode", postalCode) :
                new ObjectParameter("PostalCode", typeof(string));
    
            var dayPhoneParameter = dayPhone != null ?
                new ObjectParameter("DayPhone", dayPhone) :
                new ObjectParameter("DayPhone", typeof(string));
    
            var mobileParameter = mobile != null ?
                new ObjectParameter("Mobile", mobile) :
                new ObjectParameter("Mobile", typeof(string));
    
            var faxParameter = fax != null ?
                new ObjectParameter("Fax", fax) :
                new ObjectParameter("Fax", typeof(string));
    
            var flag2Parameter = flag2.HasValue ?
                new ObjectParameter("Flag2", flag2) :
                new ObjectParameter("Flag2", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("LB_UpdateVendorContact", sponsorIDParameter, custIDParameter, customerTypeParameter, contactTypeParameter, nameTitleParameter, firstNameParameter, lastNameParameter, emailParameter, address1Parameter, address2Parameter, cityParameter, stateParameter, postalCodeParameter, dayPhoneParameter, mobileParameter, faxParameter, flag2Parameter, returnCustID, returnMessage);
        }
    
        public virtual int LB_DeleteC_Info(Nullable<int> custID, string customerTypeLabel, Nullable<int> adminID, ObjectParameter returnCustID, ObjectParameter returnMessage)
        {
            var custIDParameter = custID.HasValue ?
                new ObjectParameter("CustID", custID) :
                new ObjectParameter("CustID", typeof(int));
    
            var customerTypeLabelParameter = customerTypeLabel != null ?
                new ObjectParameter("CustomerTypeLabel", customerTypeLabel) :
                new ObjectParameter("CustomerTypeLabel", typeof(string));
    
            var adminIDParameter = adminID.HasValue ?
                new ObjectParameter("AdminID", adminID) :
                new ObjectParameter("AdminID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("LB_DeleteC_Info", custIDParameter, customerTypeLabelParameter, adminIDParameter, returnCustID, returnMessage);
        }
    
        public virtual int LB_DeleteVendorProgram(Nullable<int> programID, Nullable<int> adminID, ObjectParameter returnID, ObjectParameter returnMessage)
        {
            var programIDParameter = programID.HasValue ?
                new ObjectParameter("ProgramID", programID) :
                new ObjectParameter("ProgramID", typeof(int));
    
            var adminIDParameter = adminID.HasValue ?
                new ObjectParameter("AdminID", adminID) :
                new ObjectParameter("AdminID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("LB_DeleteVendorProgram", programIDParameter, adminIDParameter, returnID, returnMessage);
        }
    
        public virtual int LB_UpdateDocument(Nullable<int> custID, Nullable<int> documentID, string secIDName, Nullable<int> secID, string templateID, string documentType, string documentTitle, string documentName, string documentDescription, Nullable<int> hideFlag, Nullable<int> adminID, ObjectParameter returnID, ObjectParameter returnMessage)
        {
            var custIDParameter = custID.HasValue ?
                new ObjectParameter("CustID", custID) :
                new ObjectParameter("CustID", typeof(int));
    
            var documentIDParameter = documentID.HasValue ?
                new ObjectParameter("DocumentID", documentID) :
                new ObjectParameter("DocumentID", typeof(int));
    
            var secIDNameParameter = secIDName != null ?
                new ObjectParameter("SecIDName", secIDName) :
                new ObjectParameter("SecIDName", typeof(string));
    
            var secIDParameter = secID.HasValue ?
                new ObjectParameter("SecID", secID) :
                new ObjectParameter("SecID", typeof(int));
    
            var templateIDParameter = templateID != null ?
                new ObjectParameter("TemplateID", templateID) :
                new ObjectParameter("TemplateID", typeof(string));
    
            var documentTypeParameter = documentType != null ?
                new ObjectParameter("DocumentType", documentType) :
                new ObjectParameter("DocumentType", typeof(string));
    
            var documentTitleParameter = documentTitle != null ?
                new ObjectParameter("DocumentTitle", documentTitle) :
                new ObjectParameter("DocumentTitle", typeof(string));
    
            var documentNameParameter = documentName != null ?
                new ObjectParameter("DocumentName", documentName) :
                new ObjectParameter("DocumentName", typeof(string));
    
            var documentDescriptionParameter = documentDescription != null ?
                new ObjectParameter("DocumentDescription", documentDescription) :
                new ObjectParameter("DocumentDescription", typeof(string));
    
            var hideFlagParameter = hideFlag.HasValue ?
                new ObjectParameter("HideFlag", hideFlag) :
                new ObjectParameter("HideFlag", typeof(int));
    
            var adminIDParameter = adminID.HasValue ?
                new ObjectParameter("AdminID", adminID) :
                new ObjectParameter("AdminID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("LB_UpdateDocument", custIDParameter, documentIDParameter, secIDNameParameter, secIDParameter, templateIDParameter, documentTypeParameter, documentTitleParameter, documentNameParameter, documentDescriptionParameter, hideFlagParameter, adminIDParameter, returnID, returnMessage);
        }
    
        public virtual int LB_DeleteDocument(Nullable<int> custID, Nullable<int> documentID, Nullable<int> adminID, ObjectParameter returnID, ObjectParameter returnMessage)
        {
            var custIDParameter = custID.HasValue ?
                new ObjectParameter("CustID", custID) :
                new ObjectParameter("CustID", typeof(int));
    
            var documentIDParameter = documentID.HasValue ?
                new ObjectParameter("DocumentID", documentID) :
                new ObjectParameter("DocumentID", typeof(int));
    
            var adminIDParameter = adminID.HasValue ?
                new ObjectParameter("AdminID", adminID) :
                new ObjectParameter("AdminID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("LB_DeleteDocument", custIDParameter, documentIDParameter, adminIDParameter, returnID, returnMessage);
        }
    
        public virtual int LB_DeleteDocumentByVendor(Nullable<int> custID, Nullable<int> documentID, Nullable<int> adminID, ObjectParameter returnID, ObjectParameter returnMessage)
        {
            var custIDParameter = custID.HasValue ?
                new ObjectParameter("CustID", custID) :
                new ObjectParameter("CustID", typeof(int));
    
            var documentIDParameter = documentID.HasValue ?
                new ObjectParameter("DocumentID", documentID) :
                new ObjectParameter("DocumentID", typeof(int));
    
            var adminIDParameter = adminID.HasValue ?
                new ObjectParameter("AdminID", adminID) :
                new ObjectParameter("AdminID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("LB_DeleteDocumentByVendor", custIDParameter, documentIDParameter, adminIDParameter, returnID, returnMessage);
        }
    
        public virtual int LB_DeleteVendorRequirement(Nullable<int> requirementID, Nullable<int> adminID, ObjectParameter returnID, ObjectParameter returnMessage)
        {
            var requirementIDParameter = requirementID.HasValue ?
                new ObjectParameter("RequirementID", requirementID) :
                new ObjectParameter("RequirementID", typeof(int));
    
            var adminIDParameter = adminID.HasValue ?
                new ObjectParameter("AdminID", adminID) :
                new ObjectParameter("AdminID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("LB_DeleteVendorRequirement", requirementIDParameter, adminIDParameter, returnID, returnMessage);
        }
    
        public virtual int LB_InsertVendorRequirement(Nullable<int> custID, Nullable<int> programID, string requirementType, string requirementName, string requirementDescription, Nullable<int> documentID, Nullable<int> adminID, ObjectParameter returnRequirementID, ObjectParameter returnMessage)
        {
            var custIDParameter = custID.HasValue ?
                new ObjectParameter("CustID", custID) :
                new ObjectParameter("CustID", typeof(int));
    
            var programIDParameter = programID.HasValue ?
                new ObjectParameter("ProgramID", programID) :
                new ObjectParameter("ProgramID", typeof(int));
    
            var requirementTypeParameter = requirementType != null ?
                new ObjectParameter("RequirementType", requirementType) :
                new ObjectParameter("RequirementType", typeof(string));
    
            var requirementNameParameter = requirementName != null ?
                new ObjectParameter("RequirementName", requirementName) :
                new ObjectParameter("RequirementName", typeof(string));
    
            var requirementDescriptionParameter = requirementDescription != null ?
                new ObjectParameter("RequirementDescription", requirementDescription) :
                new ObjectParameter("RequirementDescription", typeof(string));
    
            var documentIDParameter = documentID.HasValue ?
                new ObjectParameter("DocumentID", documentID) :
                new ObjectParameter("DocumentID", typeof(int));
    
            var adminIDParameter = adminID.HasValue ?
                new ObjectParameter("AdminID", adminID) :
                new ObjectParameter("AdminID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("LB_InsertVendorRequirement", custIDParameter, programIDParameter, requirementTypeParameter, requirementNameParameter, requirementDescriptionParameter, documentIDParameter, adminIDParameter, returnRequirementID, returnMessage);
        }
    
        public virtual int LB_UpdateVendorRequirement(Nullable<int> custID, Nullable<int> programID, Nullable<int> requirementID, string requirementName, string requirementDescription, Nullable<int> adminID, ObjectParameter returnRequirementID, ObjectParameter returnMessage)
        {
            var custIDParameter = custID.HasValue ?
                new ObjectParameter("CustID", custID) :
                new ObjectParameter("CustID", typeof(int));
    
            var programIDParameter = programID.HasValue ?
                new ObjectParameter("ProgramID", programID) :
                new ObjectParameter("ProgramID", typeof(int));
    
            var requirementIDParameter = requirementID.HasValue ?
                new ObjectParameter("RequirementID", requirementID) :
                new ObjectParameter("RequirementID", typeof(int));
    
            var requirementNameParameter = requirementName != null ?
                new ObjectParameter("RequirementName", requirementName) :
                new ObjectParameter("RequirementName", typeof(string));
    
            var requirementDescriptionParameter = requirementDescription != null ?
                new ObjectParameter("RequirementDescription", requirementDescription) :
                new ObjectParameter("RequirementDescription", typeof(string));
    
            var adminIDParameter = adminID.HasValue ?
                new ObjectParameter("AdminID", adminID) :
                new ObjectParameter("AdminID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("LB_UpdateVendorRequirement", custIDParameter, programIDParameter, requirementIDParameter, requirementNameParameter, requirementDescriptionParameter, adminIDParameter, returnRequirementID, returnMessage);
        }
    
        public virtual int LB_UpdateVendor(Nullable<int> custID, Nullable<int> customerType, string company, string displayName, string address1, string address2, string city, string state, string postalCode, string companyPhone, string fax, Nullable<int> flag1, string nameTitle, string firstName, string lastName, string email, string dayPhone, string mobile, Nullable<int> flag2, string siteName, Nullable<int> hideFlag, ObjectParameter returnCustID, ObjectParameter returnMessage)
        {
            var custIDParameter = custID.HasValue ?
                new ObjectParameter("CustID", custID) :
                new ObjectParameter("CustID", typeof(int));
    
            var customerTypeParameter = customerType.HasValue ?
                new ObjectParameter("CustomerType", customerType) :
                new ObjectParameter("CustomerType", typeof(int));
    
            var companyParameter = company != null ?
                new ObjectParameter("Company", company) :
                new ObjectParameter("Company", typeof(string));
    
            var displayNameParameter = displayName != null ?
                new ObjectParameter("DisplayName", displayName) :
                new ObjectParameter("DisplayName", typeof(string));
    
            var address1Parameter = address1 != null ?
                new ObjectParameter("Address1", address1) :
                new ObjectParameter("Address1", typeof(string));
    
            var address2Parameter = address2 != null ?
                new ObjectParameter("Address2", address2) :
                new ObjectParameter("Address2", typeof(string));
    
            var cityParameter = city != null ?
                new ObjectParameter("City", city) :
                new ObjectParameter("City", typeof(string));
    
            var stateParameter = state != null ?
                new ObjectParameter("State", state) :
                new ObjectParameter("State", typeof(string));
    
            var postalCodeParameter = postalCode != null ?
                new ObjectParameter("PostalCode", postalCode) :
                new ObjectParameter("PostalCode", typeof(string));
    
            var companyPhoneParameter = companyPhone != null ?
                new ObjectParameter("CompanyPhone", companyPhone) :
                new ObjectParameter("CompanyPhone", typeof(string));
    
            var faxParameter = fax != null ?
                new ObjectParameter("Fax", fax) :
                new ObjectParameter("Fax", typeof(string));
    
            var flag1Parameter = flag1.HasValue ?
                new ObjectParameter("Flag1", flag1) :
                new ObjectParameter("Flag1", typeof(int));
    
            var nameTitleParameter = nameTitle != null ?
                new ObjectParameter("NameTitle", nameTitle) :
                new ObjectParameter("NameTitle", typeof(string));
    
            var firstNameParameter = firstName != null ?
                new ObjectParameter("FirstName", firstName) :
                new ObjectParameter("FirstName", typeof(string));
    
            var lastNameParameter = lastName != null ?
                new ObjectParameter("LastName", lastName) :
                new ObjectParameter("LastName", typeof(string));
    
            var emailParameter = email != null ?
                new ObjectParameter("Email", email) :
                new ObjectParameter("Email", typeof(string));
    
            var dayPhoneParameter = dayPhone != null ?
                new ObjectParameter("DayPhone", dayPhone) :
                new ObjectParameter("DayPhone", typeof(string));
    
            var mobileParameter = mobile != null ?
                new ObjectParameter("Mobile", mobile) :
                new ObjectParameter("Mobile", typeof(string));
    
            var flag2Parameter = flag2.HasValue ?
                new ObjectParameter("Flag2", flag2) :
                new ObjectParameter("Flag2", typeof(int));
    
            var siteNameParameter = siteName != null ?
                new ObjectParameter("SiteName", siteName) :
                new ObjectParameter("SiteName", typeof(string));
    
            var hideFlagParameter = hideFlag.HasValue ?
                new ObjectParameter("HideFlag", hideFlag) :
                new ObjectParameter("HideFlag", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("LB_UpdateVendor", custIDParameter, customerTypeParameter, companyParameter, displayNameParameter, address1Parameter, address2Parameter, cityParameter, stateParameter, postalCodeParameter, companyPhoneParameter, faxParameter, flag1Parameter, nameTitleParameter, firstNameParameter, lastNameParameter, emailParameter, dayPhoneParameter, mobileParameter, flag2Parameter, siteNameParameter, hideFlagParameter, returnCustID, returnMessage);
        }
    
        public virtual int LB_DeleteEventHeader(Nullable<int> eventID, Nullable<int> adminID, ObjectParameter returnID, ObjectParameter returnMessage)
        {
            var eventIDParameter = eventID.HasValue ?
                new ObjectParameter("EventID", eventID) :
                new ObjectParameter("EventID", typeof(int));
    
            var adminIDParameter = adminID.HasValue ?
                new ObjectParameter("AdminID", adminID) :
                new ObjectParameter("AdminID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("LB_DeleteEventHeader", eventIDParameter, adminIDParameter, returnID, returnMessage);
        }
    
        public virtual ObjectResult<LB_GetEventHeader_Result> LB_GetEventHeader(Nullable<int> eventID, Nullable<int> categoryID, Nullable<int> custID, string sponsorName, string eventTitle, Nullable<System.DateTime> startDate, Nullable<System.DateTime> endDate, string locationTitle, string city, string state, string status, Nullable<int> statusID, Nullable<int> rowCount)
        {
            var eventIDParameter = eventID.HasValue ?
                new ObjectParameter("EventID", eventID) :
                new ObjectParameter("EventID", typeof(int));
    
            var categoryIDParameter = categoryID.HasValue ?
                new ObjectParameter("CategoryID", categoryID) :
                new ObjectParameter("CategoryID", typeof(int));
    
            var custIDParameter = custID.HasValue ?
                new ObjectParameter("CustID", custID) :
                new ObjectParameter("CustID", typeof(int));
    
            var sponsorNameParameter = sponsorName != null ?
                new ObjectParameter("SponsorName", sponsorName) :
                new ObjectParameter("SponsorName", typeof(string));
    
            var eventTitleParameter = eventTitle != null ?
                new ObjectParameter("EventTitle", eventTitle) :
                new ObjectParameter("EventTitle", typeof(string));
    
            var startDateParameter = startDate.HasValue ?
                new ObjectParameter("StartDate", startDate) :
                new ObjectParameter("StartDate", typeof(System.DateTime));
    
            var endDateParameter = endDate.HasValue ?
                new ObjectParameter("EndDate", endDate) :
                new ObjectParameter("EndDate", typeof(System.DateTime));
    
            var locationTitleParameter = locationTitle != null ?
                new ObjectParameter("LocationTitle", locationTitle) :
                new ObjectParameter("LocationTitle", typeof(string));
    
            var cityParameter = city != null ?
                new ObjectParameter("City", city) :
                new ObjectParameter("City", typeof(string));
    
            var stateParameter = state != null ?
                new ObjectParameter("State", state) :
                new ObjectParameter("State", typeof(string));
    
            var statusParameter = status != null ?
                new ObjectParameter("Status", status) :
                new ObjectParameter("Status", typeof(string));
    
            var statusIDParameter = statusID.HasValue ?
                new ObjectParameter("StatusID", statusID) :
                new ObjectParameter("StatusID", typeof(int));
    
            var rowCountParameter = rowCount.HasValue ?
                new ObjectParameter("RowCount", rowCount) :
                new ObjectParameter("RowCount", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<LB_GetEventHeader_Result>("LB_GetEventHeader", eventIDParameter, categoryIDParameter, custIDParameter, sponsorNameParameter, eventTitleParameter, startDateParameter, endDateParameter, locationTitleParameter, cityParameter, stateParameter, statusParameter, statusIDParameter, rowCountParameter);
        }
    
        public virtual int LB_InsertEventHeader(Nullable<int> categoryID, Nullable<int> custID, string sponsorName, string eventTitle, string eventDescription, Nullable<System.DateTime> eventStartDate, Nullable<System.DateTime> eventEndDate, string eventDateTimeString, Nullable<int> capacity, string locationTitle, string address1, string address2, string city, string state, string postalCode, string status, Nullable<int> adminID, ObjectParameter returnID, ObjectParameter returnMessage)
        {
            var categoryIDParameter = categoryID.HasValue ?
                new ObjectParameter("CategoryID", categoryID) :
                new ObjectParameter("CategoryID", typeof(int));
    
            var custIDParameter = custID.HasValue ?
                new ObjectParameter("CustID", custID) :
                new ObjectParameter("CustID", typeof(int));
    
            var sponsorNameParameter = sponsorName != null ?
                new ObjectParameter("SponsorName", sponsorName) :
                new ObjectParameter("SponsorName", typeof(string));
    
            var eventTitleParameter = eventTitle != null ?
                new ObjectParameter("EventTitle", eventTitle) :
                new ObjectParameter("EventTitle", typeof(string));
    
            var eventDescriptionParameter = eventDescription != null ?
                new ObjectParameter("EventDescription", eventDescription) :
                new ObjectParameter("EventDescription", typeof(string));
    
            var eventStartDateParameter = eventStartDate.HasValue ?
                new ObjectParameter("EventStartDate", eventStartDate) :
                new ObjectParameter("EventStartDate", typeof(System.DateTime));
    
            var eventEndDateParameter = eventEndDate.HasValue ?
                new ObjectParameter("EventEndDate", eventEndDate) :
                new ObjectParameter("EventEndDate", typeof(System.DateTime));
    
            var eventDateTimeStringParameter = eventDateTimeString != null ?
                new ObjectParameter("EventDateTimeString", eventDateTimeString) :
                new ObjectParameter("EventDateTimeString", typeof(string));
    
            var capacityParameter = capacity.HasValue ?
                new ObjectParameter("Capacity", capacity) :
                new ObjectParameter("Capacity", typeof(int));
    
            var locationTitleParameter = locationTitle != null ?
                new ObjectParameter("LocationTitle", locationTitle) :
                new ObjectParameter("LocationTitle", typeof(string));
    
            var address1Parameter = address1 != null ?
                new ObjectParameter("Address1", address1) :
                new ObjectParameter("Address1", typeof(string));
    
            var address2Parameter = address2 != null ?
                new ObjectParameter("Address2", address2) :
                new ObjectParameter("Address2", typeof(string));
    
            var cityParameter = city != null ?
                new ObjectParameter("City", city) :
                new ObjectParameter("City", typeof(string));
    
            var stateParameter = state != null ?
                new ObjectParameter("State", state) :
                new ObjectParameter("State", typeof(string));
    
            var postalCodeParameter = postalCode != null ?
                new ObjectParameter("PostalCode", postalCode) :
                new ObjectParameter("PostalCode", typeof(string));
    
            var statusParameter = status != null ?
                new ObjectParameter("Status", status) :
                new ObjectParameter("Status", typeof(string));
    
            var adminIDParameter = adminID.HasValue ?
                new ObjectParameter("AdminID", adminID) :
                new ObjectParameter("AdminID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("LB_InsertEventHeader", categoryIDParameter, custIDParameter, sponsorNameParameter, eventTitleParameter, eventDescriptionParameter, eventStartDateParameter, eventEndDateParameter, eventDateTimeStringParameter, capacityParameter, locationTitleParameter, address1Parameter, address2Parameter, cityParameter, stateParameter, postalCodeParameter, statusParameter, adminIDParameter, returnID, returnMessage);
        }
    
        public virtual int LB_UpdateEventHeader(Nullable<int> eventID, Nullable<int> custID, string sponsorName, string eventDateTimeString, string eventTitle, string eventDescription, Nullable<System.DateTime> eventStartDate, Nullable<System.DateTime> eventEndDate, string locationTitle, string address1, string address2, string city, string state, string postalCode, Nullable<int> capacity, string status, Nullable<int> statusID, Nullable<int> adminID, ObjectParameter returnID, ObjectParameter returnMessage)
        {
            var eventIDParameter = eventID.HasValue ?
                new ObjectParameter("EventID", eventID) :
                new ObjectParameter("EventID", typeof(int));
    
            var custIDParameter = custID.HasValue ?
                new ObjectParameter("CustID", custID) :
                new ObjectParameter("CustID", typeof(int));
    
            var sponsorNameParameter = sponsorName != null ?
                new ObjectParameter("SponsorName", sponsorName) :
                new ObjectParameter("SponsorName", typeof(string));
    
            var eventDateTimeStringParameter = eventDateTimeString != null ?
                new ObjectParameter("EventDateTimeString", eventDateTimeString) :
                new ObjectParameter("EventDateTimeString", typeof(string));
    
            var eventTitleParameter = eventTitle != null ?
                new ObjectParameter("EventTitle", eventTitle) :
                new ObjectParameter("EventTitle", typeof(string));
    
            var eventDescriptionParameter = eventDescription != null ?
                new ObjectParameter("EventDescription", eventDescription) :
                new ObjectParameter("EventDescription", typeof(string));
    
            var eventStartDateParameter = eventStartDate.HasValue ?
                new ObjectParameter("EventStartDate", eventStartDate) :
                new ObjectParameter("EventStartDate", typeof(System.DateTime));
    
            var eventEndDateParameter = eventEndDate.HasValue ?
                new ObjectParameter("EventEndDate", eventEndDate) :
                new ObjectParameter("EventEndDate", typeof(System.DateTime));
    
            var locationTitleParameter = locationTitle != null ?
                new ObjectParameter("LocationTitle", locationTitle) :
                new ObjectParameter("LocationTitle", typeof(string));
    
            var address1Parameter = address1 != null ?
                new ObjectParameter("Address1", address1) :
                new ObjectParameter("Address1", typeof(string));
    
            var address2Parameter = address2 != null ?
                new ObjectParameter("Address2", address2) :
                new ObjectParameter("Address2", typeof(string));
    
            var cityParameter = city != null ?
                new ObjectParameter("City", city) :
                new ObjectParameter("City", typeof(string));
    
            var stateParameter = state != null ?
                new ObjectParameter("State", state) :
                new ObjectParameter("State", typeof(string));
    
            var postalCodeParameter = postalCode != null ?
                new ObjectParameter("PostalCode", postalCode) :
                new ObjectParameter("PostalCode", typeof(string));
    
            var capacityParameter = capacity.HasValue ?
                new ObjectParameter("Capacity", capacity) :
                new ObjectParameter("Capacity", typeof(int));
    
            var statusParameter = status != null ?
                new ObjectParameter("Status", status) :
                new ObjectParameter("Status", typeof(string));
    
            var statusIDParameter = statusID.HasValue ?
                new ObjectParameter("StatusID", statusID) :
                new ObjectParameter("StatusID", typeof(int));
    
            var adminIDParameter = adminID.HasValue ?
                new ObjectParameter("AdminID", adminID) :
                new ObjectParameter("AdminID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("LB_UpdateEventHeader", eventIDParameter, custIDParameter, sponsorNameParameter, eventDateTimeStringParameter, eventTitleParameter, eventDescriptionParameter, eventStartDateParameter, eventEndDateParameter, locationTitleParameter, address1Parameter, address2Parameter, cityParameter, stateParameter, postalCodeParameter, capacityParameter, statusParameter, statusIDParameter, adminIDParameter, returnID, returnMessage);
        }
    
        public virtual int LB_InsertMemberVendorParse(Nullable<int> custID, string vendorString, Nullable<int> programID)
        {
            var custIDParameter = custID.HasValue ?
                new ObjectParameter("CustID", custID) :
                new ObjectParameter("CustID", typeof(int));
    
            var vendorStringParameter = vendorString != null ?
                new ObjectParameter("VendorString", vendorString) :
                new ObjectParameter("VendorString", typeof(string));
    
            var programIDParameter = programID.HasValue ?
                new ObjectParameter("ProgramID", programID) :
                new ObjectParameter("ProgramID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("LB_InsertMemberVendorParse", custIDParameter, vendorStringParameter, programIDParameter);
        }
    
        public virtual int LB_InsertPaymentMethodCIM(Nullable<int> custID, string cardHolderName, string cardType, string cardNumberFirstSix, string cardNumberLastFour, string cardExpMonth, string cardExpYear, string paymentProfileID, string customerProfileID)
        {
            var custIDParameter = custID.HasValue ?
                new ObjectParameter("CustID", custID) :
                new ObjectParameter("CustID", typeof(int));
    
            var cardHolderNameParameter = cardHolderName != null ?
                new ObjectParameter("CardHolderName", cardHolderName) :
                new ObjectParameter("CardHolderName", typeof(string));
    
            var cardTypeParameter = cardType != null ?
                new ObjectParameter("CardType", cardType) :
                new ObjectParameter("CardType", typeof(string));
    
            var cardNumberFirstSixParameter = cardNumberFirstSix != null ?
                new ObjectParameter("CardNumberFirstSix", cardNumberFirstSix) :
                new ObjectParameter("CardNumberFirstSix", typeof(string));
    
            var cardNumberLastFourParameter = cardNumberLastFour != null ?
                new ObjectParameter("CardNumberLastFour", cardNumberLastFour) :
                new ObjectParameter("CardNumberLastFour", typeof(string));
    
            var cardExpMonthParameter = cardExpMonth != null ?
                new ObjectParameter("CardExpMonth", cardExpMonth) :
                new ObjectParameter("CardExpMonth", typeof(string));
    
            var cardExpYearParameter = cardExpYear != null ?
                new ObjectParameter("CardExpYear", cardExpYear) :
                new ObjectParameter("CardExpYear", typeof(string));
    
            var paymentProfileIDParameter = paymentProfileID != null ?
                new ObjectParameter("PaymentProfileID", paymentProfileID) :
                new ObjectParameter("PaymentProfileID", typeof(string));
    
            var customerProfileIDParameter = customerProfileID != null ?
                new ObjectParameter("CustomerProfileID", customerProfileID) :
                new ObjectParameter("CustomerProfileID", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("LB_InsertPaymentMethodCIM", custIDParameter, cardHolderNameParameter, cardTypeParameter, cardNumberFirstSixParameter, cardNumberLastFourParameter, cardExpMonthParameter, cardExpYearParameter, paymentProfileIDParameter, customerProfileIDParameter);
        }
    
        public virtual int LB_UpdateAutoShipHeader(Nullable<int> autoShipID, string status, Nullable<System.DateTime> nextDate, Nullable<int> adminID, ObjectParameter returnID, ObjectParameter returnMessage)
        {
            var autoShipIDParameter = autoShipID.HasValue ?
                new ObjectParameter("AutoShipID", autoShipID) :
                new ObjectParameter("AutoShipID", typeof(int));
    
            var statusParameter = status != null ?
                new ObjectParameter("Status", status) :
                new ObjectParameter("Status", typeof(string));
    
            var nextDateParameter = nextDate.HasValue ?
                new ObjectParameter("NextDate", nextDate) :
                new ObjectParameter("NextDate", typeof(System.DateTime));
    
            var adminIDParameter = adminID.HasValue ?
                new ObjectParameter("AdminID", adminID) :
                new ObjectParameter("AdminID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("LB_UpdateAutoShipHeader", autoShipIDParameter, statusParameter, nextDateParameter, adminIDParameter, returnID, returnMessage);
        }
    
        public virtual ObjectResult<LB_GetAutoShipHeaderByCustID_Result> LB_GetAutoShipHeaderByCustID(Nullable<int> custID, Nullable<int> statusID)
        {
            var custIDParameter = custID.HasValue ?
                new ObjectParameter("CustID", custID) :
                new ObjectParameter("CustID", typeof(int));
    
            var statusIDParameter = statusID.HasValue ?
                new ObjectParameter("StatusID", statusID) :
                new ObjectParameter("StatusID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<LB_GetAutoShipHeaderByCustID_Result>("LB_GetAutoShipHeaderByCustID", custIDParameter, statusIDParameter);
        }
    
        public virtual int LB_GenerateOrdersFromTmp_GenerateAutoShipHeader(ObjectParameter returnID, ObjectParameter returnMessage)
        {
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("LB_GenerateOrdersFromTmp_GenerateAutoShipHeader", returnID, returnMessage);
        }
    
        public virtual ObjectResult<LB_GetTmp_GenerateAutoShipHeader_Result> LB_GetTmp_GenerateAutoShipHeader()
        {
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<LB_GetTmp_GenerateAutoShipHeader_Result>("LB_GetTmp_GenerateAutoShipHeader");
        }
    
        public virtual int LB_InsertTmp_GenerateAutoShipHeader(Nullable<System.DateTime> sD, Nullable<System.DateTime> eD, Nullable<int> custID, string status, Nullable<int> adminID, ObjectParameter returnID, ObjectParameter returnMessage)
        {
            var sDParameter = sD.HasValue ?
                new ObjectParameter("SD", sD) :
                new ObjectParameter("SD", typeof(System.DateTime));
    
            var eDParameter = eD.HasValue ?
                new ObjectParameter("ED", eD) :
                new ObjectParameter("ED", typeof(System.DateTime));
    
            var custIDParameter = custID.HasValue ?
                new ObjectParameter("CustID", custID) :
                new ObjectParameter("CustID", typeof(int));
    
            var statusParameter = status != null ?
                new ObjectParameter("Status", status) :
                new ObjectParameter("Status", typeof(string));
    
            var adminIDParameter = adminID.HasValue ?
                new ObjectParameter("AdminID", adminID) :
                new ObjectParameter("AdminID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("LB_InsertTmp_GenerateAutoShipHeader", sDParameter, eDParameter, custIDParameter, statusParameter, adminIDParameter, returnID, returnMessage);
        }
    
        public virtual int LB_TruncateTmp_GenerateAutoShipHeader()
        {
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("LB_TruncateTmp_GenerateAutoShipHeader");
        }
    
        public virtual int LB_InsertMemberVendor(Nullable<int> custID, Nullable<int> vendorID, string participation, Nullable<int> itemID)
        {
            var custIDParameter = custID.HasValue ?
                new ObjectParameter("CustID", custID) :
                new ObjectParameter("CustID", typeof(int));
    
            var vendorIDParameter = vendorID.HasValue ?
                new ObjectParameter("VendorID", vendorID) :
                new ObjectParameter("VendorID", typeof(int));
    
            var participationParameter = participation != null ?
                new ObjectParameter("Participation", participation) :
                new ObjectParameter("Participation", typeof(string));
    
            var itemIDParameter = itemID.HasValue ?
                new ObjectParameter("ItemID", itemID) :
                new ObjectParameter("ItemID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("LB_InsertMemberVendor", custIDParameter, vendorIDParameter, participationParameter, itemIDParameter);
        }
    
        public virtual int LB_UpdateC_InfoStatusID(Nullable<int> custID, Nullable<int> statusID, string status, Nullable<int> adminID, ObjectParameter returnID, ObjectParameter returnMessage)
        {
            var custIDParameter = custID.HasValue ?
                new ObjectParameter("CustID", custID) :
                new ObjectParameter("CustID", typeof(int));
    
            var statusIDParameter = statusID.HasValue ?
                new ObjectParameter("StatusID", statusID) :
                new ObjectParameter("StatusID", typeof(int));
    
            var statusParameter = status != null ?
                new ObjectParameter("Status", status) :
                new ObjectParameter("Status", typeof(string));
    
            var adminIDParameter = adminID.HasValue ?
                new ObjectParameter("AdminID", adminID) :
                new ObjectParameter("AdminID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("LB_UpdateC_InfoStatusID", custIDParameter, statusIDParameter, statusParameter, adminIDParameter, returnID, returnMessage);
        }
    
        public virtual int LB_InsertMemberContact(Nullable<int> customerType, string nameTitle, string firstName, string lastName, string email, string address1, string address2, string city, string state, string postalCode, string companyPhone, string mobile, string fax, Nullable<int> sponsorID, string contactType, string variantData2, string variantData3, ObjectParameter returnCustID, ObjectParameter returnMessage)
        {
            var customerTypeParameter = customerType.HasValue ?
                new ObjectParameter("CustomerType", customerType) :
                new ObjectParameter("CustomerType", typeof(int));
    
            var nameTitleParameter = nameTitle != null ?
                new ObjectParameter("NameTitle", nameTitle) :
                new ObjectParameter("NameTitle", typeof(string));
    
            var firstNameParameter = firstName != null ?
                new ObjectParameter("FirstName", firstName) :
                new ObjectParameter("FirstName", typeof(string));
    
            var lastNameParameter = lastName != null ?
                new ObjectParameter("LastName", lastName) :
                new ObjectParameter("LastName", typeof(string));
    
            var emailParameter = email != null ?
                new ObjectParameter("Email", email) :
                new ObjectParameter("Email", typeof(string));
    
            var address1Parameter = address1 != null ?
                new ObjectParameter("Address1", address1) :
                new ObjectParameter("Address1", typeof(string));
    
            var address2Parameter = address2 != null ?
                new ObjectParameter("Address2", address2) :
                new ObjectParameter("Address2", typeof(string));
    
            var cityParameter = city != null ?
                new ObjectParameter("City", city) :
                new ObjectParameter("City", typeof(string));
    
            var stateParameter = state != null ?
                new ObjectParameter("State", state) :
                new ObjectParameter("State", typeof(string));
    
            var postalCodeParameter = postalCode != null ?
                new ObjectParameter("PostalCode", postalCode) :
                new ObjectParameter("PostalCode", typeof(string));
    
            var companyPhoneParameter = companyPhone != null ?
                new ObjectParameter("CompanyPhone", companyPhone) :
                new ObjectParameter("CompanyPhone", typeof(string));
    
            var mobileParameter = mobile != null ?
                new ObjectParameter("Mobile", mobile) :
                new ObjectParameter("Mobile", typeof(string));
    
            var faxParameter = fax != null ?
                new ObjectParameter("Fax", fax) :
                new ObjectParameter("Fax", typeof(string));
    
            var sponsorIDParameter = sponsorID.HasValue ?
                new ObjectParameter("SponsorID", sponsorID) :
                new ObjectParameter("SponsorID", typeof(int));
    
            var contactTypeParameter = contactType != null ?
                new ObjectParameter("ContactType", contactType) :
                new ObjectParameter("ContactType", typeof(string));
    
            var variantData2Parameter = variantData2 != null ?
                new ObjectParameter("VariantData2", variantData2) :
                new ObjectParameter("VariantData2", typeof(string));
    
            var variantData3Parameter = variantData3 != null ?
                new ObjectParameter("VariantData3", variantData3) :
                new ObjectParameter("VariantData3", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("LB_InsertMemberContact", customerTypeParameter, nameTitleParameter, firstNameParameter, lastNameParameter, emailParameter, address1Parameter, address2Parameter, cityParameter, stateParameter, postalCodeParameter, companyPhoneParameter, mobileParameter, faxParameter, sponsorIDParameter, contactTypeParameter, variantData2Parameter, variantData3Parameter, returnCustID, returnMessage);
        }
    
        public virtual int LB_UpdateMember(Nullable<int> customerType, Nullable<int> custID, string taxID, string company, string displayName, string nameTitle, string firstName, string lastName, string address1, string address2, string city, string state, string postalCode, string dayPhone, string mobile, string fax, string email, ObjectParameter returnCustID, ObjectParameter returnMessage)
        {
            var customerTypeParameter = customerType.HasValue ?
                new ObjectParameter("CustomerType", customerType) :
                new ObjectParameter("CustomerType", typeof(int));
    
            var custIDParameter = custID.HasValue ?
                new ObjectParameter("CustID", custID) :
                new ObjectParameter("CustID", typeof(int));
    
            var taxIDParameter = taxID != null ?
                new ObjectParameter("TaxID", taxID) :
                new ObjectParameter("TaxID", typeof(string));
    
            var companyParameter = company != null ?
                new ObjectParameter("Company", company) :
                new ObjectParameter("Company", typeof(string));
    
            var displayNameParameter = displayName != null ?
                new ObjectParameter("DisplayName", displayName) :
                new ObjectParameter("DisplayName", typeof(string));
    
            var nameTitleParameter = nameTitle != null ?
                new ObjectParameter("NameTitle", nameTitle) :
                new ObjectParameter("NameTitle", typeof(string));
    
            var firstNameParameter = firstName != null ?
                new ObjectParameter("FirstName", firstName) :
                new ObjectParameter("FirstName", typeof(string));
    
            var lastNameParameter = lastName != null ?
                new ObjectParameter("LastName", lastName) :
                new ObjectParameter("LastName", typeof(string));
    
            var address1Parameter = address1 != null ?
                new ObjectParameter("Address1", address1) :
                new ObjectParameter("Address1", typeof(string));
    
            var address2Parameter = address2 != null ?
                new ObjectParameter("Address2", address2) :
                new ObjectParameter("Address2", typeof(string));
    
            var cityParameter = city != null ?
                new ObjectParameter("City", city) :
                new ObjectParameter("City", typeof(string));
    
            var stateParameter = state != null ?
                new ObjectParameter("State", state) :
                new ObjectParameter("State", typeof(string));
    
            var postalCodeParameter = postalCode != null ?
                new ObjectParameter("PostalCode", postalCode) :
                new ObjectParameter("PostalCode", typeof(string));
    
            var dayPhoneParameter = dayPhone != null ?
                new ObjectParameter("DayPhone", dayPhone) :
                new ObjectParameter("DayPhone", typeof(string));
    
            var mobileParameter = mobile != null ?
                new ObjectParameter("Mobile", mobile) :
                new ObjectParameter("Mobile", typeof(string));
    
            var faxParameter = fax != null ?
                new ObjectParameter("Fax", fax) :
                new ObjectParameter("Fax", typeof(string));
    
            var emailParameter = email != null ?
                new ObjectParameter("Email", email) :
                new ObjectParameter("Email", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("LB_UpdateMember", customerTypeParameter, custIDParameter, taxIDParameter, companyParameter, displayNameParameter, nameTitleParameter, firstNameParameter, lastNameParameter, address1Parameter, address2Parameter, cityParameter, stateParameter, postalCodeParameter, dayPhoneParameter, mobileParameter, faxParameter, emailParameter, returnCustID, returnMessage);
        }
    
        public virtual int LB_UpdateMemberContact(Nullable<int> customerType, Nullable<int> custID, string taxID, string company, string displayName, string nameTitle, string firstName, string lastName, string address1, string address2, string city, string state, string postalCode, string dayPhone, string mobile, string fax, string email, string variantData1, string variantData2, string variantData3, ObjectParameter returnCustID, ObjectParameter returnMessage)
        {
            var customerTypeParameter = customerType.HasValue ?
                new ObjectParameter("CustomerType", customerType) :
                new ObjectParameter("CustomerType", typeof(int));
    
            var custIDParameter = custID.HasValue ?
                new ObjectParameter("CustID", custID) :
                new ObjectParameter("CustID", typeof(int));
    
            var taxIDParameter = taxID != null ?
                new ObjectParameter("TaxID", taxID) :
                new ObjectParameter("TaxID", typeof(string));
    
            var companyParameter = company != null ?
                new ObjectParameter("Company", company) :
                new ObjectParameter("Company", typeof(string));
    
            var displayNameParameter = displayName != null ?
                new ObjectParameter("DisplayName", displayName) :
                new ObjectParameter("DisplayName", typeof(string));
    
            var nameTitleParameter = nameTitle != null ?
                new ObjectParameter("NameTitle", nameTitle) :
                new ObjectParameter("NameTitle", typeof(string));
    
            var firstNameParameter = firstName != null ?
                new ObjectParameter("FirstName", firstName) :
                new ObjectParameter("FirstName", typeof(string));
    
            var lastNameParameter = lastName != null ?
                new ObjectParameter("LastName", lastName) :
                new ObjectParameter("LastName", typeof(string));
    
            var address1Parameter = address1 != null ?
                new ObjectParameter("Address1", address1) :
                new ObjectParameter("Address1", typeof(string));
    
            var address2Parameter = address2 != null ?
                new ObjectParameter("Address2", address2) :
                new ObjectParameter("Address2", typeof(string));
    
            var cityParameter = city != null ?
                new ObjectParameter("City", city) :
                new ObjectParameter("City", typeof(string));
    
            var stateParameter = state != null ?
                new ObjectParameter("State", state) :
                new ObjectParameter("State", typeof(string));
    
            var postalCodeParameter = postalCode != null ?
                new ObjectParameter("PostalCode", postalCode) :
                new ObjectParameter("PostalCode", typeof(string));
    
            var dayPhoneParameter = dayPhone != null ?
                new ObjectParameter("DayPhone", dayPhone) :
                new ObjectParameter("DayPhone", typeof(string));
    
            var mobileParameter = mobile != null ?
                new ObjectParameter("Mobile", mobile) :
                new ObjectParameter("Mobile", typeof(string));
    
            var faxParameter = fax != null ?
                new ObjectParameter("Fax", fax) :
                new ObjectParameter("Fax", typeof(string));
    
            var emailParameter = email != null ?
                new ObjectParameter("Email", email) :
                new ObjectParameter("Email", typeof(string));
    
            var variantData1Parameter = variantData1 != null ?
                new ObjectParameter("VariantData1", variantData1) :
                new ObjectParameter("VariantData1", typeof(string));
    
            var variantData2Parameter = variantData2 != null ?
                new ObjectParameter("VariantData2", variantData2) :
                new ObjectParameter("VariantData2", typeof(string));
    
            var variantData3Parameter = variantData3 != null ?
                new ObjectParameter("VariantData3", variantData3) :
                new ObjectParameter("VariantData3", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("LB_UpdateMemberContact", customerTypeParameter, custIDParameter, taxIDParameter, companyParameter, displayNameParameter, nameTitleParameter, firstNameParameter, lastNameParameter, address1Parameter, address2Parameter, cityParameter, stateParameter, postalCodeParameter, dayPhoneParameter, mobileParameter, faxParameter, emailParameter, variantData1Parameter, variantData2Parameter, variantData3Parameter, returnCustID, returnMessage);
        }
    
        public virtual ObjectResult<LB_ProcessRebatesStageOne_Result> LB_ProcessRebatesStageOne(Nullable<int> periodID, Nullable<int> adminID, Nullable<int> rebateVolumeType, Nullable<int> memberRebateCommissionID, Nullable<int> corporateRebateCommissionID, Nullable<int> periodTypeID)
        {
            var periodIDParameter = periodID.HasValue ?
                new ObjectParameter("PeriodID", periodID) :
                new ObjectParameter("PeriodID", typeof(int));
    
            var adminIDParameter = adminID.HasValue ?
                new ObjectParameter("AdminID", adminID) :
                new ObjectParameter("AdminID", typeof(int));
    
            var rebateVolumeTypeParameter = rebateVolumeType.HasValue ?
                new ObjectParameter("RebateVolumeType", rebateVolumeType) :
                new ObjectParameter("RebateVolumeType", typeof(int));
    
            var memberRebateCommissionIDParameter = memberRebateCommissionID.HasValue ?
                new ObjectParameter("MemberRebateCommissionID", memberRebateCommissionID) :
                new ObjectParameter("MemberRebateCommissionID", typeof(int));
    
            var corporateRebateCommissionIDParameter = corporateRebateCommissionID.HasValue ?
                new ObjectParameter("CorporateRebateCommissionID", corporateRebateCommissionID) :
                new ObjectParameter("CorporateRebateCommissionID", typeof(int));
    
            var periodTypeIDParameter = periodTypeID.HasValue ?
                new ObjectParameter("PeriodTypeID", periodTypeID) :
                new ObjectParameter("PeriodTypeID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<LB_ProcessRebatesStageOne_Result>("LB_ProcessRebatesStageOne", periodIDParameter, adminIDParameter, rebateVolumeTypeParameter, memberRebateCommissionIDParameter, corporateRebateCommissionIDParameter, periodTypeIDParameter);
        }
    
        public virtual ObjectResult<LB_ProcessCommissionsStageOneIMDCommissions_Result> LB_ProcessCommissionsStageOneIMDCommissions(Nullable<int> periodID, Nullable<int> adminID, Nullable<int> memberEnrollmentCommissionID, Nullable<int> memberSixMonthCommissionID, Nullable<int> periodTypeID)
        {
            var periodIDParameter = periodID.HasValue ?
                new ObjectParameter("PeriodID", periodID) :
                new ObjectParameter("PeriodID", typeof(int));
    
            var adminIDParameter = adminID.HasValue ?
                new ObjectParameter("AdminID", adminID) :
                new ObjectParameter("AdminID", typeof(int));
    
            var memberEnrollmentCommissionIDParameter = memberEnrollmentCommissionID.HasValue ?
                new ObjectParameter("MemberEnrollmentCommissionID", memberEnrollmentCommissionID) :
                new ObjectParameter("MemberEnrollmentCommissionID", typeof(int));
    
            var memberSixMonthCommissionIDParameter = memberSixMonthCommissionID.HasValue ?
                new ObjectParameter("MemberSixMonthCommissionID", memberSixMonthCommissionID) :
                new ObjectParameter("MemberSixMonthCommissionID", typeof(int));
    
            var periodTypeIDParameter = periodTypeID.HasValue ?
                new ObjectParameter("PeriodTypeID", periodTypeID) :
                new ObjectParameter("PeriodTypeID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<LB_ProcessCommissionsStageOneIMDCommissions_Result>("LB_ProcessCommissionsStageOneIMDCommissions", periodIDParameter, adminIDParameter, memberEnrollmentCommissionIDParameter, memberSixMonthCommissionIDParameter, periodTypeIDParameter);
        }
    
        public virtual ObjectResult<LB_ProcessCommissionsStageOne_Result> LB_ProcessCommissionsStageOne(Nullable<int> periodID, Nullable<int> adminID, Nullable<int> memberEnrollmentCommissionID, Nullable<int> memberSixMonthCommissionID, Nullable<int> periodTypeID)
        {
            var periodIDParameter = periodID.HasValue ?
                new ObjectParameter("PeriodID", periodID) :
                new ObjectParameter("PeriodID", typeof(int));
    
            var adminIDParameter = adminID.HasValue ?
                new ObjectParameter("AdminID", adminID) :
                new ObjectParameter("AdminID", typeof(int));
    
            var memberEnrollmentCommissionIDParameter = memberEnrollmentCommissionID.HasValue ?
                new ObjectParameter("MemberEnrollmentCommissionID", memberEnrollmentCommissionID) :
                new ObjectParameter("MemberEnrollmentCommissionID", typeof(int));
    
            var memberSixMonthCommissionIDParameter = memberSixMonthCommissionID.HasValue ?
                new ObjectParameter("MemberSixMonthCommissionID", memberSixMonthCommissionID) :
                new ObjectParameter("MemberSixMonthCommissionID", typeof(int));
    
            var periodTypeIDParameter = periodTypeID.HasValue ?
                new ObjectParameter("PeriodTypeID", periodTypeID) :
                new ObjectParameter("PeriodTypeID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<LB_ProcessCommissionsStageOne_Result>("LB_ProcessCommissionsStageOne", periodIDParameter, adminIDParameter, memberEnrollmentCommissionIDParameter, memberSixMonthCommissionIDParameter, periodTypeIDParameter);
        }
    
        public virtual int LB_UpdateMemberEditAccount(Nullable<int> customerType, Nullable<int> custID, string taxID, string company, string displayName, string nameTitle, string firstName, string lastName, string address1, string address2, string city, string state, string postalCode, string companyPhone, string dayPhone, string mobile, string fax, string email, Nullable<System.DateTime> startDate, string activationStatus, Nullable<System.DateTime> activationStatusDate, string status, string variantData2, string variantData3, string enrollmentReason, string practiceSoftware, string practiceSize, Nullable<int> flag1, Nullable<int> sponsorID, string secID, Nullable<int> secSponsorID, Nullable<int> sourceID, string sourceCode, string accountingID, string salesForceID, Nullable<byte> emailFlag, Nullable<byte> textFlag, string siteName, ObjectParameter returnCustID, ObjectParameter returnMessage)
        {
            var customerTypeParameter = customerType.HasValue ?
                new ObjectParameter("CustomerType", customerType) :
                new ObjectParameter("CustomerType", typeof(int));
    
            var custIDParameter = custID.HasValue ?
                new ObjectParameter("CustID", custID) :
                new ObjectParameter("CustID", typeof(int));
    
            var taxIDParameter = taxID != null ?
                new ObjectParameter("TaxID", taxID) :
                new ObjectParameter("TaxID", typeof(string));
    
            var companyParameter = company != null ?
                new ObjectParameter("Company", company) :
                new ObjectParameter("Company", typeof(string));
    
            var displayNameParameter = displayName != null ?
                new ObjectParameter("DisplayName", displayName) :
                new ObjectParameter("DisplayName", typeof(string));
    
            var nameTitleParameter = nameTitle != null ?
                new ObjectParameter("NameTitle", nameTitle) :
                new ObjectParameter("NameTitle", typeof(string));
    
            var firstNameParameter = firstName != null ?
                new ObjectParameter("FirstName", firstName) :
                new ObjectParameter("FirstName", typeof(string));
    
            var lastNameParameter = lastName != null ?
                new ObjectParameter("LastName", lastName) :
                new ObjectParameter("LastName", typeof(string));
    
            var address1Parameter = address1 != null ?
                new ObjectParameter("Address1", address1) :
                new ObjectParameter("Address1", typeof(string));
    
            var address2Parameter = address2 != null ?
                new ObjectParameter("Address2", address2) :
                new ObjectParameter("Address2", typeof(string));
    
            var cityParameter = city != null ?
                new ObjectParameter("City", city) :
                new ObjectParameter("City", typeof(string));
    
            var stateParameter = state != null ?
                new ObjectParameter("State", state) :
                new ObjectParameter("State", typeof(string));
    
            var postalCodeParameter = postalCode != null ?
                new ObjectParameter("PostalCode", postalCode) :
                new ObjectParameter("PostalCode", typeof(string));
    
            var companyPhoneParameter = companyPhone != null ?
                new ObjectParameter("CompanyPhone", companyPhone) :
                new ObjectParameter("CompanyPhone", typeof(string));
    
            var dayPhoneParameter = dayPhone != null ?
                new ObjectParameter("DayPhone", dayPhone) :
                new ObjectParameter("DayPhone", typeof(string));
    
            var mobileParameter = mobile != null ?
                new ObjectParameter("Mobile", mobile) :
                new ObjectParameter("Mobile", typeof(string));
    
            var faxParameter = fax != null ?
                new ObjectParameter("Fax", fax) :
                new ObjectParameter("Fax", typeof(string));
    
            var emailParameter = email != null ?
                new ObjectParameter("Email", email) :
                new ObjectParameter("Email", typeof(string));
    
            var startDateParameter = startDate.HasValue ?
                new ObjectParameter("StartDate", startDate) :
                new ObjectParameter("StartDate", typeof(System.DateTime));
    
            var activationStatusParameter = activationStatus != null ?
                new ObjectParameter("ActivationStatus", activationStatus) :
                new ObjectParameter("ActivationStatus", typeof(string));
    
            var activationStatusDateParameter = activationStatusDate.HasValue ?
                new ObjectParameter("ActivationStatusDate", activationStatusDate) :
                new ObjectParameter("ActivationStatusDate", typeof(System.DateTime));
    
            var statusParameter = status != null ?
                new ObjectParameter("Status", status) :
                new ObjectParameter("Status", typeof(string));
    
            var variantData2Parameter = variantData2 != null ?
                new ObjectParameter("VariantData2", variantData2) :
                new ObjectParameter("VariantData2", typeof(string));
    
            var variantData3Parameter = variantData3 != null ?
                new ObjectParameter("VariantData3", variantData3) :
                new ObjectParameter("VariantData3", typeof(string));
    
            var enrollmentReasonParameter = enrollmentReason != null ?
                new ObjectParameter("EnrollmentReason", enrollmentReason) :
                new ObjectParameter("EnrollmentReason", typeof(string));
    
            var practiceSoftwareParameter = practiceSoftware != null ?
                new ObjectParameter("PracticeSoftware", practiceSoftware) :
                new ObjectParameter("PracticeSoftware", typeof(string));
    
            var practiceSizeParameter = practiceSize != null ?
                new ObjectParameter("PracticeSize", practiceSize) :
                new ObjectParameter("PracticeSize", typeof(string));
    
            var flag1Parameter = flag1.HasValue ?
                new ObjectParameter("Flag1", flag1) :
                new ObjectParameter("Flag1", typeof(int));
    
            var sponsorIDParameter = sponsorID.HasValue ?
                new ObjectParameter("SponsorID", sponsorID) :
                new ObjectParameter("SponsorID", typeof(int));
    
            var secIDParameter = secID != null ?
                new ObjectParameter("SecID", secID) :
                new ObjectParameter("SecID", typeof(string));
    
            var secSponsorIDParameter = secSponsorID.HasValue ?
                new ObjectParameter("SecSponsorID", secSponsorID) :
                new ObjectParameter("SecSponsorID", typeof(int));
    
            var sourceIDParameter = sourceID.HasValue ?
                new ObjectParameter("SourceID", sourceID) :
                new ObjectParameter("SourceID", typeof(int));
    
            var sourceCodeParameter = sourceCode != null ?
                new ObjectParameter("SourceCode", sourceCode) :
                new ObjectParameter("SourceCode", typeof(string));
    
            var accountingIDParameter = accountingID != null ?
                new ObjectParameter("AccountingID", accountingID) :
                new ObjectParameter("AccountingID", typeof(string));
    
            var salesForceIDParameter = salesForceID != null ?
                new ObjectParameter("SalesForceID", salesForceID) :
                new ObjectParameter("SalesForceID", typeof(string));
    
            var emailFlagParameter = emailFlag.HasValue ?
                new ObjectParameter("EmailFlag", emailFlag) :
                new ObjectParameter("EmailFlag", typeof(byte));
    
            var textFlagParameter = textFlag.HasValue ?
                new ObjectParameter("TextFlag", textFlag) :
                new ObjectParameter("TextFlag", typeof(byte));
    
            var siteNameParameter = siteName != null ?
                new ObjectParameter("SiteName", siteName) :
                new ObjectParameter("SiteName", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("LB_UpdateMemberEditAccount", customerTypeParameter, custIDParameter, taxIDParameter, companyParameter, displayNameParameter, nameTitleParameter, firstNameParameter, lastNameParameter, address1Parameter, address2Parameter, cityParameter, stateParameter, postalCodeParameter, companyPhoneParameter, dayPhoneParameter, mobileParameter, faxParameter, emailParameter, startDateParameter, activationStatusParameter, activationStatusDateParameter, statusParameter, variantData2Parameter, variantData3Parameter, enrollmentReasonParameter, practiceSoftwareParameter, practiceSizeParameter, flag1Parameter, sponsorIDParameter, secIDParameter, secSponsorIDParameter, sourceIDParameter, sourceCodeParameter, accountingIDParameter, salesForceIDParameter, emailFlagParameter, textFlagParameter, siteNameParameter, returnCustID, returnMessage);
        }
    
        public virtual int LB_ProcessPostManualRebates(Nullable<int> periodID, Nullable<int> adminID, Nullable<int> vendorID, Nullable<int> memberID, Nullable<decimal> amount, string comments)
        {
            var periodIDParameter = periodID.HasValue ?
                new ObjectParameter("PeriodID", periodID) :
                new ObjectParameter("PeriodID", typeof(int));
    
            var adminIDParameter = adminID.HasValue ?
                new ObjectParameter("AdminID", adminID) :
                new ObjectParameter("AdminID", typeof(int));
    
            var vendorIDParameter = vendorID.HasValue ?
                new ObjectParameter("VendorID", vendorID) :
                new ObjectParameter("VendorID", typeof(int));
    
            var memberIDParameter = memberID.HasValue ?
                new ObjectParameter("MemberID", memberID) :
                new ObjectParameter("MemberID", typeof(int));
    
            var amountParameter = amount.HasValue ?
                new ObjectParameter("Amount", amount) :
                new ObjectParameter("Amount", typeof(decimal));
    
            var commentsParameter = comments != null ?
                new ObjectParameter("Comments", comments) :
                new ObjectParameter("Comments", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("LB_ProcessPostManualRebates", periodIDParameter, adminIDParameter, vendorIDParameter, memberIDParameter, amountParameter, commentsParameter);
        }
    
        public virtual int LB_ProcessPostManualCommissions(Nullable<int> periodID, Nullable<int> adminID, Nullable<int> commissionID, Nullable<int> custID, Nullable<int> memberID, Nullable<decimal> amount, string comments)
        {
            var periodIDParameter = periodID.HasValue ?
                new ObjectParameter("PeriodID", periodID) :
                new ObjectParameter("PeriodID", typeof(int));
    
            var adminIDParameter = adminID.HasValue ?
                new ObjectParameter("AdminID", adminID) :
                new ObjectParameter("AdminID", typeof(int));
    
            var commissionIDParameter = commissionID.HasValue ?
                new ObjectParameter("CommissionID", commissionID) :
                new ObjectParameter("CommissionID", typeof(int));
    
            var custIDParameter = custID.HasValue ?
                new ObjectParameter("CustID", custID) :
                new ObjectParameter("CustID", typeof(int));
    
            var memberIDParameter = memberID.HasValue ?
                new ObjectParameter("MemberID", memberID) :
                new ObjectParameter("MemberID", typeof(int));
    
            var amountParameter = amount.HasValue ?
                new ObjectParameter("Amount", amount) :
                new ObjectParameter("Amount", typeof(decimal));
    
            var commentsParameter = comments != null ?
                new ObjectParameter("Comments", comments) :
                new ObjectParameter("Comments", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("LB_ProcessPostManualCommissions", periodIDParameter, adminIDParameter, commissionIDParameter, custIDParameter, memberIDParameter, amountParameter, commentsParameter);
        }
    
        public virtual int LB_UpdateC_InfoShipPayee(Nullable<int> custID, string shipName, string shipFirstName, string shipLastName, string shipAddress1, string shipAddress2, string shipCity, string shipState, string shipPostalCode, string shipPhone, string shipEmail, Nullable<int> payoutCustID)
        {
            var custIDParameter = custID.HasValue ?
                new ObjectParameter("CustID", custID) :
                new ObjectParameter("CustID", typeof(int));
    
            var shipNameParameter = shipName != null ?
                new ObjectParameter("ShipName", shipName) :
                new ObjectParameter("ShipName", typeof(string));
    
            var shipFirstNameParameter = shipFirstName != null ?
                new ObjectParameter("ShipFirstName", shipFirstName) :
                new ObjectParameter("ShipFirstName", typeof(string));
    
            var shipLastNameParameter = shipLastName != null ?
                new ObjectParameter("ShipLastName", shipLastName) :
                new ObjectParameter("ShipLastName", typeof(string));
    
            var shipAddress1Parameter = shipAddress1 != null ?
                new ObjectParameter("ShipAddress1", shipAddress1) :
                new ObjectParameter("ShipAddress1", typeof(string));
    
            var shipAddress2Parameter = shipAddress2 != null ?
                new ObjectParameter("ShipAddress2", shipAddress2) :
                new ObjectParameter("ShipAddress2", typeof(string));
    
            var shipCityParameter = shipCity != null ?
                new ObjectParameter("ShipCity", shipCity) :
                new ObjectParameter("ShipCity", typeof(string));
    
            var shipStateParameter = shipState != null ?
                new ObjectParameter("ShipState", shipState) :
                new ObjectParameter("ShipState", typeof(string));
    
            var shipPostalCodeParameter = shipPostalCode != null ?
                new ObjectParameter("ShipPostalCode", shipPostalCode) :
                new ObjectParameter("ShipPostalCode", typeof(string));
    
            var shipPhoneParameter = shipPhone != null ?
                new ObjectParameter("ShipPhone", shipPhone) :
                new ObjectParameter("ShipPhone", typeof(string));
    
            var shipEmailParameter = shipEmail != null ?
                new ObjectParameter("ShipEmail", shipEmail) :
                new ObjectParameter("ShipEmail", typeof(string));
    
            var payoutCustIDParameter = payoutCustID.HasValue ?
                new ObjectParameter("PayoutCustID", payoutCustID) :
                new ObjectParameter("PayoutCustID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("LB_UpdateC_InfoShipPayee", custIDParameter, shipNameParameter, shipFirstNameParameter, shipLastNameParameter, shipAddress1Parameter, shipAddress2Parameter, shipCityParameter, shipStateParameter, shipPostalCodeParameter, shipPhoneParameter, shipEmailParameter, payoutCustIDParameter);
        }
    
        public virtual int LB_UpdateMemberProgram(Nullable<int> custID, Nullable<int> autoshipID, Nullable<int> itemID, Nullable<int> promotionID)
        {
            var custIDParameter = custID.HasValue ?
                new ObjectParameter("CustID", custID) :
                new ObjectParameter("CustID", typeof(int));
    
            var autoshipIDParameter = autoshipID.HasValue ?
                new ObjectParameter("AutoshipID", autoshipID) :
                new ObjectParameter("AutoshipID", typeof(int));
    
            var itemIDParameter = itemID.HasValue ?
                new ObjectParameter("ItemID", itemID) :
                new ObjectParameter("ItemID", typeof(int));
    
            var promotionIDParameter = promotionID.HasValue ?
                new ObjectParameter("PromotionID", promotionID) :
                new ObjectParameter("PromotionID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("LB_UpdateMemberProgram", custIDParameter, autoshipIDParameter, itemIDParameter, promotionIDParameter);
        }
    
        public virtual int LB_UpdateVendorProgram(Nullable<int> custID, Nullable<int> programID, Nullable<int> c_ProgramID, string programName, string programSummary, string programDescription, string programRequirements, string programDirections, Nullable<int> memberParticipationRequired, Nullable<decimal> memberRebate, Nullable<decimal> corporateRebate, Nullable<int> adminID, ObjectParameter returnProgramID, ObjectParameter returnMessage)
        {
            var custIDParameter = custID.HasValue ?
                new ObjectParameter("CustID", custID) :
                new ObjectParameter("CustID", typeof(int));
    
            var programIDParameter = programID.HasValue ?
                new ObjectParameter("ProgramID", programID) :
                new ObjectParameter("ProgramID", typeof(int));
    
            var c_ProgramIDParameter = c_ProgramID.HasValue ?
                new ObjectParameter("C_ProgramID", c_ProgramID) :
                new ObjectParameter("C_ProgramID", typeof(int));
    
            var programNameParameter = programName != null ?
                new ObjectParameter("ProgramName", programName) :
                new ObjectParameter("ProgramName", typeof(string));
    
            var programSummaryParameter = programSummary != null ?
                new ObjectParameter("ProgramSummary", programSummary) :
                new ObjectParameter("ProgramSummary", typeof(string));
    
            var programDescriptionParameter = programDescription != null ?
                new ObjectParameter("ProgramDescription", programDescription) :
                new ObjectParameter("ProgramDescription", typeof(string));
    
            var programRequirementsParameter = programRequirements != null ?
                new ObjectParameter("ProgramRequirements", programRequirements) :
                new ObjectParameter("ProgramRequirements", typeof(string));
    
            var programDirectionsParameter = programDirections != null ?
                new ObjectParameter("ProgramDirections", programDirections) :
                new ObjectParameter("ProgramDirections", typeof(string));
    
            var memberParticipationRequiredParameter = memberParticipationRequired.HasValue ?
                new ObjectParameter("MemberParticipationRequired", memberParticipationRequired) :
                new ObjectParameter("MemberParticipationRequired", typeof(int));
    
            var memberRebateParameter = memberRebate.HasValue ?
                new ObjectParameter("MemberRebate", memberRebate) :
                new ObjectParameter("MemberRebate", typeof(decimal));
    
            var corporateRebateParameter = corporateRebate.HasValue ?
                new ObjectParameter("CorporateRebate", corporateRebate) :
                new ObjectParameter("CorporateRebate", typeof(decimal));
    
            var adminIDParameter = adminID.HasValue ?
                new ObjectParameter("AdminID", adminID) :
                new ObjectParameter("AdminID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("LB_UpdateVendorProgram", custIDParameter, programIDParameter, c_ProgramIDParameter, programNameParameter, programSummaryParameter, programDescriptionParameter, programRequirementsParameter, programDirectionsParameter, memberParticipationRequiredParameter, memberRebateParameter, corporateRebateParameter, adminIDParameter, returnProgramID, returnMessage);
        }
    
        public virtual ObjectResult<Nullable<decimal>> LB_UpdateVendorPayeeNoKey(Nullable<int> custID, Nullable<int> vendorID, string vendorPayeeID, string status, Nullable<int> statusID, Nullable<int> adminID)
        {
            var custIDParameter = custID.HasValue ?
                new ObjectParameter("CustID", custID) :
                new ObjectParameter("CustID", typeof(int));
    
            var vendorIDParameter = vendorID.HasValue ?
                new ObjectParameter("VendorID", vendorID) :
                new ObjectParameter("VendorID", typeof(int));
    
            var vendorPayeeIDParameter = vendorPayeeID != null ?
                new ObjectParameter("VendorPayeeID", vendorPayeeID) :
                new ObjectParameter("VendorPayeeID", typeof(string));
    
            var statusParameter = status != null ?
                new ObjectParameter("Status", status) :
                new ObjectParameter("Status", typeof(string));
    
            var statusIDParameter = statusID.HasValue ?
                new ObjectParameter("StatusID", statusID) :
                new ObjectParameter("StatusID", typeof(int));
    
            var adminIDParameter = adminID.HasValue ?
                new ObjectParameter("AdminID", adminID) :
                new ObjectParameter("AdminID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<Nullable<decimal>>("LB_UpdateVendorPayeeNoKey", custIDParameter, vendorIDParameter, vendorPayeeIDParameter, statusParameter, statusIDParameter, adminIDParameter);
        }
    
        public virtual int LB_ApproveSageExportOrderBatch(Nullable<int> batchID, Nullable<int> adminID, ObjectParameter returnPath, ObjectParameter returnFileName, ObjectParameter returnID, ObjectParameter returnMessage)
        {
            var batchIDParameter = batchID.HasValue ?
                new ObjectParameter("BatchID", batchID) :
                new ObjectParameter("BatchID", typeof(int));
    
            var adminIDParameter = adminID.HasValue ?
                new ObjectParameter("AdminID", adminID) :
                new ObjectParameter("AdminID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("LB_ApproveSageExportOrderBatch", batchIDParameter, adminIDParameter, returnPath, returnFileName, returnID, returnMessage);
        }
    
        public virtual int LB_ApproveVendorRebateTransactionBatch(Nullable<int> batchID, Nullable<int> adminID, ObjectParameter returnID, ObjectParameter returnMessage)
        {
            var batchIDParameter = batchID.HasValue ?
                new ObjectParameter("BatchID", batchID) :
                new ObjectParameter("BatchID", typeof(int));
    
            var adminIDParameter = adminID.HasValue ?
                new ObjectParameter("AdminID", adminID) :
                new ObjectParameter("AdminID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("LB_ApproveVendorRebateTransactionBatch", batchIDParameter, adminIDParameter, returnID, returnMessage);
        }
    
        public virtual int LB_DeleteEventRegistration(Nullable<int> eventID, Nullable<int> custID, Nullable<int> adminID, ObjectParameter returnID, ObjectParameter returnMessage)
        {
            var eventIDParameter = eventID.HasValue ?
                new ObjectParameter("EventID", eventID) :
                new ObjectParameter("EventID", typeof(int));
    
            var custIDParameter = custID.HasValue ?
                new ObjectParameter("CustID", custID) :
                new ObjectParameter("CustID", typeof(int));
    
            var adminIDParameter = adminID.HasValue ?
                new ObjectParameter("AdminID", adminID) :
                new ObjectParameter("AdminID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("LB_DeleteEventRegistration", eventIDParameter, custIDParameter, adminIDParameter, returnID, returnMessage);
        }
    
        public virtual int LB_DeleteImportPayoutBatch(Nullable<int> batchID, Nullable<int> adminID, ObjectParameter returnID, ObjectParameter returnMessage)
        {
            var batchIDParameter = batchID.HasValue ?
                new ObjectParameter("BatchID", batchID) :
                new ObjectParameter("BatchID", typeof(int));
    
            var adminIDParameter = adminID.HasValue ?
                new ObjectParameter("AdminID", adminID) :
                new ObjectParameter("AdminID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("LB_DeleteImportPayoutBatch", batchIDParameter, adminIDParameter, returnID, returnMessage);
        }
    
        public virtual int LB_DeleteMemberDirector(Nullable<int> custID, Nullable<int> adminID, ObjectParameter returnCustID, ObjectParameter returnMessage)
        {
            var custIDParameter = custID.HasValue ?
                new ObjectParameter("CustID", custID) :
                new ObjectParameter("CustID", typeof(int));
    
            var adminIDParameter = adminID.HasValue ?
                new ObjectParameter("AdminID", adminID) :
                new ObjectParameter("AdminID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("LB_DeleteMemberDirector", custIDParameter, adminIDParameter, returnCustID, returnMessage);
        }
    
        public virtual int LB_DeleteOrderExportBatch(Nullable<int> batchID, Nullable<int> adminID, ObjectParameter returnID, ObjectParameter returnMessage)
        {
            var batchIDParameter = batchID.HasValue ?
                new ObjectParameter("BatchID", batchID) :
                new ObjectParameter("BatchID", typeof(int));
    
            var adminIDParameter = adminID.HasValue ?
                new ObjectParameter("AdminID", adminID) :
                new ObjectParameter("AdminID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("LB_DeleteOrderExportBatch", batchIDParameter, adminIDParameter, returnID, returnMessage);
        }
    
        public virtual int LB_DeleteVendorRebateTransactionBatch(Nullable<int> batchID, Nullable<int> adminID, ObjectParameter returnID, ObjectParameter returnMessage)
        {
            var batchIDParameter = batchID.HasValue ?
                new ObjectParameter("BatchID", batchID) :
                new ObjectParameter("BatchID", typeof(int));
    
            var adminIDParameter = adminID.HasValue ?
                new ObjectParameter("AdminID", adminID) :
                new ObjectParameter("AdminID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("LB_DeleteVendorRebateTransactionBatch", batchIDParameter, adminIDParameter, returnID, returnMessage);
        }
    
        public virtual int LB_DeleteVolume(Nullable<int> volumeID, Nullable<int> custID, Nullable<int> adminID, ObjectParameter returnID, ObjectParameter returnMessage)
        {
            var volumeIDParameter = volumeID.HasValue ?
                new ObjectParameter("VolumeID", volumeID) :
                new ObjectParameter("VolumeID", typeof(int));
    
            var custIDParameter = custID.HasValue ?
                new ObjectParameter("CustID", custID) :
                new ObjectParameter("CustID", typeof(int));
    
            var adminIDParameter = adminID.HasValue ?
                new ObjectParameter("AdminID", adminID) :
                new ObjectParameter("AdminID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("LB_DeleteVolume", volumeIDParameter, custIDParameter, adminIDParameter, returnID, returnMessage);
        }
    
        public virtual int LB_InsertVolume(Nullable<int> custID, Nullable<int> volumeType, string volumeName, string volumeDescription, ObjectParameter returnID, ObjectParameter returnMessage)
        {
            var custIDParameter = custID.HasValue ?
                new ObjectParameter("CustID", custID) :
                new ObjectParameter("CustID", typeof(int));
    
            var volumeTypeParameter = volumeType.HasValue ?
                new ObjectParameter("VolumeType", volumeType) :
                new ObjectParameter("VolumeType", typeof(int));
    
            var volumeNameParameter = volumeName != null ?
                new ObjectParameter("VolumeName", volumeName) :
                new ObjectParameter("VolumeName", typeof(string));
    
            var volumeDescriptionParameter = volumeDescription != null ?
                new ObjectParameter("VolumeDescription", volumeDescription) :
                new ObjectParameter("VolumeDescription", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("LB_InsertVolume", custIDParameter, volumeTypeParameter, volumeNameParameter, volumeDescriptionParameter, returnID, returnMessage);
        }
    
        public virtual int LB_InsertImportPayoutTransactions(string fileName, Nullable<int> recordCount, Nullable<int> adminId, ObjectParameter returnID, ObjectParameter returnMessage)
        {
            var fileNameParameter = fileName != null ?
                new ObjectParameter("FileName", fileName) :
                new ObjectParameter("FileName", typeof(string));
    
            var recordCountParameter = recordCount.HasValue ?
                new ObjectParameter("RecordCount", recordCount) :
                new ObjectParameter("RecordCount", typeof(int));
    
            var adminIdParameter = adminId.HasValue ?
                new ObjectParameter("AdminId", adminId) :
                new ObjectParameter("AdminId", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("LB_InsertImportPayoutTransactions", fileNameParameter, recordCountParameter, adminIdParameter, returnID, returnMessage);
        }
    
        public virtual int LB_InsertVendorRebateTransactions(Nullable<int> vendorID, Nullable<int> volumeID, string fileName, Nullable<int> recordCount, Nullable<int> adminId, ObjectParameter returnID, ObjectParameter returnMessage)
        {
            var vendorIDParameter = vendorID.HasValue ?
                new ObjectParameter("VendorID", vendorID) :
                new ObjectParameter("VendorID", typeof(int));
    
            var volumeIDParameter = volumeID.HasValue ?
                new ObjectParameter("VolumeID", volumeID) :
                new ObjectParameter("VolumeID", typeof(int));
    
            var fileNameParameter = fileName != null ?
                new ObjectParameter("FileName", fileName) :
                new ObjectParameter("FileName", typeof(string));
    
            var recordCountParameter = recordCount.HasValue ?
                new ObjectParameter("RecordCount", recordCount) :
                new ObjectParameter("RecordCount", typeof(int));
    
            var adminIdParameter = adminId.HasValue ?
                new ObjectParameter("AdminId", adminId) :
                new ObjectParameter("AdminId", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("LB_InsertVendorRebateTransactions", vendorIDParameter, volumeIDParameter, fileNameParameter, recordCountParameter, adminIdParameter, returnID, returnMessage);
        }
    
        public virtual int LB_TruncateTmp_ImportPayoutTransactions()
        {
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("LB_TruncateTmp_ImportPayoutTransactions");
        }
    
        public virtual int LB_TruncateTmp_VendorRebateTransactions()
        {
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("LB_TruncateTmp_VendorRebateTransactions");
        }
    
        public virtual int LB_UpdateOrderCancel(Nullable<int> orderID, Nullable<decimal> cancelAmount, Nullable<int> adminID, ObjectParameter returnID, ObjectParameter returnMessage)
        {
            var orderIDParameter = orderID.HasValue ?
                new ObjectParameter("OrderID", orderID) :
                new ObjectParameter("OrderID", typeof(int));
    
            var cancelAmountParameter = cancelAmount.HasValue ?
                new ObjectParameter("CancelAmount", cancelAmount) :
                new ObjectParameter("CancelAmount", typeof(decimal));
    
            var adminIDParameter = adminID.HasValue ?
                new ObjectParameter("AdminID", adminID) :
                new ObjectParameter("AdminID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("LB_UpdateOrderCancel", orderIDParameter, cancelAmountParameter, adminIDParameter, returnID, returnMessage);
        }
    
        public virtual int LB_UpdateOrderDiscount(Nullable<int> orderID, Nullable<decimal> discount, string discountReason, Nullable<int> adminID, ObjectParameter returnID, ObjectParameter returnMessage)
        {
            var orderIDParameter = orderID.HasValue ?
                new ObjectParameter("OrderID", orderID) :
                new ObjectParameter("OrderID", typeof(int));
    
            var discountParameter = discount.HasValue ?
                new ObjectParameter("Discount", discount) :
                new ObjectParameter("Discount", typeof(decimal));
    
            var discountReasonParameter = discountReason != null ?
                new ObjectParameter("DiscountReason", discountReason) :
                new ObjectParameter("DiscountReason", typeof(string));
    
            var adminIDParameter = adminID.HasValue ?
                new ObjectParameter("AdminID", adminID) :
                new ObjectParameter("AdminID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("LB_UpdateOrderDiscount", orderIDParameter, discountParameter, discountReasonParameter, adminIDParameter, returnID, returnMessage);
        }
    
        public virtual int LB_UpdateOrderPayment(Nullable<int> orderID, Nullable<System.DateTime> paymentDate, string paymentType, Nullable<int> checkNumber, string transactionID, Nullable<decimal> amount, Nullable<int> adminID, ObjectParameter returnID, ObjectParameter returnMessage)
        {
            var orderIDParameter = orderID.HasValue ?
                new ObjectParameter("OrderID", orderID) :
                new ObjectParameter("OrderID", typeof(int));
    
            var paymentDateParameter = paymentDate.HasValue ?
                new ObjectParameter("PaymentDate", paymentDate) :
                new ObjectParameter("PaymentDate", typeof(System.DateTime));
    
            var paymentTypeParameter = paymentType != null ?
                new ObjectParameter("PaymentType", paymentType) :
                new ObjectParameter("PaymentType", typeof(string));
    
            var checkNumberParameter = checkNumber.HasValue ?
                new ObjectParameter("CheckNumber", checkNumber) :
                new ObjectParameter("CheckNumber", typeof(int));
    
            var transactionIDParameter = transactionID != null ?
                new ObjectParameter("TransactionID", transactionID) :
                new ObjectParameter("TransactionID", typeof(string));
    
            var amountParameter = amount.HasValue ?
                new ObjectParameter("Amount", amount) :
                new ObjectParameter("Amount", typeof(decimal));
    
            var adminIDParameter = adminID.HasValue ?
                new ObjectParameter("AdminID", adminID) :
                new ObjectParameter("AdminID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("LB_UpdateOrderPayment", orderIDParameter, paymentDateParameter, paymentTypeParameter, checkNumberParameter, transactionIDParameter, amountParameter, adminIDParameter, returnID, returnMessage);
        }
    
        public virtual int LB_UpdateOrderStatus(Nullable<int> orderID, string status, Nullable<int> adminID, ObjectParameter returnID, ObjectParameter returnMessage)
        {
            var orderIDParameter = orderID.HasValue ?
                new ObjectParameter("OrderID", orderID) :
                new ObjectParameter("OrderID", typeof(int));
    
            var statusParameter = status != null ?
                new ObjectParameter("Status", status) :
                new ObjectParameter("Status", typeof(string));
    
            var adminIDParameter = adminID.HasValue ?
                new ObjectParameter("AdminID", adminID) :
                new ObjectParameter("AdminID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("LB_UpdateOrderStatus", orderIDParameter, statusParameter, adminIDParameter, returnID, returnMessage);
        }
    
        public virtual int LB_UpdateRefundPayment(Nullable<int> paymentID, Nullable<decimal> refundAmount, string description, Nullable<int> adminID, ObjectParameter returnID, ObjectParameter returnMessage)
        {
            var paymentIDParameter = paymentID.HasValue ?
                new ObjectParameter("PaymentID", paymentID) :
                new ObjectParameter("PaymentID", typeof(int));
    
            var refundAmountParameter = refundAmount.HasValue ?
                new ObjectParameter("RefundAmount", refundAmount) :
                new ObjectParameter("RefundAmount", typeof(decimal));
    
            var descriptionParameter = description != null ?
                new ObjectParameter("Description", description) :
                new ObjectParameter("Description", typeof(string));
    
            var adminIDParameter = adminID.HasValue ?
                new ObjectParameter("AdminID", adminID) :
                new ObjectParameter("AdminID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("LB_UpdateRefundPayment", paymentIDParameter, refundAmountParameter, descriptionParameter, adminIDParameter, returnID, returnMessage);
        }
    
        public virtual int LB_UpdateReturnPayment(Nullable<int> paymentID, Nullable<int> adminID, ObjectParameter returnID, ObjectParameter returnMessage)
        {
            var paymentIDParameter = paymentID.HasValue ?
                new ObjectParameter("PaymentID", paymentID) :
                new ObjectParameter("PaymentID", typeof(int));
    
            var adminIDParameter = adminID.HasValue ?
                new ObjectParameter("AdminID", adminID) :
                new ObjectParameter("AdminID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("LB_UpdateReturnPayment", paymentIDParameter, adminIDParameter, returnID, returnMessage);
        }
    
        public virtual int LB_UpdateSageExportOrderPayments(string batchDescription, Nullable<System.DateTime> cutoffDate, ObjectParameter returnID, ObjectParameter returnMessage)
        {
            var batchDescriptionParameter = batchDescription != null ?
                new ObjectParameter("BatchDescription", batchDescription) :
                new ObjectParameter("BatchDescription", typeof(string));
    
            var cutoffDateParameter = cutoffDate.HasValue ?
                new ObjectParameter("CutoffDate", cutoffDate) :
                new ObjectParameter("CutoffDate", typeof(System.DateTime));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("LB_UpdateSageExportOrderPayments", batchDescriptionParameter, cutoffDateParameter, returnID, returnMessage);
        }
    
        public virtual int LB_UpdateVendorPayeeByTransactionID(Nullable<int> transactionID, Nullable<int> custID, Nullable<int> adminID, ObjectParameter returnBatchID, ObjectParameter returnID, ObjectParameter returnMessage)
        {
            var transactionIDParameter = transactionID.HasValue ?
                new ObjectParameter("TransactionID", transactionID) :
                new ObjectParameter("TransactionID", typeof(int));
    
            var custIDParameter = custID.HasValue ?
                new ObjectParameter("CustID", custID) :
                new ObjectParameter("CustID", typeof(int));
    
            var adminIDParameter = adminID.HasValue ?
                new ObjectParameter("AdminID", adminID) :
                new ObjectParameter("AdminID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("LB_UpdateVendorPayeeByTransactionID", transactionIDParameter, custIDParameter, adminIDParameter, returnBatchID, returnID, returnMessage);
        }
    
        public virtual int LB_UpdateSageExportOrders(string batchDescription, Nullable<System.DateTime> cutoffDate, ObjectParameter returnID, ObjectParameter returnMessage)
        {
            var batchDescriptionParameter = batchDescription != null ?
                new ObjectParameter("BatchDescription", batchDescription) :
                new ObjectParameter("BatchDescription", typeof(string));
    
            var cutoffDateParameter = cutoffDate.HasValue ?
                new ObjectParameter("CutoffDate", cutoffDate) :
                new ObjectParameter("CutoffDate", typeof(System.DateTime));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("LB_UpdateSageExportOrders", batchDescriptionParameter, cutoffDateParameter, returnID, returnMessage);
        }
    
        public virtual int LB_UpdateSageImportPayoutTransactions(Nullable<int> batchID, Nullable<int> adminID, ObjectParameter returnID, ObjectParameter returnMessage)
        {
            var batchIDParameter = batchID.HasValue ?
                new ObjectParameter("BatchID", batchID) :
                new ObjectParameter("BatchID", typeof(int));
    
            var adminIDParameter = adminID.HasValue ?
                new ObjectParameter("AdminID", adminID) :
                new ObjectParameter("AdminID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("LB_UpdateSageImportPayoutTransactions", batchIDParameter, adminIDParameter, returnID, returnMessage);
        }
    
        public virtual int LB_UpdateMemberVendor(Nullable<int> custID, Nullable<int> vendorID, string participation)
        {
            var custIDParameter = custID.HasValue ?
                new ObjectParameter("CustID", custID) :
                new ObjectParameter("CustID", typeof(int));
    
            var vendorIDParameter = vendorID.HasValue ?
                new ObjectParameter("VendorID", vendorID) :
                new ObjectParameter("VendorID", typeof(int));
    
            var participationParameter = participation != null ?
                new ObjectParameter("Participation", participation) :
                new ObjectParameter("Participation", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("LB_UpdateMemberVendor", custIDParameter, vendorIDParameter, participationParameter);
        }
    
        public virtual int LB_UpdateMemberVendorRequirement(Nullable<int> custID, Nullable<int> vendorID, Nullable<int> requirementID, string status, Nullable<int> statusID, Nullable<int> adminID)
        {
            var custIDParameter = custID.HasValue ?
                new ObjectParameter("CustID", custID) :
                new ObjectParameter("CustID", typeof(int));
    
            var vendorIDParameter = vendorID.HasValue ?
                new ObjectParameter("VendorID", vendorID) :
                new ObjectParameter("VendorID", typeof(int));
    
            var requirementIDParameter = requirementID.HasValue ?
                new ObjectParameter("RequirementID", requirementID) :
                new ObjectParameter("RequirementID", typeof(int));
    
            var statusParameter = status != null ?
                new ObjectParameter("Status", status) :
                new ObjectParameter("Status", typeof(string));
    
            var statusIDParameter = statusID.HasValue ?
                new ObjectParameter("StatusID", statusID) :
                new ObjectParameter("StatusID", typeof(int));
    
            var adminIDParameter = adminID.HasValue ?
                new ObjectParameter("AdminID", adminID) :
                new ObjectParameter("AdminID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("LB_UpdateMemberVendorRequirement", custIDParameter, vendorIDParameter, requirementIDParameter, statusParameter, statusIDParameter, adminIDParameter);
        }
    
        public virtual int LB_UpdateVendorPayee(Nullable<int> vendorID, string vendorPayeeID, Nullable<int> newPayeeID, Nullable<int> adminID)
        {
            var vendorIDParameter = vendorID.HasValue ?
                new ObjectParameter("VendorID", vendorID) :
                new ObjectParameter("VendorID", typeof(int));
    
            var vendorPayeeIDParameter = vendorPayeeID != null ?
                new ObjectParameter("VendorPayeeID", vendorPayeeID) :
                new ObjectParameter("VendorPayeeID", typeof(string));
    
            var newPayeeIDParameter = newPayeeID.HasValue ?
                new ObjectParameter("NewPayeeID", newPayeeID) :
                new ObjectParameter("NewPayeeID", typeof(int));
    
            var adminIDParameter = adminID.HasValue ?
                new ObjectParameter("AdminID", adminID) :
                new ObjectParameter("AdminID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("LB_UpdateVendorPayee", vendorIDParameter, vendorPayeeIDParameter, newPayeeIDParameter, adminIDParameter);
        }
    
        public virtual int CMS_UpdateCMSContentSimple(string sectionName, string viewName, string contentValue)
        {
            var sectionNameParameter = sectionName != null ?
                new ObjectParameter("SectionName", sectionName) :
                new ObjectParameter("SectionName", typeof(string));
    
            var viewNameParameter = viewName != null ?
                new ObjectParameter("ViewName", viewName) :
                new ObjectParameter("ViewName", typeof(string));
    
            var contentValueParameter = contentValue != null ?
                new ObjectParameter("ContentValue", contentValue) :
                new ObjectParameter("ContentValue", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("CMS_UpdateCMSContentSimple", sectionNameParameter, viewNameParameter, contentValueParameter);
        }
    
        public virtual int CMS_UpDateCMSRollbackPage(string viewName)
        {
            var viewNameParameter = viewName != null ?
                new ObjectParameter("ViewName", viewName) :
                new ObjectParameter("ViewName", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("CMS_UpDateCMSRollbackPage", viewNameParameter);
        }
    
        public virtual int CMS_UpdatePublishPage(string viewName)
        {
            var viewNameParameter = viewName != null ?
                new ObjectParameter("ViewName", viewName) :
                new ObjectParameter("ViewName", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("CMS_UpdatePublishPage", viewNameParameter);
        }
    
        public virtual ObjectResult<LB_UpdateMemberEnrollmentParentPractice_Result> LB_UpdateMemberEnrollmentParentPractice(Nullable<int> custID, Nullable<int> parentID, string practiceSize)
        {
            var custIDParameter = custID.HasValue ?
                new ObjectParameter("CustID", custID) :
                new ObjectParameter("CustID", typeof(int));
    
            var parentIDParameter = parentID.HasValue ?
                new ObjectParameter("ParentID", parentID) :
                new ObjectParameter("ParentID", typeof(int));
    
            var practiceSizeParameter = practiceSize != null ?
                new ObjectParameter("PracticeSize", practiceSize) :
                new ObjectParameter("PracticeSize", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<LB_UpdateMemberEnrollmentParentPractice_Result>("LB_UpdateMemberEnrollmentParentPractice", custIDParameter, parentIDParameter, practiceSizeParameter);
        }
    
        public virtual int LB_InsertContactsMin(string contactFirstName, string contactLastName, string contactEmail, string contactSource, string contactMessage, string contactSubject)
        {
            var contactFirstNameParameter = contactFirstName != null ?
                new ObjectParameter("contactFirstName", contactFirstName) :
                new ObjectParameter("contactFirstName", typeof(string));
    
            var contactLastNameParameter = contactLastName != null ?
                new ObjectParameter("contactLastName", contactLastName) :
                new ObjectParameter("contactLastName", typeof(string));
    
            var contactEmailParameter = contactEmail != null ?
                new ObjectParameter("contactEmail", contactEmail) :
                new ObjectParameter("contactEmail", typeof(string));
    
            var contactSourceParameter = contactSource != null ?
                new ObjectParameter("contactSource", contactSource) :
                new ObjectParameter("contactSource", typeof(string));
    
            var contactMessageParameter = contactMessage != null ?
                new ObjectParameter("contactMessage", contactMessage) :
                new ObjectParameter("contactMessage", typeof(string));
    
            var contactSubjectParameter = contactSubject != null ?
                new ObjectParameter("contactSubject", contactSubject) :
                new ObjectParameter("contactSubject", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("LB_InsertContactsMin", contactFirstNameParameter, contactLastNameParameter, contactEmailParameter, contactSourceParameter, contactMessageParameter, contactSubjectParameter);
        }
    
        public virtual int LB_UpdateC_InfoStatusAppTrack(Nullable<int> custID, string status, Nullable<int> adminID, string cancelReasonCode, string comments)
        {
            var custIDParameter = custID.HasValue ?
                new ObjectParameter("CustID", custID) :
                new ObjectParameter("CustID", typeof(int));
    
            var statusParameter = status != null ?
                new ObjectParameter("Status", status) :
                new ObjectParameter("Status", typeof(string));
    
            var adminIDParameter = adminID.HasValue ?
                new ObjectParameter("AdminID", adminID) :
                new ObjectParameter("AdminID", typeof(int));
    
            var cancelReasonCodeParameter = cancelReasonCode != null ?
                new ObjectParameter("CancelReasonCode", cancelReasonCode) :
                new ObjectParameter("CancelReasonCode", typeof(string));
    
            var commentsParameter = comments != null ?
                new ObjectParameter("Comments", comments) :
                new ObjectParameter("Comments", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("LB_UpdateC_InfoStatusAppTrack", custIDParameter, statusParameter, adminIDParameter, cancelReasonCodeParameter, commentsParameter);
        }
    
        public virtual int LB_CancelVendor(Nullable<int> custID, Nullable<int> adminID, ObjectParameter returnCustID, ObjectParameter returnMessage)
        {
            var custIDParameter = custID.HasValue ?
                new ObjectParameter("CustID", custID) :
                new ObjectParameter("CustID", typeof(int));
    
            var adminIDParameter = adminID.HasValue ?
                new ObjectParameter("AdminID", adminID) :
                new ObjectParameter("AdminID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("LB_CancelVendor", custIDParameter, adminIDParameter, returnCustID, returnMessage);
        }
    
        public virtual int LB_UnCancelVendor(Nullable<int> custID, Nullable<int> adminID, ObjectParameter returnCustID, ObjectParameter returnMessage)
        {
            var custIDParameter = custID.HasValue ?
                new ObjectParameter("CustID", custID) :
                new ObjectParameter("CustID", typeof(int));
    
            var adminIDParameter = adminID.HasValue ?
                new ObjectParameter("AdminID", adminID) :
                new ObjectParameter("AdminID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("LB_UnCancelVendor", custIDParameter, adminIDParameter, returnCustID, returnMessage);
        }
    
        public virtual int LB_UpdateLocationEditAccount(Nullable<int> customerType, Nullable<int> custID, string taxID, string company, string displayName, string nameTitle, string firstName, string lastName, string address1, string address2, string city, string state, string postalCode, string companyPhone, string dayPhone, string mobile, string fax, string email, Nullable<System.DateTime> startDate, string status, Nullable<int> sponsorID, string secID, Nullable<int> secSponsorID, string accountingID, string salesForceID, Nullable<byte> emailFlag, Nullable<byte> textFlag, ObjectParameter returnCustID, ObjectParameter returnMessage)
        {
            var customerTypeParameter = customerType.HasValue ?
                new ObjectParameter("CustomerType", customerType) :
                new ObjectParameter("CustomerType", typeof(int));
    
            var custIDParameter = custID.HasValue ?
                new ObjectParameter("CustID", custID) :
                new ObjectParameter("CustID", typeof(int));
    
            var taxIDParameter = taxID != null ?
                new ObjectParameter("TaxID", taxID) :
                new ObjectParameter("TaxID", typeof(string));
    
            var companyParameter = company != null ?
                new ObjectParameter("Company", company) :
                new ObjectParameter("Company", typeof(string));
    
            var displayNameParameter = displayName != null ?
                new ObjectParameter("DisplayName", displayName) :
                new ObjectParameter("DisplayName", typeof(string));
    
            var nameTitleParameter = nameTitle != null ?
                new ObjectParameter("NameTitle", nameTitle) :
                new ObjectParameter("NameTitle", typeof(string));
    
            var firstNameParameter = firstName != null ?
                new ObjectParameter("FirstName", firstName) :
                new ObjectParameter("FirstName", typeof(string));
    
            var lastNameParameter = lastName != null ?
                new ObjectParameter("LastName", lastName) :
                new ObjectParameter("LastName", typeof(string));
    
            var address1Parameter = address1 != null ?
                new ObjectParameter("Address1", address1) :
                new ObjectParameter("Address1", typeof(string));
    
            var address2Parameter = address2 != null ?
                new ObjectParameter("Address2", address2) :
                new ObjectParameter("Address2", typeof(string));
    
            var cityParameter = city != null ?
                new ObjectParameter("City", city) :
                new ObjectParameter("City", typeof(string));
    
            var stateParameter = state != null ?
                new ObjectParameter("State", state) :
                new ObjectParameter("State", typeof(string));
    
            var postalCodeParameter = postalCode != null ?
                new ObjectParameter("PostalCode", postalCode) :
                new ObjectParameter("PostalCode", typeof(string));
    
            var companyPhoneParameter = companyPhone != null ?
                new ObjectParameter("CompanyPhone", companyPhone) :
                new ObjectParameter("CompanyPhone", typeof(string));
    
            var dayPhoneParameter = dayPhone != null ?
                new ObjectParameter("DayPhone", dayPhone) :
                new ObjectParameter("DayPhone", typeof(string));
    
            var mobileParameter = mobile != null ?
                new ObjectParameter("Mobile", mobile) :
                new ObjectParameter("Mobile", typeof(string));
    
            var faxParameter = fax != null ?
                new ObjectParameter("Fax", fax) :
                new ObjectParameter("Fax", typeof(string));
    
            var emailParameter = email != null ?
                new ObjectParameter("Email", email) :
                new ObjectParameter("Email", typeof(string));
    
            var startDateParameter = startDate.HasValue ?
                new ObjectParameter("StartDate", startDate) :
                new ObjectParameter("StartDate", typeof(System.DateTime));
    
            var statusParameter = status != null ?
                new ObjectParameter("Status", status) :
                new ObjectParameter("Status", typeof(string));
    
            var sponsorIDParameter = sponsorID.HasValue ?
                new ObjectParameter("SponsorID", sponsorID) :
                new ObjectParameter("SponsorID", typeof(int));
    
            var secIDParameter = secID != null ?
                new ObjectParameter("SecID", secID) :
                new ObjectParameter("SecID", typeof(string));
    
            var secSponsorIDParameter = secSponsorID.HasValue ?
                new ObjectParameter("SecSponsorID", secSponsorID) :
                new ObjectParameter("SecSponsorID", typeof(int));
    
            var accountingIDParameter = accountingID != null ?
                new ObjectParameter("AccountingID", accountingID) :
                new ObjectParameter("AccountingID", typeof(string));
    
            var salesForceIDParameter = salesForceID != null ?
                new ObjectParameter("SalesForceID", salesForceID) :
                new ObjectParameter("SalesForceID", typeof(string));
    
            var emailFlagParameter = emailFlag.HasValue ?
                new ObjectParameter("EmailFlag", emailFlag) :
                new ObjectParameter("EmailFlag", typeof(byte));
    
            var textFlagParameter = textFlag.HasValue ?
                new ObjectParameter("TextFlag", textFlag) :
                new ObjectParameter("TextFlag", typeof(byte));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("LB_UpdateLocationEditAccount", customerTypeParameter, custIDParameter, taxIDParameter, companyParameter, displayNameParameter, nameTitleParameter, firstNameParameter, lastNameParameter, address1Parameter, address2Parameter, cityParameter, stateParameter, postalCodeParameter, companyPhoneParameter, dayPhoneParameter, mobileParameter, faxParameter, emailParameter, startDateParameter, statusParameter, sponsorIDParameter, secIDParameter, secSponsorIDParameter, accountingIDParameter, salesForceIDParameter, emailFlagParameter, textFlagParameter, returnCustID, returnMessage);
        }
    
        public virtual int LB_AccountReviewStep1(Nullable<int> custID, string reviewReason, string reviewDescription, Nullable<int> adminID)
        {
            var custIDParameter = custID.HasValue ?
                new ObjectParameter("CustID", custID) :
                new ObjectParameter("CustID", typeof(int));
    
            var reviewReasonParameter = reviewReason != null ?
                new ObjectParameter("ReviewReason", reviewReason) :
                new ObjectParameter("ReviewReason", typeof(string));
    
            var reviewDescriptionParameter = reviewDescription != null ?
                new ObjectParameter("ReviewDescription", reviewDescription) :
                new ObjectParameter("ReviewDescription", typeof(string));
    
            var adminIDParameter = adminID.HasValue ?
                new ObjectParameter("AdminID", adminID) :
                new ObjectParameter("AdminID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("LB_AccountReviewStep1", custIDParameter, reviewReasonParameter, reviewDescriptionParameter, adminIDParameter);
        }
    
        public virtual int LB_UpdateMemberVendorRequirementByID(Nullable<int> requirementID, string status, string path, string fileName)
        {
            var requirementIDParameter = requirementID.HasValue ?
                new ObjectParameter("RequirementID", requirementID) :
                new ObjectParameter("RequirementID", typeof(int));
    
            var statusParameter = status != null ?
                new ObjectParameter("Status", status) :
                new ObjectParameter("Status", typeof(string));
    
            var pathParameter = path != null ?
                new ObjectParameter("Path", path) :
                new ObjectParameter("Path", typeof(string));
    
            var fileNameParameter = fileName != null ?
                new ObjectParameter("FileName", fileName) :
                new ObjectParameter("FileName", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("LB_UpdateMemberVendorRequirementByID", requirementIDParameter, statusParameter, pathParameter, fileNameParameter);
        }
    
        public virtual int LB_AccountReviewStep2(Nullable<int> iD, string reviewStatus, string reviewReason, string reviewDescription, string changeAlliance, Nullable<int> statusID, Nullable<int> adminID)
        {
            var iDParameter = iD.HasValue ?
                new ObjectParameter("ID", iD) :
                new ObjectParameter("ID", typeof(int));
    
            var reviewStatusParameter = reviewStatus != null ?
                new ObjectParameter("ReviewStatus", reviewStatus) :
                new ObjectParameter("ReviewStatus", typeof(string));
    
            var reviewReasonParameter = reviewReason != null ?
                new ObjectParameter("ReviewReason", reviewReason) :
                new ObjectParameter("ReviewReason", typeof(string));
    
            var reviewDescriptionParameter = reviewDescription != null ?
                new ObjectParameter("ReviewDescription", reviewDescription) :
                new ObjectParameter("ReviewDescription", typeof(string));
    
            var changeAllianceParameter = changeAlliance != null ?
                new ObjectParameter("ChangeAlliance", changeAlliance) :
                new ObjectParameter("ChangeAlliance", typeof(string));
    
            var statusIDParameter = statusID.HasValue ?
                new ObjectParameter("StatusID", statusID) :
                new ObjectParameter("StatusID", typeof(int));
    
            var adminIDParameter = adminID.HasValue ?
                new ObjectParameter("AdminID", adminID) :
                new ObjectParameter("AdminID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("LB_AccountReviewStep2", iDParameter, reviewStatusParameter, reviewReasonParameter, reviewDescriptionParameter, changeAllianceParameter, statusIDParameter, adminIDParameter);
        }
    
        public virtual int LB_AccountReviewStep3(Nullable<int> iD, string outcome, Nullable<System.DateTime> outcomeDate, string outcomerReasonCode, string outcomeDescription, Nullable<int> adminID)
        {
            var iDParameter = iD.HasValue ?
                new ObjectParameter("ID", iD) :
                new ObjectParameter("ID", typeof(int));
    
            var outcomeParameter = outcome != null ?
                new ObjectParameter("Outcome", outcome) :
                new ObjectParameter("Outcome", typeof(string));
    
            var outcomeDateParameter = outcomeDate.HasValue ?
                new ObjectParameter("OutcomeDate", outcomeDate) :
                new ObjectParameter("OutcomeDate", typeof(System.DateTime));
    
            var outcomerReasonCodeParameter = outcomerReasonCode != null ?
                new ObjectParameter("OutcomerReasonCode", outcomerReasonCode) :
                new ObjectParameter("OutcomerReasonCode", typeof(string));
    
            var outcomeDescriptionParameter = outcomeDescription != null ?
                new ObjectParameter("OutcomeDescription", outcomeDescription) :
                new ObjectParameter("OutcomeDescription", typeof(string));
    
            var adminIDParameter = adminID.HasValue ?
                new ObjectParameter("AdminID", adminID) :
                new ObjectParameter("AdminID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("LB_AccountReviewStep3", iDParameter, outcomeParameter, outcomeDateParameter, outcomerReasonCodeParameter, outcomeDescriptionParameter, adminIDParameter);
        }
    
        public virtual int LB_InsertPaymentHistory(Nullable<int> custID, Nullable<int> orderID, Nullable<int> paymentMethodID, string description, Nullable<decimal> amount, ObjectParameter paymentHistoryID)
        {
            var custIDParameter = custID.HasValue ?
                new ObjectParameter("CustID", custID) :
                new ObjectParameter("CustID", typeof(int));
    
            var orderIDParameter = orderID.HasValue ?
                new ObjectParameter("OrderID", orderID) :
                new ObjectParameter("OrderID", typeof(int));
    
            var paymentMethodIDParameter = paymentMethodID.HasValue ?
                new ObjectParameter("PaymentMethodID", paymentMethodID) :
                new ObjectParameter("PaymentMethodID", typeof(int));
    
            var descriptionParameter = description != null ?
                new ObjectParameter("Description", description) :
                new ObjectParameter("Description", typeof(string));
    
            var amountParameter = amount.HasValue ?
                new ObjectParameter("Amount", amount) :
                new ObjectParameter("Amount", typeof(decimal));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("LB_InsertPaymentHistory", custIDParameter, orderIDParameter, paymentMethodIDParameter, descriptionParameter, amountParameter, paymentHistoryID);
        }
    
        public virtual int LB_UpdateVendorRebateTransactionStatus(Nullable<int> transactionID, string status, Nullable<int> adminID, ObjectParameter returnBatchID, ObjectParameter returnID, ObjectParameter returnMessage)
        {
            var transactionIDParameter = transactionID.HasValue ?
                new ObjectParameter("TransactionID", transactionID) :
                new ObjectParameter("TransactionID", typeof(int));
    
            var statusParameter = status != null ?
                new ObjectParameter("Status", status) :
                new ObjectParameter("Status", typeof(string));
    
            var adminIDParameter = adminID.HasValue ?
                new ObjectParameter("AdminID", adminID) :
                new ObjectParameter("AdminID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("LB_UpdateVendorRebateTransactionStatus", transactionIDParameter, statusParameter, adminIDParameter, returnBatchID, returnID, returnMessage);
        }
    
        public virtual int LB_InsertEventRegistration(Nullable<int> eventID, Nullable<int> custID, Nullable<int> sponsorID, string nameTitle, string firstName, string lastName, string jobTitle, string sponsorName, string email, string dayPhone, Nullable<int> customerType, Nullable<int> flag1, ObjectParameter returnID, ObjectParameter returnMessage)
        {
            var eventIDParameter = eventID.HasValue ?
                new ObjectParameter("EventID", eventID) :
                new ObjectParameter("EventID", typeof(int));
    
            var custIDParameter = custID.HasValue ?
                new ObjectParameter("CustID", custID) :
                new ObjectParameter("CustID", typeof(int));
    
            var sponsorIDParameter = sponsorID.HasValue ?
                new ObjectParameter("SponsorID", sponsorID) :
                new ObjectParameter("SponsorID", typeof(int));
    
            var nameTitleParameter = nameTitle != null ?
                new ObjectParameter("NameTitle", nameTitle) :
                new ObjectParameter("NameTitle", typeof(string));
    
            var firstNameParameter = firstName != null ?
                new ObjectParameter("FirstName", firstName) :
                new ObjectParameter("FirstName", typeof(string));
    
            var lastNameParameter = lastName != null ?
                new ObjectParameter("LastName", lastName) :
                new ObjectParameter("LastName", typeof(string));
    
            var jobTitleParameter = jobTitle != null ?
                new ObjectParameter("JobTitle", jobTitle) :
                new ObjectParameter("JobTitle", typeof(string));
    
            var sponsorNameParameter = sponsorName != null ?
                new ObjectParameter("SponsorName", sponsorName) :
                new ObjectParameter("SponsorName", typeof(string));
    
            var emailParameter = email != null ?
                new ObjectParameter("Email", email) :
                new ObjectParameter("Email", typeof(string));
    
            var dayPhoneParameter = dayPhone != null ?
                new ObjectParameter("DayPhone", dayPhone) :
                new ObjectParameter("DayPhone", typeof(string));
    
            var customerTypeParameter = customerType.HasValue ?
                new ObjectParameter("CustomerType", customerType) :
                new ObjectParameter("CustomerType", typeof(int));
    
            var flag1Parameter = flag1.HasValue ?
                new ObjectParameter("Flag1", flag1) :
                new ObjectParameter("Flag1", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("LB_InsertEventRegistration", eventIDParameter, custIDParameter, sponsorIDParameter, nameTitleParameter, firstNameParameter, lastNameParameter, jobTitleParameter, sponsorNameParameter, emailParameter, dayPhoneParameter, customerTypeParameter, flag1Parameter, returnID, returnMessage);
        }
    
        public virtual int LB_UpdatePaymentHistoryEmailsSent()
        {
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("LB_UpdatePaymentHistoryEmailsSent");
        }
    
        public virtual int LB_UpdateRefundByCheck(Nullable<int> orderID, Nullable<System.DateTime> checkDate, Nullable<int> checkNumber, Nullable<decimal> refundAmount, string description, Nullable<int> adminID, ObjectParameter returnID, ObjectParameter returnMessage)
        {
            var orderIDParameter = orderID.HasValue ?
                new ObjectParameter("OrderID", orderID) :
                new ObjectParameter("OrderID", typeof(int));
    
            var checkDateParameter = checkDate.HasValue ?
                new ObjectParameter("CheckDate", checkDate) :
                new ObjectParameter("CheckDate", typeof(System.DateTime));
    
            var checkNumberParameter = checkNumber.HasValue ?
                new ObjectParameter("CheckNumber", checkNumber) :
                new ObjectParameter("CheckNumber", typeof(int));
    
            var refundAmountParameter = refundAmount.HasValue ?
                new ObjectParameter("RefundAmount", refundAmount) :
                new ObjectParameter("RefundAmount", typeof(decimal));
    
            var descriptionParameter = description != null ?
                new ObjectParameter("Description", description) :
                new ObjectParameter("Description", typeof(string));
    
            var adminIDParameter = adminID.HasValue ?
                new ObjectParameter("AdminID", adminID) :
                new ObjectParameter("AdminID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("LB_UpdateRefundByCheck", orderIDParameter, checkDateParameter, checkNumberParameter, refundAmountParameter, descriptionParameter, adminIDParameter, returnID, returnMessage);
        }
    
        public virtual int LB_InsertAutoShipPromotionalByCustID(Nullable<int> custID)
        {
            var custIDParameter = custID.HasValue ?
                new ObjectParameter("CustID", custID) :
                new ObjectParameter("CustID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("LB_InsertAutoShipPromotionalByCustID", custIDParameter);
        }
    
        public virtual int LB_UpdateChangeLogConfirm(Nullable<int> iD, ObjectParameter returnID, ObjectParameter returnMessage)
        {
            var iDParameter = iD.HasValue ?
                new ObjectParameter("ID", iD) :
                new ObjectParameter("ID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("LB_UpdateChangeLogConfirm", iDParameter, returnID, returnMessage);
        }
    
        public virtual int LB_DeleteAdminUser(Nullable<int> adminID)
        {
            var adminIDParameter = adminID.HasValue ?
                new ObjectParameter("AdminID", adminID) :
                new ObjectParameter("AdminID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("LB_DeleteAdminUser", adminIDParameter);
        }
    
        public virtual int LB_InsertMember(Nullable<int> customerType, string displayName, string nameTitle, string firstName, string lastName, string email, string address1, string address2, string city, string state, string postalCode, string companyPhone, string dayPhone, string mobile, string fax, string company, string taxID, Nullable<int> sponsorID, Nullable<int> secSponsorID, Nullable<int> parentID, Nullable<int> mainMemberItemID, Nullable<int> promotionID, string accountingID, Nullable<int> sourceID, string password, Nullable<System.DateTime> startDate, ObjectParameter returnCustID, ObjectParameter returnMessage)
        {
            var customerTypeParameter = customerType.HasValue ?
                new ObjectParameter("CustomerType", customerType) :
                new ObjectParameter("CustomerType", typeof(int));
    
            var displayNameParameter = displayName != null ?
                new ObjectParameter("DisplayName", displayName) :
                new ObjectParameter("DisplayName", typeof(string));
    
            var nameTitleParameter = nameTitle != null ?
                new ObjectParameter("NameTitle", nameTitle) :
                new ObjectParameter("NameTitle", typeof(string));
    
            var firstNameParameter = firstName != null ?
                new ObjectParameter("FirstName", firstName) :
                new ObjectParameter("FirstName", typeof(string));
    
            var lastNameParameter = lastName != null ?
                new ObjectParameter("LastName", lastName) :
                new ObjectParameter("LastName", typeof(string));
    
            var emailParameter = email != null ?
                new ObjectParameter("Email", email) :
                new ObjectParameter("Email", typeof(string));
    
            var address1Parameter = address1 != null ?
                new ObjectParameter("Address1", address1) :
                new ObjectParameter("Address1", typeof(string));
    
            var address2Parameter = address2 != null ?
                new ObjectParameter("Address2", address2) :
                new ObjectParameter("Address2", typeof(string));
    
            var cityParameter = city != null ?
                new ObjectParameter("City", city) :
                new ObjectParameter("City", typeof(string));
    
            var stateParameter = state != null ?
                new ObjectParameter("State", state) :
                new ObjectParameter("State", typeof(string));
    
            var postalCodeParameter = postalCode != null ?
                new ObjectParameter("PostalCode", postalCode) :
                new ObjectParameter("PostalCode", typeof(string));
    
            var companyPhoneParameter = companyPhone != null ?
                new ObjectParameter("CompanyPhone", companyPhone) :
                new ObjectParameter("CompanyPhone", typeof(string));
    
            var dayPhoneParameter = dayPhone != null ?
                new ObjectParameter("DayPhone", dayPhone) :
                new ObjectParameter("DayPhone", typeof(string));
    
            var mobileParameter = mobile != null ?
                new ObjectParameter("Mobile", mobile) :
                new ObjectParameter("Mobile", typeof(string));
    
            var faxParameter = fax != null ?
                new ObjectParameter("Fax", fax) :
                new ObjectParameter("Fax", typeof(string));
    
            var companyParameter = company != null ?
                new ObjectParameter("Company", company) :
                new ObjectParameter("Company", typeof(string));
    
            var taxIDParameter = taxID != null ?
                new ObjectParameter("TaxID", taxID) :
                new ObjectParameter("TaxID", typeof(string));
    
            var sponsorIDParameter = sponsorID.HasValue ?
                new ObjectParameter("SponsorID", sponsorID) :
                new ObjectParameter("SponsorID", typeof(int));
    
            var secSponsorIDParameter = secSponsorID.HasValue ?
                new ObjectParameter("SecSponsorID", secSponsorID) :
                new ObjectParameter("SecSponsorID", typeof(int));
    
            var parentIDParameter = parentID.HasValue ?
                new ObjectParameter("ParentID", parentID) :
                new ObjectParameter("ParentID", typeof(int));
    
            var mainMemberItemIDParameter = mainMemberItemID.HasValue ?
                new ObjectParameter("MainMemberItemID", mainMemberItemID) :
                new ObjectParameter("MainMemberItemID", typeof(int));
    
            var promotionIDParameter = promotionID.HasValue ?
                new ObjectParameter("PromotionID", promotionID) :
                new ObjectParameter("PromotionID", typeof(int));
    
            var accountingIDParameter = accountingID != null ?
                new ObjectParameter("AccountingID", accountingID) :
                new ObjectParameter("AccountingID", typeof(string));
    
            var sourceIDParameter = sourceID.HasValue ?
                new ObjectParameter("SourceID", sourceID) :
                new ObjectParameter("SourceID", typeof(int));
    
            var passwordParameter = password != null ?
                new ObjectParameter("Password", password) :
                new ObjectParameter("Password", typeof(string));
    
            var startDateParameter = startDate.HasValue ?
                new ObjectParameter("StartDate", startDate) :
                new ObjectParameter("StartDate", typeof(System.DateTime));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("LB_InsertMember", customerTypeParameter, displayNameParameter, nameTitleParameter, firstNameParameter, lastNameParameter, emailParameter, address1Parameter, address2Parameter, cityParameter, stateParameter, postalCodeParameter, companyPhoneParameter, dayPhoneParameter, mobileParameter, faxParameter, companyParameter, taxIDParameter, sponsorIDParameter, secSponsorIDParameter, parentIDParameter, mainMemberItemIDParameter, promotionIDParameter, accountingIDParameter, sourceIDParameter, passwordParameter, startDateParameter, returnCustID, returnMessage);
        }
    
        public virtual int LB_UpdateOrderHeaderListForPaymentTMP()
        {
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("LB_UpdateOrderHeaderListForPaymentTMP");
        }
    
        public virtual int LB_UpdateC_InfoStatusIDAppTrack(Nullable<int> custID, Nullable<int> statusID, string status, Nullable<int> adminID, string cancelReasonCode, string comments)
        {
            var custIDParameter = custID.HasValue ?
                new ObjectParameter("CustID", custID) :
                new ObjectParameter("CustID", typeof(int));
    
            var statusIDParameter = statusID.HasValue ?
                new ObjectParameter("StatusID", statusID) :
                new ObjectParameter("StatusID", typeof(int));
    
            var statusParameter = status != null ?
                new ObjectParameter("Status", status) :
                new ObjectParameter("Status", typeof(string));
    
            var adminIDParameter = adminID.HasValue ?
                new ObjectParameter("AdminID", adminID) :
                new ObjectParameter("AdminID", typeof(int));
    
            var cancelReasonCodeParameter = cancelReasonCode != null ?
                new ObjectParameter("CancelReasonCode", cancelReasonCode) :
                new ObjectParameter("CancelReasonCode", typeof(string));
    
            var commentsParameter = comments != null ?
                new ObjectParameter("Comments", comments) :
                new ObjectParameter("Comments", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("LB_UpdateC_InfoStatusIDAppTrack", custIDParameter, statusIDParameter, statusParameter, adminIDParameter, cancelReasonCodeParameter, commentsParameter);
        }
    
        public virtual int LB_InsertLocation(Nullable<int> customerType, string displayName, string nameTitle, string firstName, string lastName, string email, string address1, string address2, string city, string state, string postalCode, string companyPhone, string dayPhone, string mobile, string fax, string company, string taxID, Nullable<int> sponsorID, Nullable<int> secSponsorID, Nullable<int> parentID, Nullable<int> mainMemberItemID, Nullable<int> promotionID, string accountingID, Nullable<int> sourceID, string salesForceID, ObjectParameter returnCustID, ObjectParameter returnMessage)
        {
            var customerTypeParameter = customerType.HasValue ?
                new ObjectParameter("CustomerType", customerType) :
                new ObjectParameter("CustomerType", typeof(int));
    
            var displayNameParameter = displayName != null ?
                new ObjectParameter("DisplayName", displayName) :
                new ObjectParameter("DisplayName", typeof(string));
    
            var nameTitleParameter = nameTitle != null ?
                new ObjectParameter("NameTitle", nameTitle) :
                new ObjectParameter("NameTitle", typeof(string));
    
            var firstNameParameter = firstName != null ?
                new ObjectParameter("FirstName", firstName) :
                new ObjectParameter("FirstName", typeof(string));
    
            var lastNameParameter = lastName != null ?
                new ObjectParameter("LastName", lastName) :
                new ObjectParameter("LastName", typeof(string));
    
            var emailParameter = email != null ?
                new ObjectParameter("Email", email) :
                new ObjectParameter("Email", typeof(string));
    
            var address1Parameter = address1 != null ?
                new ObjectParameter("Address1", address1) :
                new ObjectParameter("Address1", typeof(string));
    
            var address2Parameter = address2 != null ?
                new ObjectParameter("Address2", address2) :
                new ObjectParameter("Address2", typeof(string));
    
            var cityParameter = city != null ?
                new ObjectParameter("City", city) :
                new ObjectParameter("City", typeof(string));
    
            var stateParameter = state != null ?
                new ObjectParameter("State", state) :
                new ObjectParameter("State", typeof(string));
    
            var postalCodeParameter = postalCode != null ?
                new ObjectParameter("PostalCode", postalCode) :
                new ObjectParameter("PostalCode", typeof(string));
    
            var companyPhoneParameter = companyPhone != null ?
                new ObjectParameter("CompanyPhone", companyPhone) :
                new ObjectParameter("CompanyPhone", typeof(string));
    
            var dayPhoneParameter = dayPhone != null ?
                new ObjectParameter("DayPhone", dayPhone) :
                new ObjectParameter("DayPhone", typeof(string));
    
            var mobileParameter = mobile != null ?
                new ObjectParameter("Mobile", mobile) :
                new ObjectParameter("Mobile", typeof(string));
    
            var faxParameter = fax != null ?
                new ObjectParameter("Fax", fax) :
                new ObjectParameter("Fax", typeof(string));
    
            var companyParameter = company != null ?
                new ObjectParameter("Company", company) :
                new ObjectParameter("Company", typeof(string));
    
            var taxIDParameter = taxID != null ?
                new ObjectParameter("TaxID", taxID) :
                new ObjectParameter("TaxID", typeof(string));
    
            var sponsorIDParameter = sponsorID.HasValue ?
                new ObjectParameter("SponsorID", sponsorID) :
                new ObjectParameter("SponsorID", typeof(int));
    
            var secSponsorIDParameter = secSponsorID.HasValue ?
                new ObjectParameter("SecSponsorID", secSponsorID) :
                new ObjectParameter("SecSponsorID", typeof(int));
    
            var parentIDParameter = parentID.HasValue ?
                new ObjectParameter("ParentID", parentID) :
                new ObjectParameter("ParentID", typeof(int));
    
            var mainMemberItemIDParameter = mainMemberItemID.HasValue ?
                new ObjectParameter("MainMemberItemID", mainMemberItemID) :
                new ObjectParameter("MainMemberItemID", typeof(int));
    
            var promotionIDParameter = promotionID.HasValue ?
                new ObjectParameter("PromotionID", promotionID) :
                new ObjectParameter("PromotionID", typeof(int));
    
            var accountingIDParameter = accountingID != null ?
                new ObjectParameter("AccountingID", accountingID) :
                new ObjectParameter("AccountingID", typeof(string));
    
            var sourceIDParameter = sourceID.HasValue ?
                new ObjectParameter("SourceID", sourceID) :
                new ObjectParameter("SourceID", typeof(int));
    
            var salesForceIDParameter = salesForceID != null ?
                new ObjectParameter("SalesForceID", salesForceID) :
                new ObjectParameter("SalesForceID", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("LB_InsertLocation", customerTypeParameter, displayNameParameter, nameTitleParameter, firstNameParameter, lastNameParameter, emailParameter, address1Parameter, address2Parameter, cityParameter, stateParameter, postalCodeParameter, companyPhoneParameter, dayPhoneParameter, mobileParameter, faxParameter, companyParameter, taxIDParameter, sponsorIDParameter, secSponsorIDParameter, parentIDParameter, mainMemberItemIDParameter, promotionIDParameter, accountingIDParameter, sourceIDParameter, salesForceIDParameter, returnCustID, returnMessage);
        }
    
        public virtual int LB_UpdatC_infoPrimaryContact(Nullable<int> custID, string nameTitle, string firstName, string lastname, string dayPhone, string mobile, string email, string licenseNumber, string oETracker)
        {
            var custIDParameter = custID.HasValue ?
                new ObjectParameter("CustID", custID) :
                new ObjectParameter("CustID", typeof(int));
    
            var nameTitleParameter = nameTitle != null ?
                new ObjectParameter("NameTitle", nameTitle) :
                new ObjectParameter("NameTitle", typeof(string));
    
            var firstNameParameter = firstName != null ?
                new ObjectParameter("FirstName", firstName) :
                new ObjectParameter("FirstName", typeof(string));
    
            var lastnameParameter = lastname != null ?
                new ObjectParameter("Lastname", lastname) :
                new ObjectParameter("Lastname", typeof(string));
    
            var dayPhoneParameter = dayPhone != null ?
                new ObjectParameter("DayPhone", dayPhone) :
                new ObjectParameter("DayPhone", typeof(string));
    
            var mobileParameter = mobile != null ?
                new ObjectParameter("Mobile", mobile) :
                new ObjectParameter("Mobile", typeof(string));
    
            var emailParameter = email != null ?
                new ObjectParameter("Email", email) :
                new ObjectParameter("Email", typeof(string));
    
            var licenseNumberParameter = licenseNumber != null ?
                new ObjectParameter("LicenseNumber", licenseNumber) :
                new ObjectParameter("LicenseNumber", typeof(string));
    
            var oETrackerParameter = oETracker != null ?
                new ObjectParameter("OETracker", oETracker) :
                new ObjectParameter("OETracker", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("LB_UpdatC_infoPrimaryContact", custIDParameter, nameTitleParameter, firstNameParameter, lastnameParameter, dayPhoneParameter, mobileParameter, emailParameter, licenseNumberParameter, oETrackerParameter);
        }
    
        public virtual int LB_UpdateLocationEditAccountBasic(Nullable<int> custID, string displayName, string nameTitle, string firstName, string lastName, string address1, string address2, string city, string state, string postalCode, string companyPhone, string dayPhone, string mobile, string fax, string email, ObjectParameter returnCustID, ObjectParameter returnMessage)
        {
            var custIDParameter = custID.HasValue ?
                new ObjectParameter("CustID", custID) :
                new ObjectParameter("CustID", typeof(int));
    
            var displayNameParameter = displayName != null ?
                new ObjectParameter("DisplayName", displayName) :
                new ObjectParameter("DisplayName", typeof(string));
    
            var nameTitleParameter = nameTitle != null ?
                new ObjectParameter("NameTitle", nameTitle) :
                new ObjectParameter("NameTitle", typeof(string));
    
            var firstNameParameter = firstName != null ?
                new ObjectParameter("FirstName", firstName) :
                new ObjectParameter("FirstName", typeof(string));
    
            var lastNameParameter = lastName != null ?
                new ObjectParameter("LastName", lastName) :
                new ObjectParameter("LastName", typeof(string));
    
            var address1Parameter = address1 != null ?
                new ObjectParameter("Address1", address1) :
                new ObjectParameter("Address1", typeof(string));
    
            var address2Parameter = address2 != null ?
                new ObjectParameter("Address2", address2) :
                new ObjectParameter("Address2", typeof(string));
    
            var cityParameter = city != null ?
                new ObjectParameter("City", city) :
                new ObjectParameter("City", typeof(string));
    
            var stateParameter = state != null ?
                new ObjectParameter("State", state) :
                new ObjectParameter("State", typeof(string));
    
            var postalCodeParameter = postalCode != null ?
                new ObjectParameter("PostalCode", postalCode) :
                new ObjectParameter("PostalCode", typeof(string));
    
            var companyPhoneParameter = companyPhone != null ?
                new ObjectParameter("CompanyPhone", companyPhone) :
                new ObjectParameter("CompanyPhone", typeof(string));
    
            var dayPhoneParameter = dayPhone != null ?
                new ObjectParameter("DayPhone", dayPhone) :
                new ObjectParameter("DayPhone", typeof(string));
    
            var mobileParameter = mobile != null ?
                new ObjectParameter("Mobile", mobile) :
                new ObjectParameter("Mobile", typeof(string));
    
            var faxParameter = fax != null ?
                new ObjectParameter("Fax", fax) :
                new ObjectParameter("Fax", typeof(string));
    
            var emailParameter = email != null ?
                new ObjectParameter("Email", email) :
                new ObjectParameter("Email", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("LB_UpdateLocationEditAccountBasic", custIDParameter, displayNameParameter, nameTitleParameter, firstNameParameter, lastNameParameter, address1Parameter, address2Parameter, cityParameter, stateParameter, postalCodeParameter, companyPhoneParameter, dayPhoneParameter, mobileParameter, faxParameter, emailParameter, returnCustID, returnMessage);
        }
    
        public virtual int LB_InsertPaymentMethodCIMShippingProfile(Nullable<int> custID, string cardHolderName, string cardType, string cardNumberFirstSix, string cardNumberLastFour, string cardExpMonth, string cardExpYear, string paymentProfileID, string customerProfileID, string shippingProfileID)
        {
            var custIDParameter = custID.HasValue ?
                new ObjectParameter("CustID", custID) :
                new ObjectParameter("CustID", typeof(int));
    
            var cardHolderNameParameter = cardHolderName != null ?
                new ObjectParameter("CardHolderName", cardHolderName) :
                new ObjectParameter("CardHolderName", typeof(string));
    
            var cardTypeParameter = cardType != null ?
                new ObjectParameter("CardType", cardType) :
                new ObjectParameter("CardType", typeof(string));
    
            var cardNumberFirstSixParameter = cardNumberFirstSix != null ?
                new ObjectParameter("CardNumberFirstSix", cardNumberFirstSix) :
                new ObjectParameter("CardNumberFirstSix", typeof(string));
    
            var cardNumberLastFourParameter = cardNumberLastFour != null ?
                new ObjectParameter("CardNumberLastFour", cardNumberLastFour) :
                new ObjectParameter("CardNumberLastFour", typeof(string));
    
            var cardExpMonthParameter = cardExpMonth != null ?
                new ObjectParameter("CardExpMonth", cardExpMonth) :
                new ObjectParameter("CardExpMonth", typeof(string));
    
            var cardExpYearParameter = cardExpYear != null ?
                new ObjectParameter("CardExpYear", cardExpYear) :
                new ObjectParameter("CardExpYear", typeof(string));
    
            var paymentProfileIDParameter = paymentProfileID != null ?
                new ObjectParameter("PaymentProfileID", paymentProfileID) :
                new ObjectParameter("PaymentProfileID", typeof(string));
    
            var customerProfileIDParameter = customerProfileID != null ?
                new ObjectParameter("CustomerProfileID", customerProfileID) :
                new ObjectParameter("CustomerProfileID", typeof(string));
    
            var shippingProfileIDParameter = shippingProfileID != null ?
                new ObjectParameter("ShippingProfileID", shippingProfileID) :
                new ObjectParameter("ShippingProfileID", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("LB_InsertPaymentMethodCIMShippingProfile", custIDParameter, cardHolderNameParameter, cardTypeParameter, cardNumberFirstSixParameter, cardNumberLastFourParameter, cardExpMonthParameter, cardExpYearParameter, paymentProfileIDParameter, customerProfileIDParameter, shippingProfileIDParameter);
        }
    
        public virtual int LB_UpdatePaymentMethodShippingProfileID(Nullable<int> custID, string shippingProfileID)
        {
            var custIDParameter = custID.HasValue ?
                new ObjectParameter("CustID", custID) :
                new ObjectParameter("CustID", typeof(int));
    
            var shippingProfileIDParameter = shippingProfileID != null ?
                new ObjectParameter("ShippingProfileID", shippingProfileID) :
                new ObjectParameter("ShippingProfileID", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("LB_UpdatePaymentMethodShippingProfileID", custIDParameter, shippingProfileIDParameter);
        }
    
        public virtual int LB_UpdateC_InfoCustomerProfileID(Nullable<int> custID, Nullable<int> customerProfileID)
        {
            var custIDParameter = custID.HasValue ?
                new ObjectParameter("CustID", custID) :
                new ObjectParameter("CustID", typeof(int));
    
            var customerProfileIDParameter = customerProfileID.HasValue ?
                new ObjectParameter("CustomerProfileID", customerProfileID) :
                new ObjectParameter("CustomerProfileID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("LB_UpdateC_InfoCustomerProfileID", custIDParameter, customerProfileIDParameter);
        }
    
        public virtual int LB_InsertFormSubmitLog(string formType, string msgTextBlock, Nullable<int> custID, string formResult)
        {
            var formTypeParameter = formType != null ?
                new ObjectParameter("FormType", formType) :
                new ObjectParameter("FormType", typeof(string));
    
            var msgTextBlockParameter = msgTextBlock != null ?
                new ObjectParameter("MsgTextBlock", msgTextBlock) :
                new ObjectParameter("MsgTextBlock", typeof(string));
    
            var custIDParameter = custID.HasValue ?
                new ObjectParameter("CustID", custID) :
                new ObjectParameter("CustID", typeof(int));
    
            var formResultParameter = formResult != null ?
                new ObjectParameter("FormResult", formResult) :
                new ObjectParameter("FormResult", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("LB_InsertFormSubmitLog", formTypeParameter, msgTextBlockParameter, custIDParameter, formResultParameter);
        }
    
        public virtual int LB_UpdateRefundPaymentFailed(Nullable<int> paymentID, Nullable<decimal> refundAmount, string description, string responseString, Nullable<int> adminID, ObjectParameter returnID, ObjectParameter returnMessage)
        {
            var paymentIDParameter = paymentID.HasValue ?
                new ObjectParameter("PaymentID", paymentID) :
                new ObjectParameter("PaymentID", typeof(int));
    
            var refundAmountParameter = refundAmount.HasValue ?
                new ObjectParameter("RefundAmount", refundAmount) :
                new ObjectParameter("RefundAmount", typeof(decimal));
    
            var descriptionParameter = description != null ?
                new ObjectParameter("Description", description) :
                new ObjectParameter("Description", typeof(string));
    
            var responseStringParameter = responseString != null ?
                new ObjectParameter("ResponseString", responseString) :
                new ObjectParameter("ResponseString", typeof(string));
    
            var adminIDParameter = adminID.HasValue ?
                new ObjectParameter("AdminID", adminID) :
                new ObjectParameter("AdminID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("LB_UpdateRefundPaymentFailed", paymentIDParameter, refundAmountParameter, descriptionParameter, responseStringParameter, adminIDParameter, returnID, returnMessage);
        }
    
        public virtual int LB_UpdatePaymentHistory(Nullable<int> paymentID, Nullable<int> responseCode, string responseString, string status, string transactionID, Nullable<int> statusID, Nullable<int> adminID)
        {
            var paymentIDParameter = paymentID.HasValue ?
                new ObjectParameter("PaymentID", paymentID) :
                new ObjectParameter("PaymentID", typeof(int));
    
            var responseCodeParameter = responseCode.HasValue ?
                new ObjectParameter("ResponseCode", responseCode) :
                new ObjectParameter("ResponseCode", typeof(int));
    
            var responseStringParameter = responseString != null ?
                new ObjectParameter("ResponseString", responseString) :
                new ObjectParameter("ResponseString", typeof(string));
    
            var statusParameter = status != null ?
                new ObjectParameter("Status", status) :
                new ObjectParameter("Status", typeof(string));
    
            var transactionIDParameter = transactionID != null ?
                new ObjectParameter("TransactionID", transactionID) :
                new ObjectParameter("TransactionID", typeof(string));
    
            var statusIDParameter = statusID.HasValue ?
                new ObjectParameter("StatusID", statusID) :
                new ObjectParameter("StatusID", typeof(int));
    
            var adminIDParameter = adminID.HasValue ?
                new ObjectParameter("AdminID", adminID) :
                new ObjectParameter("AdminID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("LB_UpdatePaymentHistory", paymentIDParameter, responseCodeParameter, responseStringParameter, statusParameter, transactionIDParameter, statusIDParameter, adminIDParameter);
        }
    
        public virtual int LB_InsertContactMemberReferral(Nullable<int> sponsorID, string firstName, string lastName, string phone, string email, string source, Nullable<int> customerType)
        {
            var sponsorIDParameter = sponsorID.HasValue ?
                new ObjectParameter("SponsorID", sponsorID) :
                new ObjectParameter("SponsorID", typeof(int));
    
            var firstNameParameter = firstName != null ?
                new ObjectParameter("FirstName", firstName) :
                new ObjectParameter("FirstName", typeof(string));
    
            var lastNameParameter = lastName != null ?
                new ObjectParameter("LastName", lastName) :
                new ObjectParameter("LastName", typeof(string));
    
            var phoneParameter = phone != null ?
                new ObjectParameter("Phone", phone) :
                new ObjectParameter("Phone", typeof(string));
    
            var emailParameter = email != null ?
                new ObjectParameter("Email", email) :
                new ObjectParameter("Email", typeof(string));
    
            var sourceParameter = source != null ?
                new ObjectParameter("Source", source) :
                new ObjectParameter("Source", typeof(string));
    
            var customerTypeParameter = customerType.HasValue ?
                new ObjectParameter("CustomerType", customerType) :
                new ObjectParameter("CustomerType", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("LB_InsertContactMemberReferral", sponsorIDParameter, firstNameParameter, lastNameParameter, phoneParameter, emailParameter, sourceParameter, customerTypeParameter);
        }
    
        public virtual int LB_InsertLocationV2(Nullable<int> customerType, string displayName, string nameTitle, string firstName, string lastName, string email, string address1, string address2, string city, string state, string postalCode, string companyPhone, string dayPhone, string mobile, string fax, string company, string taxID, Nullable<int> sponsorID, Nullable<int> secSponsorID, Nullable<int> parentID, Nullable<int> mainMemberItemID, Nullable<int> promotionID, string accountingID, Nullable<int> sourceID, string salesForceID, ObjectParameter returnCustID, ObjectParameter returnMessage)
        {
            var customerTypeParameter = customerType.HasValue ?
                new ObjectParameter("CustomerType", customerType) :
                new ObjectParameter("CustomerType", typeof(int));
    
            var displayNameParameter = displayName != null ?
                new ObjectParameter("DisplayName", displayName) :
                new ObjectParameter("DisplayName", typeof(string));
    
            var nameTitleParameter = nameTitle != null ?
                new ObjectParameter("NameTitle", nameTitle) :
                new ObjectParameter("NameTitle", typeof(string));
    
            var firstNameParameter = firstName != null ?
                new ObjectParameter("FirstName", firstName) :
                new ObjectParameter("FirstName", typeof(string));
    
            var lastNameParameter = lastName != null ?
                new ObjectParameter("LastName", lastName) :
                new ObjectParameter("LastName", typeof(string));
    
            var emailParameter = email != null ?
                new ObjectParameter("Email", email) :
                new ObjectParameter("Email", typeof(string));
    
            var address1Parameter = address1 != null ?
                new ObjectParameter("Address1", address1) :
                new ObjectParameter("Address1", typeof(string));
    
            var address2Parameter = address2 != null ?
                new ObjectParameter("Address2", address2) :
                new ObjectParameter("Address2", typeof(string));
    
            var cityParameter = city != null ?
                new ObjectParameter("City", city) :
                new ObjectParameter("City", typeof(string));
    
            var stateParameter = state != null ?
                new ObjectParameter("State", state) :
                new ObjectParameter("State", typeof(string));
    
            var postalCodeParameter = postalCode != null ?
                new ObjectParameter("PostalCode", postalCode) :
                new ObjectParameter("PostalCode", typeof(string));
    
            var companyPhoneParameter = companyPhone != null ?
                new ObjectParameter("CompanyPhone", companyPhone) :
                new ObjectParameter("CompanyPhone", typeof(string));
    
            var dayPhoneParameter = dayPhone != null ?
                new ObjectParameter("DayPhone", dayPhone) :
                new ObjectParameter("DayPhone", typeof(string));
    
            var mobileParameter = mobile != null ?
                new ObjectParameter("Mobile", mobile) :
                new ObjectParameter("Mobile", typeof(string));
    
            var faxParameter = fax != null ?
                new ObjectParameter("Fax", fax) :
                new ObjectParameter("Fax", typeof(string));
    
            var companyParameter = company != null ?
                new ObjectParameter("Company", company) :
                new ObjectParameter("Company", typeof(string));
    
            var taxIDParameter = taxID != null ?
                new ObjectParameter("TaxID", taxID) :
                new ObjectParameter("TaxID", typeof(string));
    
            var sponsorIDParameter = sponsorID.HasValue ?
                new ObjectParameter("SponsorID", sponsorID) :
                new ObjectParameter("SponsorID", typeof(int));
    
            var secSponsorIDParameter = secSponsorID.HasValue ?
                new ObjectParameter("SecSponsorID", secSponsorID) :
                new ObjectParameter("SecSponsorID", typeof(int));
    
            var parentIDParameter = parentID.HasValue ?
                new ObjectParameter("ParentID", parentID) :
                new ObjectParameter("ParentID", typeof(int));
    
            var mainMemberItemIDParameter = mainMemberItemID.HasValue ?
                new ObjectParameter("MainMemberItemID", mainMemberItemID) :
                new ObjectParameter("MainMemberItemID", typeof(int));
    
            var promotionIDParameter = promotionID.HasValue ?
                new ObjectParameter("PromotionID", promotionID) :
                new ObjectParameter("PromotionID", typeof(int));
    
            var accountingIDParameter = accountingID != null ?
                new ObjectParameter("AccountingID", accountingID) :
                new ObjectParameter("AccountingID", typeof(string));
    
            var sourceIDParameter = sourceID.HasValue ?
                new ObjectParameter("SourceID", sourceID) :
                new ObjectParameter("SourceID", typeof(int));
    
            var salesForceIDParameter = salesForceID != null ?
                new ObjectParameter("SalesForceID", salesForceID) :
                new ObjectParameter("SalesForceID", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("LB_InsertLocationV2", customerTypeParameter, displayNameParameter, nameTitleParameter, firstNameParameter, lastNameParameter, emailParameter, address1Parameter, address2Parameter, cityParameter, stateParameter, postalCodeParameter, companyPhoneParameter, dayPhoneParameter, mobileParameter, faxParameter, companyParameter, taxIDParameter, sponsorIDParameter, secSponsorIDParameter, parentIDParameter, mainMemberItemIDParameter, promotionIDParameter, accountingIDParameter, sourceIDParameter, salesForceIDParameter, returnCustID, returnMessage);
        }
    
        public virtual int LB_CancelLocation(Nullable<int> custID, Nullable<int> adminID, ObjectParameter returnCustID, ObjectParameter returnMessage)
        {
            var custIDParameter = custID.HasValue ?
                new ObjectParameter("CustID", custID) :
                new ObjectParameter("CustID", typeof(int));
    
            var adminIDParameter = adminID.HasValue ?
                new ObjectParameter("AdminID", adminID) :
                new ObjectParameter("AdminID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("LB_CancelLocation", custIDParameter, adminIDParameter, returnCustID, returnMessage);
        }
    
        public virtual int LB_UpdateC_InfoAdditionalInfo(Nullable<int> custID, string enrollmentReason, string practiceSize, string practiceSoftware, string siteName, Nullable<int> flag1)
        {
            var custIDParameter = custID.HasValue ?
                new ObjectParameter("CustID", custID) :
                new ObjectParameter("CustID", typeof(int));
    
            var enrollmentReasonParameter = enrollmentReason != null ?
                new ObjectParameter("EnrollmentReason", enrollmentReason) :
                new ObjectParameter("EnrollmentReason", typeof(string));
    
            var practiceSizeParameter = practiceSize != null ?
                new ObjectParameter("PracticeSize", practiceSize) :
                new ObjectParameter("PracticeSize", typeof(string));
    
            var practiceSoftwareParameter = practiceSoftware != null ?
                new ObjectParameter("PracticeSoftware", practiceSoftware) :
                new ObjectParameter("PracticeSoftware", typeof(string));
    
            var siteNameParameter = siteName != null ?
                new ObjectParameter("SiteName", siteName) :
                new ObjectParameter("SiteName", typeof(string));
    
            var flag1Parameter = flag1.HasValue ?
                new ObjectParameter("Flag1", flag1) :
                new ObjectParameter("Flag1", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("LB_UpdateC_InfoAdditionalInfo", custIDParameter, enrollmentReasonParameter, practiceSizeParameter, practiceSoftwareParameter, siteNameParameter, flag1Parameter);
        }
    
        public virtual int LB_UpdatC_infoPrimaryContact1(Nullable<int> custID, string nameTitle, string firstName, string lastname, string dayPhone, string mobile, string email, string licenseNumber, string oETracker, ObjectParameter returnCustID, ObjectParameter returnMessage)
        {
            var custIDParameter = custID.HasValue ?
                new ObjectParameter("CustID", custID) :
                new ObjectParameter("CustID", typeof(int));
    
            var nameTitleParameter = nameTitle != null ?
                new ObjectParameter("NameTitle", nameTitle) :
                new ObjectParameter("NameTitle", typeof(string));
    
            var firstNameParameter = firstName != null ?
                new ObjectParameter("FirstName", firstName) :
                new ObjectParameter("FirstName", typeof(string));
    
            var lastnameParameter = lastname != null ?
                new ObjectParameter("Lastname", lastname) :
                new ObjectParameter("Lastname", typeof(string));
    
            var dayPhoneParameter = dayPhone != null ?
                new ObjectParameter("DayPhone", dayPhone) :
                new ObjectParameter("DayPhone", typeof(string));
    
            var mobileParameter = mobile != null ?
                new ObjectParameter("Mobile", mobile) :
                new ObjectParameter("Mobile", typeof(string));
    
            var emailParameter = email != null ?
                new ObjectParameter("Email", email) :
                new ObjectParameter("Email", typeof(string));
    
            var licenseNumberParameter = licenseNumber != null ?
                new ObjectParameter("LicenseNumber", licenseNumber) :
                new ObjectParameter("LicenseNumber", typeof(string));
    
            var oETrackerParameter = oETracker != null ?
                new ObjectParameter("OETracker", oETracker) :
                new ObjectParameter("OETracker", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("LB_UpdatC_infoPrimaryContact1", custIDParameter, nameTitleParameter, firstNameParameter, lastnameParameter, dayPhoneParameter, mobileParameter, emailParameter, licenseNumberParameter, oETrackerParameter, returnCustID, returnMessage);
        }
    
        public virtual int LB_UpdateC_infoPrimaryContact(Nullable<int> custID, string nameTitle, string firstName, string lastname, string dayPhone, string email, string licenseNumber, string oETracker, ObjectParameter returnCustID, ObjectParameter returnMessage)
        {
            var custIDParameter = custID.HasValue ?
                new ObjectParameter("CustID", custID) :
                new ObjectParameter("CustID", typeof(int));
    
            var nameTitleParameter = nameTitle != null ?
                new ObjectParameter("NameTitle", nameTitle) :
                new ObjectParameter("NameTitle", typeof(string));
    
            var firstNameParameter = firstName != null ?
                new ObjectParameter("FirstName", firstName) :
                new ObjectParameter("FirstName", typeof(string));
    
            var lastnameParameter = lastname != null ?
                new ObjectParameter("Lastname", lastname) :
                new ObjectParameter("Lastname", typeof(string));
    
            var dayPhoneParameter = dayPhone != null ?
                new ObjectParameter("DayPhone", dayPhone) :
                new ObjectParameter("DayPhone", typeof(string));
    
            var emailParameter = email != null ?
                new ObjectParameter("Email", email) :
                new ObjectParameter("Email", typeof(string));
    
            var licenseNumberParameter = licenseNumber != null ?
                new ObjectParameter("LicenseNumber", licenseNumber) :
                new ObjectParameter("LicenseNumber", typeof(string));
    
            var oETrackerParameter = oETracker != null ?
                new ObjectParameter("OETracker", oETracker) :
                new ObjectParameter("OETracker", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("LB_UpdateC_infoPrimaryContact", custIDParameter, nameTitleParameter, firstNameParameter, lastnameParameter, dayPhoneParameter, emailParameter, licenseNumberParameter, oETrackerParameter, returnCustID, returnMessage);
        }
    
        public virtual int LB_UpdateC_TreeUplineID(Nullable<int> custID, Nullable<int> uplineID, Nullable<int> treeID)
        {
            var custIDParameter = custID.HasValue ?
                new ObjectParameter("CustID", custID) :
                new ObjectParameter("CustID", typeof(int));
    
            var uplineIDParameter = uplineID.HasValue ?
                new ObjectParameter("UplineID", uplineID) :
                new ObjectParameter("UplineID", typeof(int));
    
            var treeIDParameter = treeID.HasValue ?
                new ObjectParameter("TreeID", treeID) :
                new ObjectParameter("TreeID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("LB_UpdateC_TreeUplineID", custIDParameter, uplineIDParameter, treeIDParameter);
        }
    
        public virtual int LB_InsertContact(string contactFirstName, string contactLastName, string contactDisplayName, string contactEmail, string contactPhone, string contactSubject, string contactMessage, string contactSource)
        {
            var contactFirstNameParameter = contactFirstName != null ?
                new ObjectParameter("contactFirstName", contactFirstName) :
                new ObjectParameter("contactFirstName", typeof(string));
    
            var contactLastNameParameter = contactLastName != null ?
                new ObjectParameter("contactLastName", contactLastName) :
                new ObjectParameter("contactLastName", typeof(string));
    
            var contactDisplayNameParameter = contactDisplayName != null ?
                new ObjectParameter("contactDisplayName", contactDisplayName) :
                new ObjectParameter("contactDisplayName", typeof(string));
    
            var contactEmailParameter = contactEmail != null ?
                new ObjectParameter("contactEmail", contactEmail) :
                new ObjectParameter("contactEmail", typeof(string));
    
            var contactPhoneParameter = contactPhone != null ?
                new ObjectParameter("contactPhone", contactPhone) :
                new ObjectParameter("contactPhone", typeof(string));
    
            var contactSubjectParameter = contactSubject != null ?
                new ObjectParameter("contactSubject", contactSubject) :
                new ObjectParameter("contactSubject", typeof(string));
    
            var contactMessageParameter = contactMessage != null ?
                new ObjectParameter("contactMessage", contactMessage) :
                new ObjectParameter("contactMessage", typeof(string));
    
            var contactSourceParameter = contactSource != null ?
                new ObjectParameter("contactSource", contactSource) :
                new ObjectParameter("contactSource", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("LB_InsertContact", contactFirstNameParameter, contactLastNameParameter, contactDisplayNameParameter, contactEmailParameter, contactPhoneParameter, contactSubjectParameter, contactMessageParameter, contactSourceParameter);
        }
    
        public virtual int LB_UpdateContractHeader(Nullable<int> contractID, Nullable<int> custID, string contractType, string contractTitle, string contractDescription, Nullable<System.DateTime> effectiveDate, Nullable<System.DateTime> expirationDate, Nullable<System.DateTime> signatureDate, Nullable<int> exclusivityFlag, string exclusivityDescription, string specialTerms, Nullable<int> adminOnly, Nullable<int> adminID, ObjectParameter returnID, ObjectParameter returnMessage)
        {
            var contractIDParameter = contractID.HasValue ?
                new ObjectParameter("ContractID", contractID) :
                new ObjectParameter("ContractID", typeof(int));
    
            var custIDParameter = custID.HasValue ?
                new ObjectParameter("CustID", custID) :
                new ObjectParameter("CustID", typeof(int));
    
            var contractTypeParameter = contractType != null ?
                new ObjectParameter("ContractType", contractType) :
                new ObjectParameter("ContractType", typeof(string));
    
            var contractTitleParameter = contractTitle != null ?
                new ObjectParameter("ContractTitle", contractTitle) :
                new ObjectParameter("ContractTitle", typeof(string));
    
            var contractDescriptionParameter = contractDescription != null ?
                new ObjectParameter("ContractDescription", contractDescription) :
                new ObjectParameter("ContractDescription", typeof(string));
    
            var effectiveDateParameter = effectiveDate.HasValue ?
                new ObjectParameter("EffectiveDate", effectiveDate) :
                new ObjectParameter("EffectiveDate", typeof(System.DateTime));
    
            var expirationDateParameter = expirationDate.HasValue ?
                new ObjectParameter("ExpirationDate", expirationDate) :
                new ObjectParameter("ExpirationDate", typeof(System.DateTime));
    
            var signatureDateParameter = signatureDate.HasValue ?
                new ObjectParameter("SignatureDate", signatureDate) :
                new ObjectParameter("SignatureDate", typeof(System.DateTime));
    
            var exclusivityFlagParameter = exclusivityFlag.HasValue ?
                new ObjectParameter("ExclusivityFlag", exclusivityFlag) :
                new ObjectParameter("ExclusivityFlag", typeof(int));
    
            var exclusivityDescriptionParameter = exclusivityDescription != null ?
                new ObjectParameter("ExclusivityDescription", exclusivityDescription) :
                new ObjectParameter("ExclusivityDescription", typeof(string));
    
            var specialTermsParameter = specialTerms != null ?
                new ObjectParameter("SpecialTerms", specialTerms) :
                new ObjectParameter("SpecialTerms", typeof(string));
    
            var adminOnlyParameter = adminOnly.HasValue ?
                new ObjectParameter("AdminOnly", adminOnly) :
                new ObjectParameter("AdminOnly", typeof(int));
    
            var adminIDParameter = adminID.HasValue ?
                new ObjectParameter("AdminID", adminID) :
                new ObjectParameter("AdminID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("LB_UpdateContractHeader", contractIDParameter, custIDParameter, contractTypeParameter, contractTitleParameter, contractDescriptionParameter, effectiveDateParameter, expirationDateParameter, signatureDateParameter, exclusivityFlagParameter, exclusivityDescriptionParameter, specialTermsParameter, adminOnlyParameter, adminIDParameter, returnID, returnMessage);
        }
    
        public virtual int LB_DeleteContractDetail(Nullable<int> contractDetailID, Nullable<int> adminID)
        {
            var contractDetailIDParameter = contractDetailID.HasValue ?
                new ObjectParameter("ContractDetailID", contractDetailID) :
                new ObjectParameter("ContractDetailID", typeof(int));
    
            var adminIDParameter = adminID.HasValue ?
                new ObjectParameter("AdminID", adminID) :
                new ObjectParameter("AdminID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("LB_DeleteContractDetail", contractDetailIDParameter, adminIDParameter);
        }
    
        public virtual int LB_InsertContractDetail(Nullable<int> contractID, string detailType, string detailDescription, Nullable<decimal> contractAmount, Nullable<decimal> contractPercent, Nullable<decimal> projectedAmount, Nullable<int> adminID, ObjectParameter returnID, ObjectParameter returnMessage)
        {
            var contractIDParameter = contractID.HasValue ?
                new ObjectParameter("ContractID", contractID) :
                new ObjectParameter("ContractID", typeof(int));
    
            var detailTypeParameter = detailType != null ?
                new ObjectParameter("DetailType", detailType) :
                new ObjectParameter("DetailType", typeof(string));
    
            var detailDescriptionParameter = detailDescription != null ?
                new ObjectParameter("DetailDescription", detailDescription) :
                new ObjectParameter("DetailDescription", typeof(string));
    
            var contractAmountParameter = contractAmount.HasValue ?
                new ObjectParameter("ContractAmount", contractAmount) :
                new ObjectParameter("ContractAmount", typeof(decimal));
    
            var contractPercentParameter = contractPercent.HasValue ?
                new ObjectParameter("ContractPercent", contractPercent) :
                new ObjectParameter("ContractPercent", typeof(decimal));
    
            var projectedAmountParameter = projectedAmount.HasValue ?
                new ObjectParameter("ProjectedAmount", projectedAmount) :
                new ObjectParameter("ProjectedAmount", typeof(decimal));
    
            var adminIDParameter = adminID.HasValue ?
                new ObjectParameter("AdminID", adminID) :
                new ObjectParameter("AdminID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("LB_InsertContractDetail", contractIDParameter, detailTypeParameter, detailDescriptionParameter, contractAmountParameter, contractPercentParameter, projectedAmountParameter, adminIDParameter, returnID, returnMessage);
        }
    
        public virtual int LB_UpdateContractDetail(Nullable<int> contractDetailID, string detailDescription, Nullable<decimal> contractAmount, Nullable<decimal> contractPercent, Nullable<decimal> projectedAmount, Nullable<int> adminID, ObjectParameter returnID, ObjectParameter returnMessage)
        {
            var contractDetailIDParameter = contractDetailID.HasValue ?
                new ObjectParameter("ContractDetailID", contractDetailID) :
                new ObjectParameter("ContractDetailID", typeof(int));
    
            var detailDescriptionParameter = detailDescription != null ?
                new ObjectParameter("DetailDescription", detailDescription) :
                new ObjectParameter("DetailDescription", typeof(string));
    
            var contractAmountParameter = contractAmount.HasValue ?
                new ObjectParameter("ContractAmount", contractAmount) :
                new ObjectParameter("ContractAmount", typeof(decimal));
    
            var contractPercentParameter = contractPercent.HasValue ?
                new ObjectParameter("ContractPercent", contractPercent) :
                new ObjectParameter("ContractPercent", typeof(decimal));
    
            var projectedAmountParameter = projectedAmount.HasValue ?
                new ObjectParameter("ProjectedAmount", projectedAmount) :
                new ObjectParameter("ProjectedAmount", typeof(decimal));
    
            var adminIDParameter = adminID.HasValue ?
                new ObjectParameter("AdminID", adminID) :
                new ObjectParameter("AdminID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("LB_UpdateContractDetail", contractDetailIDParameter, detailDescriptionParameter, contractAmountParameter, contractPercentParameter, projectedAmountParameter, adminIDParameter, returnID, returnMessage);
        }
    
        public virtual int LB_InsertContractDocument(Nullable<int> contractID, string fileName, string path, string documentType, string documentTitle, string documentName, string documentDescription, Nullable<int> adminID, ObjectParameter returnID, ObjectParameter returnMessage)
        {
            var contractIDParameter = contractID.HasValue ?
                new ObjectParameter("ContractID", contractID) :
                new ObjectParameter("ContractID", typeof(int));
    
            var fileNameParameter = fileName != null ?
                new ObjectParameter("FileName", fileName) :
                new ObjectParameter("FileName", typeof(string));
    
            var pathParameter = path != null ?
                new ObjectParameter("Path", path) :
                new ObjectParameter("Path", typeof(string));
    
            var documentTypeParameter = documentType != null ?
                new ObjectParameter("DocumentType", documentType) :
                new ObjectParameter("DocumentType", typeof(string));
    
            var documentTitleParameter = documentTitle != null ?
                new ObjectParameter("DocumentTitle", documentTitle) :
                new ObjectParameter("DocumentTitle", typeof(string));
    
            var documentNameParameter = documentName != null ?
                new ObjectParameter("DocumentName", documentName) :
                new ObjectParameter("DocumentName", typeof(string));
    
            var documentDescriptionParameter = documentDescription != null ?
                new ObjectParameter("DocumentDescription", documentDescription) :
                new ObjectParameter("DocumentDescription", typeof(string));
    
            var adminIDParameter = adminID.HasValue ?
                new ObjectParameter("AdminID", adminID) :
                new ObjectParameter("AdminID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("LB_InsertContractDocument", contractIDParameter, fileNameParameter, pathParameter, documentTypeParameter, documentTitleParameter, documentNameParameter, documentDescriptionParameter, adminIDParameter, returnID, returnMessage);
        }
    
        public virtual int LB_UpdateContractDocument(Nullable<int> contractID, Nullable<int> documentID, string documentType, string documentTitle, string documentName, string documentDescription, Nullable<int> adminID, ObjectParameter returnID, ObjectParameter returnMessage)
        {
            var contractIDParameter = contractID.HasValue ?
                new ObjectParameter("ContractID", contractID) :
                new ObjectParameter("ContractID", typeof(int));
    
            var documentIDParameter = documentID.HasValue ?
                new ObjectParameter("DocumentID", documentID) :
                new ObjectParameter("DocumentID", typeof(int));
    
            var documentTypeParameter = documentType != null ?
                new ObjectParameter("DocumentType", documentType) :
                new ObjectParameter("DocumentType", typeof(string));
    
            var documentTitleParameter = documentTitle != null ?
                new ObjectParameter("DocumentTitle", documentTitle) :
                new ObjectParameter("DocumentTitle", typeof(string));
    
            var documentNameParameter = documentName != null ?
                new ObjectParameter("DocumentName", documentName) :
                new ObjectParameter("DocumentName", typeof(string));
    
            var documentDescriptionParameter = documentDescription != null ?
                new ObjectParameter("DocumentDescription", documentDescription) :
                new ObjectParameter("DocumentDescription", typeof(string));
    
            var adminIDParameter = adminID.HasValue ?
                new ObjectParameter("AdminID", adminID) :
                new ObjectParameter("AdminID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("LB_UpdateContractDocument", contractIDParameter, documentIDParameter, documentTypeParameter, documentTitleParameter, documentNameParameter, documentDescriptionParameter, adminIDParameter, returnID, returnMessage);
        }
    
        public virtual int LB_DeleteContractDocument(Nullable<int> documentID, Nullable<int> adminID)
        {
            var documentIDParameter = documentID.HasValue ?
                new ObjectParameter("DocumentID", documentID) :
                new ObjectParameter("DocumentID", typeof(int));
    
            var adminIDParameter = adminID.HasValue ?
                new ObjectParameter("AdminID", adminID) :
                new ObjectParameter("AdminID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("LB_DeleteContractDocument", documentIDParameter, adminIDParameter);
        }
    
        public virtual int LB_DeleteVendor(Nullable<int> custID, Nullable<int> adminID, ObjectParameter returnCustID, ObjectParameter returnMessage)
        {
            var custIDParameter = custID.HasValue ?
                new ObjectParameter("CustID", custID) :
                new ObjectParameter("CustID", typeof(int));
    
            var adminIDParameter = adminID.HasValue ?
                new ObjectParameter("AdminID", adminID) :
                new ObjectParameter("AdminID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("LB_DeleteVendor", custIDParameter, adminIDParameter, returnCustID, returnMessage);
        }
    
        public virtual int LB_InsertContractProvider(Nullable<int> sponsorID, Nullable<int> customerType, string company, string contactType, ObjectParameter returnCustID, ObjectParameter returnMessage)
        {
            var sponsorIDParameter = sponsorID.HasValue ?
                new ObjectParameter("SponsorID", sponsorID) :
                new ObjectParameter("SponsorID", typeof(int));
    
            var customerTypeParameter = customerType.HasValue ?
                new ObjectParameter("CustomerType", customerType) :
                new ObjectParameter("CustomerType", typeof(int));
    
            var companyParameter = company != null ?
                new ObjectParameter("Company", company) :
                new ObjectParameter("Company", typeof(string));
    
            var contactTypeParameter = contactType != null ?
                new ObjectParameter("ContactType", contactType) :
                new ObjectParameter("ContactType", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("LB_InsertContractProvider", sponsorIDParameter, customerTypeParameter, companyParameter, contactTypeParameter, returnCustID, returnMessage);
        }
    
        public virtual int LB_UpdateContractProvider(Nullable<int> customerType, Nullable<int> custID, Nullable<int> sponsorID, string company, string contactType, ObjectParameter returnCustID, ObjectParameter returnMessage)
        {
            var customerTypeParameter = customerType.HasValue ?
                new ObjectParameter("CustomerType", customerType) :
                new ObjectParameter("CustomerType", typeof(int));
    
            var custIDParameter = custID.HasValue ?
                new ObjectParameter("CustID", custID) :
                new ObjectParameter("CustID", typeof(int));
    
            var sponsorIDParameter = sponsorID.HasValue ?
                new ObjectParameter("SponsorID", sponsorID) :
                new ObjectParameter("SponsorID", typeof(int));
    
            var companyParameter = company != null ?
                new ObjectParameter("Company", company) :
                new ObjectParameter("Company", typeof(string));
    
            var contactTypeParameter = contactType != null ?
                new ObjectParameter("ContactType", contactType) :
                new ObjectParameter("ContactType", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("LB_UpdateContractProvider", customerTypeParameter, custIDParameter, sponsorIDParameter, companyParameter, contactTypeParameter, returnCustID, returnMessage);
        }
    
        public virtual int LB_UpdateContractStatus(Nullable<int> contractID, string status, Nullable<int> adminID, ObjectParameter returnID, ObjectParameter returnMessage)
        {
            var contractIDParameter = contractID.HasValue ?
                new ObjectParameter("ContractID", contractID) :
                new ObjectParameter("ContractID", typeof(int));
    
            var statusParameter = status != null ?
                new ObjectParameter("Status", status) :
                new ObjectParameter("Status", typeof(string));
    
            var adminIDParameter = adminID.HasValue ?
                new ObjectParameter("AdminID", adminID) :
                new ObjectParameter("AdminID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("LB_UpdateContractStatus", contractIDParameter, statusParameter, adminIDParameter, returnID, returnMessage);
        }
    
        public virtual int LB_UpdateOrderDiscountV2(Nullable<int> orderID, Nullable<decimal> discount, string discountReason, Nullable<int> adminID, ObjectParameter returnID, ObjectParameter returnMessage)
        {
            var orderIDParameter = orderID.HasValue ?
                new ObjectParameter("OrderID", orderID) :
                new ObjectParameter("OrderID", typeof(int));
    
            var discountParameter = discount.HasValue ?
                new ObjectParameter("Discount", discount) :
                new ObjectParameter("Discount", typeof(decimal));
    
            var discountReasonParameter = discountReason != null ?
                new ObjectParameter("DiscountReason", discountReason) :
                new ObjectParameter("DiscountReason", typeof(string));
    
            var adminIDParameter = adminID.HasValue ?
                new ObjectParameter("AdminID", adminID) :
                new ObjectParameter("AdminID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("LB_UpdateOrderDiscountV2", orderIDParameter, discountParameter, discountReasonParameter, adminIDParameter, returnID, returnMessage);
        }
    
        public virtual int LB_UpdateMemberIncomplete(Nullable<int> custID)
        {
            var custIDParameter = custID.HasValue ?
                new ObjectParameter("CustID", custID) :
                new ObjectParameter("CustID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("LB_UpdateMemberIncomplete", custIDParameter);
        }
    
        public virtual int LB_UpdateAutoShipDiscount(Nullable<int> custID, Nullable<int> itemID)
        {
            var custIDParameter = custID.HasValue ?
                new ObjectParameter("CustID", custID) :
                new ObjectParameter("CustID", typeof(int));
    
            var itemIDParameter = itemID.HasValue ?
                new ObjectParameter("ItemID", itemID) :
                new ObjectParameter("ItemID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("LB_UpdateAutoShipDiscount", custIDParameter, itemIDParameter);
        }
    
        public virtual int LB_GetMembershipType(Nullable<int> custID, ObjectParameter returnIdoc, ObjectParameter returnPrima)
        {
            var custIDParameter = custID.HasValue ?
                new ObjectParameter("CustID", custID) :
                new ObjectParameter("CustID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("LB_GetMembershipType", custIDParameter, returnIdoc, returnPrima);
        }
    
        public virtual int LB_UpdateAutoShipAddItem(Nullable<int> custID, Nullable<int> oldAutoshipID, Nullable<int> itemID, ObjectParameter returnID, ObjectParameter returnMessage)
        {
            var custIDParameter = custID.HasValue ?
                new ObjectParameter("CustID", custID) :
                new ObjectParameter("CustID", typeof(int));
    
            var oldAutoshipIDParameter = oldAutoshipID.HasValue ?
                new ObjectParameter("OldAutoshipID", oldAutoshipID) :
                new ObjectParameter("OldAutoshipID", typeof(int));
    
            var itemIDParameter = itemID.HasValue ?
                new ObjectParameter("ItemID", itemID) :
                new ObjectParameter("ItemID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("LB_UpdateAutoShipAddItem", custIDParameter, oldAutoshipIDParameter, itemIDParameter, returnID, returnMessage);
        }
    
        public virtual int LB_UpdateAutoshipChangeItem(Nullable<int> custID, Nullable<int> oldAutoshipID, Nullable<int> itemID, Nullable<int> promotionID, ObjectParameter returnID, ObjectParameter returnMessage)
        {
            var custIDParameter = custID.HasValue ?
                new ObjectParameter("CustID", custID) :
                new ObjectParameter("CustID", typeof(int));
    
            var oldAutoshipIDParameter = oldAutoshipID.HasValue ?
                new ObjectParameter("OldAutoshipID", oldAutoshipID) :
                new ObjectParameter("OldAutoshipID", typeof(int));
    
            var itemIDParameter = itemID.HasValue ?
                new ObjectParameter("ItemID", itemID) :
                new ObjectParameter("ItemID", typeof(int));
    
            var promotionIDParameter = promotionID.HasValue ?
                new ObjectParameter("PromotionID", promotionID) :
                new ObjectParameter("PromotionID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("LB_UpdateAutoshipChangeItem", custIDParameter, oldAutoshipIDParameter, itemIDParameter, promotionIDParameter, returnID, returnMessage);
        }
    
        public virtual int LB_GenerateOrderProrated(Nullable<int> autoshipID)
        {
            var autoshipIDParameter = autoshipID.HasValue ?
                new ObjectParameter("AutoshipID", autoshipID) :
                new ObjectParameter("AutoshipID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("LB_GenerateOrderProrated", autoshipIDParameter);
        }
    
        public virtual int LB_UpdateAutoShipDiscountAppTrack(Nullable<int> autoshipID)
        {
            var autoshipIDParameter = autoshipID.HasValue ?
                new ObjectParameter("AutoshipID", autoshipID) :
                new ObjectParameter("AutoshipID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("LB_UpdateAutoShipDiscountAppTrack", autoshipIDParameter);
        }
    
        public virtual int LB_UpdateAutoShipPromotionFree(Nullable<int> autoshipID, Nullable<int> promotionID)
        {
            var autoshipIDParameter = autoshipID.HasValue ?
                new ObjectParameter("AutoshipID", autoshipID) :
                new ObjectParameter("AutoshipID", typeof(int));
    
            var promotionIDParameter = promotionID.HasValue ?
                new ObjectParameter("PromotionID", promotionID) :
                new ObjectParameter("PromotionID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("LB_UpdateAutoShipPromotionFree", autoshipIDParameter, promotionIDParameter);
        }
    
        public virtual int LB_InsertMemberV2(Nullable<int> customerType, string displayName, string nameTitle, string firstName, string lastName, string email, string address1, string address2, string city, string state, string postalCode, string companyPhone, string dayPhone, string mobile, string fax, string company, string taxID, Nullable<int> sponsorID, Nullable<int> secSponsorID, Nullable<int> parentID, Nullable<int> mainMemberItemID, Nullable<int> promotionID, string accountingID, Nullable<int> sourceID, string password, Nullable<int> pricingLevel, Nullable<System.DateTime> startDate, ObjectParameter returnCustID, ObjectParameter returnMessage)
        {
            var customerTypeParameter = customerType.HasValue ?
                new ObjectParameter("CustomerType", customerType) :
                new ObjectParameter("CustomerType", typeof(int));
    
            var displayNameParameter = displayName != null ?
                new ObjectParameter("DisplayName", displayName) :
                new ObjectParameter("DisplayName", typeof(string));
    
            var nameTitleParameter = nameTitle != null ?
                new ObjectParameter("NameTitle", nameTitle) :
                new ObjectParameter("NameTitle", typeof(string));
    
            var firstNameParameter = firstName != null ?
                new ObjectParameter("FirstName", firstName) :
                new ObjectParameter("FirstName", typeof(string));
    
            var lastNameParameter = lastName != null ?
                new ObjectParameter("LastName", lastName) :
                new ObjectParameter("LastName", typeof(string));
    
            var emailParameter = email != null ?
                new ObjectParameter("Email", email) :
                new ObjectParameter("Email", typeof(string));
    
            var address1Parameter = address1 != null ?
                new ObjectParameter("Address1", address1) :
                new ObjectParameter("Address1", typeof(string));
    
            var address2Parameter = address2 != null ?
                new ObjectParameter("Address2", address2) :
                new ObjectParameter("Address2", typeof(string));
    
            var cityParameter = city != null ?
                new ObjectParameter("City", city) :
                new ObjectParameter("City", typeof(string));
    
            var stateParameter = state != null ?
                new ObjectParameter("State", state) :
                new ObjectParameter("State", typeof(string));
    
            var postalCodeParameter = postalCode != null ?
                new ObjectParameter("PostalCode", postalCode) :
                new ObjectParameter("PostalCode", typeof(string));
    
            var companyPhoneParameter = companyPhone != null ?
                new ObjectParameter("CompanyPhone", companyPhone) :
                new ObjectParameter("CompanyPhone", typeof(string));
    
            var dayPhoneParameter = dayPhone != null ?
                new ObjectParameter("DayPhone", dayPhone) :
                new ObjectParameter("DayPhone", typeof(string));
    
            var mobileParameter = mobile != null ?
                new ObjectParameter("Mobile", mobile) :
                new ObjectParameter("Mobile", typeof(string));
    
            var faxParameter = fax != null ?
                new ObjectParameter("Fax", fax) :
                new ObjectParameter("Fax", typeof(string));
    
            var companyParameter = company != null ?
                new ObjectParameter("Company", company) :
                new ObjectParameter("Company", typeof(string));
    
            var taxIDParameter = taxID != null ?
                new ObjectParameter("TaxID", taxID) :
                new ObjectParameter("TaxID", typeof(string));
    
            var sponsorIDParameter = sponsorID.HasValue ?
                new ObjectParameter("SponsorID", sponsorID) :
                new ObjectParameter("SponsorID", typeof(int));
    
            var secSponsorIDParameter = secSponsorID.HasValue ?
                new ObjectParameter("SecSponsorID", secSponsorID) :
                new ObjectParameter("SecSponsorID", typeof(int));
    
            var parentIDParameter = parentID.HasValue ?
                new ObjectParameter("ParentID", parentID) :
                new ObjectParameter("ParentID", typeof(int));
    
            var mainMemberItemIDParameter = mainMemberItemID.HasValue ?
                new ObjectParameter("MainMemberItemID", mainMemberItemID) :
                new ObjectParameter("MainMemberItemID", typeof(int));
    
            var promotionIDParameter = promotionID.HasValue ?
                new ObjectParameter("PromotionID", promotionID) :
                new ObjectParameter("PromotionID", typeof(int));
    
            var accountingIDParameter = accountingID != null ?
                new ObjectParameter("AccountingID", accountingID) :
                new ObjectParameter("AccountingID", typeof(string));
    
            var sourceIDParameter = sourceID.HasValue ?
                new ObjectParameter("SourceID", sourceID) :
                new ObjectParameter("SourceID", typeof(int));
    
            var passwordParameter = password != null ?
                new ObjectParameter("Password", password) :
                new ObjectParameter("Password", typeof(string));
    
            var pricingLevelParameter = pricingLevel.HasValue ?
                new ObjectParameter("PricingLevel", pricingLevel) :
                new ObjectParameter("PricingLevel", typeof(int));
    
            var startDateParameter = startDate.HasValue ?
                new ObjectParameter("StartDate", startDate) :
                new ObjectParameter("StartDate", typeof(System.DateTime));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("LB_InsertMemberV2", customerTypeParameter, displayNameParameter, nameTitleParameter, firstNameParameter, lastNameParameter, emailParameter, address1Parameter, address2Parameter, cityParameter, stateParameter, postalCodeParameter, companyPhoneParameter, dayPhoneParameter, mobileParameter, faxParameter, companyParameter, taxIDParameter, sponsorIDParameter, secSponsorIDParameter, parentIDParameter, mainMemberItemIDParameter, promotionIDParameter, accountingIDParameter, sourceIDParameter, passwordParameter, pricingLevelParameter, startDateParameter, returnCustID, returnMessage);
        }
    
        public virtual int LB_UpdateAutoshipCancelItemsByStoreID(Nullable<int> custID, Nullable<int> oldAutoshipID, Nullable<int> storeID, ObjectParameter returnID, ObjectParameter returnMessage)
        {
            var custIDParameter = custID.HasValue ?
                new ObjectParameter("CustID", custID) :
                new ObjectParameter("CustID", typeof(int));
    
            var oldAutoshipIDParameter = oldAutoshipID.HasValue ?
                new ObjectParameter("OldAutoshipID", oldAutoshipID) :
                new ObjectParameter("OldAutoshipID", typeof(int));
    
            var storeIDParameter = storeID.HasValue ?
                new ObjectParameter("StoreID", storeID) :
                new ObjectParameter("StoreID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("LB_UpdateAutoshipCancelItemsByStoreID", custIDParameter, oldAutoshipIDParameter, storeIDParameter, returnID, returnMessage);
        }
    
        public virtual int LB_UpdatePaymentMethodPaymentProfileID(Nullable<int> pMID, string paymentProfileID)
        {
            var pMIDParameter = pMID.HasValue ?
                new ObjectParameter("PMID", pMID) :
                new ObjectParameter("PMID", typeof(int));
    
            var paymentProfileIDParameter = paymentProfileID != null ?
                new ObjectParameter("PaymentProfileID", paymentProfileID) :
                new ObjectParameter("PaymentProfileID", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("LB_UpdatePaymentMethodPaymentProfileID", pMIDParameter, paymentProfileIDParameter);
        }
    
        public virtual int LB_InsertMembershipActivity(Nullable<int> custID, ObjectParameter returnCustID, ObjectParameter returnMessage)
        {
            var custIDParameter = custID.HasValue ?
                new ObjectParameter("CustID", custID) :
                new ObjectParameter("CustID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("LB_InsertMembershipActivity", custIDParameter, returnCustID, returnMessage);
        }
    
        public virtual int LB_InsertMemberActivity(Nullable<int> custID, Nullable<int> ownerID, Nullable<int> vendorID, Nullable<int> assignedToID, string activityType, Nullable<int> categoryID, string activityTitle, string activityShortDescription, string activityDescription, Nullable<System.DateTime> activityScheduledDate, Nullable<int> adminID, ObjectParameter returnID, ObjectParameter returnMessage)
        {
            var custIDParameter = custID.HasValue ?
                new ObjectParameter("CustID", custID) :
                new ObjectParameter("CustID", typeof(int));
    
            var ownerIDParameter = ownerID.HasValue ?
                new ObjectParameter("OwnerID", ownerID) :
                new ObjectParameter("OwnerID", typeof(int));
    
            var vendorIDParameter = vendorID.HasValue ?
                new ObjectParameter("VendorID", vendorID) :
                new ObjectParameter("VendorID", typeof(int));
    
            var assignedToIDParameter = assignedToID.HasValue ?
                new ObjectParameter("AssignedToID", assignedToID) :
                new ObjectParameter("AssignedToID", typeof(int));
    
            var activityTypeParameter = activityType != null ?
                new ObjectParameter("ActivityType", activityType) :
                new ObjectParameter("ActivityType", typeof(string));
    
            var categoryIDParameter = categoryID.HasValue ?
                new ObjectParameter("CategoryID", categoryID) :
                new ObjectParameter("CategoryID", typeof(int));
    
            var activityTitleParameter = activityTitle != null ?
                new ObjectParameter("ActivityTitle", activityTitle) :
                new ObjectParameter("ActivityTitle", typeof(string));
    
            var activityShortDescriptionParameter = activityShortDescription != null ?
                new ObjectParameter("ActivityShortDescription", activityShortDescription) :
                new ObjectParameter("ActivityShortDescription", typeof(string));
    
            var activityDescriptionParameter = activityDescription != null ?
                new ObjectParameter("ActivityDescription", activityDescription) :
                new ObjectParameter("ActivityDescription", typeof(string));
    
            var activityScheduledDateParameter = activityScheduledDate.HasValue ?
                new ObjectParameter("ActivityScheduledDate", activityScheduledDate) :
                new ObjectParameter("ActivityScheduledDate", typeof(System.DateTime));
    
            var adminIDParameter = adminID.HasValue ?
                new ObjectParameter("AdminID", adminID) :
                new ObjectParameter("AdminID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("LB_InsertMemberActivity", custIDParameter, ownerIDParameter, vendorIDParameter, assignedToIDParameter, activityTypeParameter, categoryIDParameter, activityTitleParameter, activityShortDescriptionParameter, activityDescriptionParameter, activityScheduledDateParameter, adminIDParameter, returnID, returnMessage);
        }
    
        public virtual int LB_UpdateMemberActivity(Nullable<int> activityID, Nullable<int> custID, Nullable<int> ownerID, Nullable<int> vendorID, Nullable<int> assignedToID, string activityType, Nullable<int> categoryID, string activityTitle, string activityShortDescription, string activityDescription, string activityOutcome, Nullable<System.DateTime> activityScheduledDate, Nullable<System.DateTime> activityCompletionDate, string status, ObjectParameter returnID, ObjectParameter returnMessage)
        {
            var activityIDParameter = activityID.HasValue ?
                new ObjectParameter("ActivityID", activityID) :
                new ObjectParameter("ActivityID", typeof(int));
    
            var custIDParameter = custID.HasValue ?
                new ObjectParameter("CustID", custID) :
                new ObjectParameter("CustID", typeof(int));
    
            var ownerIDParameter = ownerID.HasValue ?
                new ObjectParameter("OwnerID", ownerID) :
                new ObjectParameter("OwnerID", typeof(int));
    
            var vendorIDParameter = vendorID.HasValue ?
                new ObjectParameter("VendorID", vendorID) :
                new ObjectParameter("VendorID", typeof(int));
    
            var assignedToIDParameter = assignedToID.HasValue ?
                new ObjectParameter("AssignedToID", assignedToID) :
                new ObjectParameter("AssignedToID", typeof(int));
    
            var activityTypeParameter = activityType != null ?
                new ObjectParameter("ActivityType", activityType) :
                new ObjectParameter("ActivityType", typeof(string));
    
            var categoryIDParameter = categoryID.HasValue ?
                new ObjectParameter("CategoryID", categoryID) :
                new ObjectParameter("CategoryID", typeof(int));
    
            var activityTitleParameter = activityTitle != null ?
                new ObjectParameter("ActivityTitle", activityTitle) :
                new ObjectParameter("ActivityTitle", typeof(string));
    
            var activityShortDescriptionParameter = activityShortDescription != null ?
                new ObjectParameter("ActivityShortDescription", activityShortDescription) :
                new ObjectParameter("ActivityShortDescription", typeof(string));
    
            var activityDescriptionParameter = activityDescription != null ?
                new ObjectParameter("ActivityDescription", activityDescription) :
                new ObjectParameter("ActivityDescription", typeof(string));
    
            var activityOutcomeParameter = activityOutcome != null ?
                new ObjectParameter("ActivityOutcome", activityOutcome) :
                new ObjectParameter("ActivityOutcome", typeof(string));
    
            var activityScheduledDateParameter = activityScheduledDate.HasValue ?
                new ObjectParameter("ActivityScheduledDate", activityScheduledDate) :
                new ObjectParameter("ActivityScheduledDate", typeof(System.DateTime));
    
            var activityCompletionDateParameter = activityCompletionDate.HasValue ?
                new ObjectParameter("ActivityCompletionDate", activityCompletionDate) :
                new ObjectParameter("ActivityCompletionDate", typeof(System.DateTime));
    
            var statusParameter = status != null ?
                new ObjectParameter("Status", status) :
                new ObjectParameter("Status", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("LB_UpdateMemberActivity", activityIDParameter, custIDParameter, ownerIDParameter, vendorIDParameter, assignedToIDParameter, activityTypeParameter, categoryIDParameter, activityTitleParameter, activityShortDescriptionParameter, activityDescriptionParameter, activityOutcomeParameter, activityScheduledDateParameter, activityCompletionDateParameter, statusParameter, returnID, returnMessage);
        }
    
        public virtual int LB_InsertNoteMinV2(Nullable<int> custID, Nullable<int> ownerID, Nullable<int> activityID, string noteType, string commType, string commDirection, string noteText, Nullable<System.DateTime> scheduledDate, Nullable<int> assignedTo, Nullable<int> adminID)
        {
            var custIDParameter = custID.HasValue ?
                new ObjectParameter("CustID", custID) :
                new ObjectParameter("CustID", typeof(int));
    
            var ownerIDParameter = ownerID.HasValue ?
                new ObjectParameter("OwnerID", ownerID) :
                new ObjectParameter("OwnerID", typeof(int));
    
            var activityIDParameter = activityID.HasValue ?
                new ObjectParameter("ActivityID", activityID) :
                new ObjectParameter("ActivityID", typeof(int));
    
            var noteTypeParameter = noteType != null ?
                new ObjectParameter("NoteType", noteType) :
                new ObjectParameter("NoteType", typeof(string));
    
            var commTypeParameter = commType != null ?
                new ObjectParameter("CommType", commType) :
                new ObjectParameter("CommType", typeof(string));
    
            var commDirectionParameter = commDirection != null ?
                new ObjectParameter("CommDirection", commDirection) :
                new ObjectParameter("CommDirection", typeof(string));
    
            var noteTextParameter = noteText != null ?
                new ObjectParameter("NoteText", noteText) :
                new ObjectParameter("NoteText", typeof(string));
    
            var scheduledDateParameter = scheduledDate.HasValue ?
                new ObjectParameter("ScheduledDate", scheduledDate) :
                new ObjectParameter("ScheduledDate", typeof(System.DateTime));
    
            var assignedToParameter = assignedTo.HasValue ?
                new ObjectParameter("AssignedTo", assignedTo) :
                new ObjectParameter("AssignedTo", typeof(int));
    
            var adminIDParameter = adminID.HasValue ?
                new ObjectParameter("AdminID", adminID) :
                new ObjectParameter("AdminID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("LB_InsertNoteMinV2", custIDParameter, ownerIDParameter, activityIDParameter, noteTypeParameter, commTypeParameter, commDirectionParameter, noteTextParameter, scheduledDateParameter, assignedToParameter, adminIDParameter);
        }
    
        public virtual int LB_UpdateNoteV2(Nullable<int> noteID, Nullable<int> custID, Nullable<int> ownerID, Nullable<int> activityID, string noteType, string commType, string commDirection, string noteText, Nullable<System.DateTime> scheduledDate, Nullable<System.DateTime> endDate, Nullable<int> assignedTo, string status, ObjectParameter returnID, ObjectParameter returnMessage)
        {
            var noteIDParameter = noteID.HasValue ?
                new ObjectParameter("NoteID", noteID) :
                new ObjectParameter("NoteID", typeof(int));
    
            var custIDParameter = custID.HasValue ?
                new ObjectParameter("CustID", custID) :
                new ObjectParameter("CustID", typeof(int));
    
            var ownerIDParameter = ownerID.HasValue ?
                new ObjectParameter("OwnerID", ownerID) :
                new ObjectParameter("OwnerID", typeof(int));
    
            var activityIDParameter = activityID.HasValue ?
                new ObjectParameter("ActivityID", activityID) :
                new ObjectParameter("ActivityID", typeof(int));
    
            var noteTypeParameter = noteType != null ?
                new ObjectParameter("NoteType", noteType) :
                new ObjectParameter("NoteType", typeof(string));
    
            var commTypeParameter = commType != null ?
                new ObjectParameter("CommType", commType) :
                new ObjectParameter("CommType", typeof(string));
    
            var commDirectionParameter = commDirection != null ?
                new ObjectParameter("CommDirection", commDirection) :
                new ObjectParameter("CommDirection", typeof(string));
    
            var noteTextParameter = noteText != null ?
                new ObjectParameter("NoteText", noteText) :
                new ObjectParameter("NoteText", typeof(string));
    
            var scheduledDateParameter = scheduledDate.HasValue ?
                new ObjectParameter("ScheduledDate", scheduledDate) :
                new ObjectParameter("ScheduledDate", typeof(System.DateTime));
    
            var endDateParameter = endDate.HasValue ?
                new ObjectParameter("EndDate", endDate) :
                new ObjectParameter("EndDate", typeof(System.DateTime));
    
            var assignedToParameter = assignedTo.HasValue ?
                new ObjectParameter("AssignedTo", assignedTo) :
                new ObjectParameter("AssignedTo", typeof(int));
    
            var statusParameter = status != null ?
                new ObjectParameter("Status", status) :
                new ObjectParameter("Status", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("LB_UpdateNoteV2", noteIDParameter, custIDParameter, ownerIDParameter, activityIDParameter, noteTypeParameter, commTypeParameter, commDirectionParameter, noteTextParameter, scheduledDateParameter, endDateParameter, assignedToParameter, statusParameter, returnID, returnMessage);
        }
    
        public virtual int LB_UpdateVolume(Nullable<int> volumeID, string volumeName, string volumeDescription, ObjectParameter returnID, ObjectParameter returnMessage)
        {
            var volumeIDParameter = volumeID.HasValue ?
                new ObjectParameter("VolumeID", volumeID) :
                new ObjectParameter("VolumeID", typeof(int));
    
            var volumeNameParameter = volumeName != null ?
                new ObjectParameter("VolumeName", volumeName) :
                new ObjectParameter("VolumeName", typeof(string));
    
            var volumeDescriptionParameter = volumeDescription != null ?
                new ObjectParameter("VolumeDescription", volumeDescription) :
                new ObjectParameter("VolumeDescription", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("LB_UpdateVolume", volumeIDParameter, volumeNameParameter, volumeDescriptionParameter, returnID, returnMessage);
        }
    }
}
