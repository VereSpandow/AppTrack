@if (ViewBag.ErrorCode == Constants.fatalErrorCode)
{
    <div id="contactContainerDiv">
        <div class="col-md-12" style="font-size: 1.5em">
            <br />
            <br />
            The following unexpected error was encountered:
            <br />
            <br />
            <span class=" text-danger">@ViewBag.ErrorMessage</span>
            <br />
            <br />
            Please contact technical support.
        </div>
    </div>
}
else
{
    @model AppTrack.ViewModels.MemberReviewViewModel

    <div class="col-md-12">

        @using (Html.BeginForm("Review2", "Member", FormMethod.Post, new { @class = "form-horizontal", role = "form" }))
        {
            @Html.AntiForgeryToken()

            @Html.HiddenFor(model => model.ID)
            @Html.HiddenFor(model => model.CustID)
            @Html.HiddenFor(model => model.StartDate)
            @Html.HiddenFor(model => model.StatusDate)
            @Html.HiddenFor(model => model.OutcomeDate)
            @Html.HiddenFor(model => model.EndDate)

            <div class="panel panel-default" style="box-shadow:#ccc 7px 7px;">
                <div class="panel-heading">
                    <div class="panel-title">
                        <span class="h4">Account Review</span>
                    </div>
                </div>
                <div class="panel-body nopadding" style="background-color:#FFF;">
                    <div class="col-md-4" style="margin-top:5px;">
                        * @Html.LabelFor(model => model.ReviewReason, htmlAttributes: new { @class = "control-label" })
                        @if (User.IsInRole("MemberServiceManager"))
                        {
                            @Html.DropDownListFor(model => model.ReviewReason, Model.ReviewReasonList, new { @class = "form-control" })
                            @Html.ValidationMessageFor(model => model.ReviewReason, "", new { @class = "text-danger" })
                        }
                        else
                        {
                            @Html.DropDownListFor(model => model.ReviewReason, Model.ReviewReasonList, new { @class = "form-control", disabled = "disabled" })
                        }
                    </div>

                    <div class="col-md-4" style="margin-top:5px;">
                        * @Html.LabelFor(model => model.ReviewReason, htmlAttributes: new { @class = "control-label" })
                        @if (User.IsInRole("MemberServiceManager"))
                        {
                            @Html.DropDownListFor(model => model.ReviewReason, Model.ReviewReasonList, new { @class = "form-control" })
                            @Html.ValidationMessageFor(model => model.ReviewReason, "", new { @class = "text-danger" })
                        }
                        else
                        {
                            @Html.DropDownListFor(model => model.ReviewReason, Model.ReviewReasonList, new { @class = "form-control", disabled = "disabled" })
                        }
                    </div>

                    <div class="col-md-4" style="margin-top:5px;">
                        * @Html.LabelFor(model => model.Status, htmlAttributes: new { @class = "control-label" })
                        @if (User.IsInRole("MemberServiceManager"))
                        {
                            @Html.DropDownListFor(model => model.Status, Model.ReviewStatusList, new { @class = "form-control" })
                            @Html.ValidationMessageFor(model => model.Status, "", new { @class = "text-danger" })
                        }
                        else
                        {
                            @Html.DropDownListFor(model => model.Status, Model.ReviewStatusList, new { @class = "form-control", disabled = "disabled" })
                        }
                    </div>
                    <div class="col-md-12" style="margin-top:5px;">
                        @Html.LabelFor(model => model.Description, htmlAttributes: new { @class = "control-label" })
                        <br />
                        @if (User.IsInRole("MemberServiceManager"))
                        {
                            @Html.TextAreaFor(model => model.Description, new { htmlAttributes = new { @class = "form-control" } })
                            @Html.ValidationMessageFor(model => model.Description, "", new { @class = "text-danger" })
                        }
                        else
                        {
                            @Model.Description                            
                        }
                    </div>
                    <div class="col-md-12" style="margin-top:5px;">
                        <div class="form-group">
                            <input type="Submit" name="Submit" value="Save" class="btn btn-sm btn-primary pull-right" style="margin-right:50px;">
                        </div>
                    </div>
                    <div class="col-md-12" style="height:25px;">
                    </div>
                </div>
            </div>
            <div class="row" style="height:20px;"></div>
            <div class="panel panel-default" style="box-shadow:#ccc 7px 7px;">
                <div class="panel-heading">
                    <div class="panel-title">
                        <span class="h4">Review Outcome</span>
                    </div>
                </div>
                <div class="panel-body nopadding" style="background-color:#FFF;">
                    <div class="col-md-2" style="margin-top:5px;">
                        <label class="control-label">Outcome</label>
                        @Html.DropDownListFor(model => model.Outcome, Model.ReviewOutcomeList, new { @class = "form-control" })
                        @Html.ValidationMessageFor(model => model.Outcome, "", new { @class = "text-danger" })
                    </div>
                    <div class="col-md-6" style="margin-top:5px;">
                        @Html.LabelFor(model => model.OutcomeReasonCode, htmlAttributes: new { @class = "control-label" })
                        @Html.EditorFor(model => model.OutcomeReasonCode, new { htmlAttributes = new { @class = "form-control", maxlength = "50" } })
                        @Html.ValidationMessageFor(model => model.OutcomeReasonCode, "", new { @class = "text-danger" })
                    </div>
                    <div class="col-md-4" style="margin-top:5px;">
                        @Html.LabelFor(model => model.ChangeAlliance, htmlAttributes: new { @class = "control-label" })
                        @Html.DropDownListFor(model => model.ChangeAlliance, Model.ChangeAllianceList, new { @class = "form-control" })
                        @Html.ValidationMessageFor(model => model.ChangeAlliance, "", new { @class = "text-danger" })
                    </div>
                    <div class="col-md-12" style="margin-top:5px;">
                        @Html.LabelFor(model => model.OutcomeDescription, htmlAttributes: new { @class = "control-label" })
                        <br />
                        @Html.TextAreaFor(model => model.OutcomeDescription, new { htmlAttributes = new { @class = "form-control", maxlength = "1500" } })
                        @Html.ValidationMessageFor(model => model.OutcomeDescription, "", new { @class = "text-danger" })
                    </div>

                    <div class="col-md-12" style="margin-top:5px;">
                        <div class="form-group">
                            <input type="Submit" name="Submit" value="Save" class="btn btn-sm btn-primary pull-right" style="margin-right:50px;">
                        </div>
                    </div>
                    <div class="col-md-12" style="height:25px;">
                    </div>
                </div>
            </div>
        }

    </div>

    <script>

        $(document).ready(function () {
            $.validator.unobtrusive.parse(document);
            var dateToday = new Date();
            $("#StartDate").datepicker({ minDate: dateToday });
            $("#EndDate").datepicker({ minDate: dateToday });
            $("#StatusDate").datepicker({ minDate: dateToday });
            $("#OutcomeDate").datepicker({ minDate: dateToday });
        });


    </script>
}


