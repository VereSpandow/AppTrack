@if (ViewBag.ErrorCode == Constants.fatalErrorCode)
{
    <div id="contactContainerDiv">
        <div class="col-sm-12" style="font-size: 1.5em">
            <br />
            <br />
            The following unexpected error was encountered:
            <br />
            <br />
            <span class=" text-danger">@ViewBag.ErrorMessage</span>
            <br />
            <br />
            Please contact technical support.
        </div>
    </div>
}
else
{
    @model AppTrack.ViewModels.CustomerNoteListViewModel

    <div class="h2" style="float:left">Task List</div>
    <div class="filterbar" style="display:block;clear:both;">
        <div>
            @Html.ValidationSummary(true, "", new { @class = "text-danger" })
        </div>
        <div id="customerNotesListDiv">
            <div class="col-sm-1 pull-right">
                @using (Ajax.BeginForm("AddNoteInit", "CustomerNotes", null,
                new AjaxOptions
                {
                    InsertionMode = InsertionMode.Replace,
                    HttpMethod = "POST",
                    OnFailure = "addNoteInitFailed",
                    OnSuccess = "addNoteInitSuccess",
                    UpdateTargetId = "addNoteContainerDiv"
                }))
                {
                    @Html.AntiForgeryToken()
                    @Html.HiddenFor(model => model.SearchActivityID)
                    @Html.HiddenFor(model => model.SearchCustID)
                    @Html.HiddenFor(model => model.SearchAssignedToID)
                    @Html.HiddenFor(model => model.SearchStartDate)
                    @Html.HiddenFor(model => model.SearchEndDate)
                    @Html.HiddenFor(model => model.SearchScheduledStartDate)
                    @Html.HiddenFor(model => model.SearchScheduledEndDate)
                    @Html.HiddenFor(model => model.SearchCompletedStartDate)
                    @Html.HiddenFor(model => model.SearchCompletedEndDate)
                    @Html.HiddenFor(model => model.SearchPhrase)
                    @Html.HiddenFor(model => model.SearchNoteType)
                    @Html.HiddenFor(model => model.SearchCommType)
                    @Html.HiddenFor(model => model.SearchCommDirection)
                    <input type="hidden" name="NoteType" value="Task" />
                    <!--
                                        <button class="btn btn-xs btn-info" id="addNoteButton">
                                            Add Task
                                        </button>
                    -->
                }
            </div>
            <div style="clear:both"></div>

            <div class="row" style="padding-top:10px;">

                <div id="addNoteContainerDiv" class="row" style="padding-top:10px;display:none;">
                </div>

                <div id="editNoteContainerDiv" class="row" style="padding-top:10px;display:none;">
                </div>

                <!-- SEARCH NOTES FORM -->
                <div class="filterbar" id="searchNoteFormDiv">
                    @using (Html.BeginForm())
                    {
                        @Html.AntiForgeryToken()
                        @Html.HiddenFor(model => model.SearchNoteType)

                        if (User.IsInRole("MemberServicesManager"))
                        {
                            <div class="col-sm-3">
                                <label class="control-label">Assigned To</label>
                                <br />
                                @Html.DropDownListFor(model => model.SearchAssignedToID, Model.SearchAssignedToList, new { @class = "form-control" })
                                @Html.ValidationMessageFor(model => model.SearchAssignedToID, "", new { @class = "text-danger" })
                            </div>
                        }
                        else
                        {
                            Html.HiddenFor(model => model.SearchAssignedToID);
                        }
                        <div class="col-sm-3">
                            @Html.LabelFor(model => model.SearchCommType, htmlAttributes: new { @class = "control-label" })
                            <br />
                            @Html.DropDownListFor(model => model.SearchCommType, Model.SearchCommTypeList, new { @class = "form-control" })
                            @Html.ValidationMessageFor(model => model.SearchCommType, "", new { @class = "text-danger" })
                        </div>
                        <div class="col-sm-3">
                            @Html.LabelFor(model => model.SearchCommDirection, htmlAttributes: new { @class = "control-label" })
                            <br />
                            @Html.DropDownListFor(model => model.SearchCommDirection, Model.SearchCommDirectionList, new { @class = "form-control" })
                            @Html.ValidationMessageFor(model => model.SearchCommDirection, "", new { @class = "text-danger" })
                        </div>
                        <div class="col-sm-3">
                            @Html.LabelFor(model => model.SearchNoteStatus, htmlAttributes: new { @class = "control-label" })
                            <br />
                            @Html.DropDownListFor(model => model.SearchNoteStatus, Model.SearchNoteStatusList, new { @class = "form-control" })
                            @Html.ValidationMessageFor(model => model.SearchNoteStatus, "", new { @class = "text-danger" })
                        </div>
                        <div class="col-sm-3" style="clear:both;">
                            <label class="control-label">Scheduled From</label>
                            <br />
                            @Html.JQueryUI().DatepickerFor(model => model.SearchScheduledStartDate, new { @class = "form-control" })
                            @*@Html.EditorFor(model => model.SearchStartDate, new { htmlAttributes = new { @class = "form-control date-picker" } })*@
                            @Html.ValidationMessageFor(model => model.SearchScheduledStartDate, "", new { @class = "text-danger" })
                        </div>
                        <div class="col-sm-3">
                            <label class="control-label">To</label>
                            <br />
                            @Html.JQueryUI().DatepickerFor(model => model.SearchScheduledEndDate, new { @class = "form-control" })
                            @*@Html.EditorFor(model => model.SearchEndDate, new { htmlAttributes = new { @class = "form-control date-picker" } })*@
                            @Html.ValidationMessageFor(model => model.SearchScheduledEndDate, "", new { @class = "text-danger" })
                        </div>
                        <div class="col-sm-3">
                            <label class="control-label">Completed From</label>
                            <br />
                            @Html.JQueryUI().DatepickerFor(model => model.SearchCompletedStartDate, new { @class = "form-control" })
                            @*@Html.EditorFor(model => model.SearchStartDate, new { htmlAttributes = new { @class = "form-control date-picker" } })*@
                            @Html.ValidationMessageFor(model => model.SearchCompletedStartDate, "", new { @class = "text-danger" })
                        </div>
                        <div class="col-sm-3">
                            <label class="control-label">To</label>
                            <br />
                            @Html.JQueryUI().DatepickerFor(model => model.SearchCompletedEndDate, new { @class = "form-control" })
                            @*@Html.EditorFor(model => model.SearchEndDate, new { htmlAttributes = new { @class = "form-control date-picker" } })*@
                            @Html.ValidationMessageFor(model => model.SearchCompletedEndDate, "", new { @class = "text-danger" })
                        </div>
                        <div class="col-sm-3" style="clear:both;">
                            <label class="control-label">Added From</label>
                            <br />
                            @Html.JQueryUI().DatepickerFor(model => model.SearchStartDate, new { @class = "form-control" })
                            @*@Html.EditorFor(model => model.SearchStartDate, new { htmlAttributes = new { @class = "form-control date-picker" } })*@
                            @Html.ValidationMessageFor(model => model.SearchStartDate, "", new { @class = "text-danger" })
                        </div>
                        <div class="col-sm-3">
                            <label class="control-label">To</label>
                            <br />
                            @Html.JQueryUI().DatepickerFor(model => model.SearchEndDate, new { @class = "form-control" })
                            @*@Html.EditorFor(model => model.SearchEndDate, new { htmlAttributes = new { @class = "form-control date-picker" } })*@
                            @Html.ValidationMessageFor(model => model.SearchEndDate, "", new { @class = "text-danger" })
                        </div>
                        <div class="col-sm-4">
                            @Html.LabelFor(model => model.SearchPhrase, htmlAttributes: new { @class = "control-label" })
                            <br />
                            @Html.EditorFor(model => model.SearchPhrase, new { htmlAttributes = new { @class = "form-control" } })
                            @Html.ValidationMessageFor(model => model.SearchPhrase, "", new { @class = "text-danger" })
                        </div>
                        <div class="col-sm-2">
                            <label class="control-label">&nbsp;</label>
                            <br />
                            <button class="btn btn-sm btn-info" type="submit" value="Search">Search</button>
                        </div>
                        <img id="ajax-loader" src="@Url.Content("~/Content/images/ajax-loader.gif")" style="display:none;" />
                    }
                </div>
                <div style="clear:both;height:10px;"></div>

                <table class="table table-hover table-striped table-responsive" id="tasksTable" style="padding-top:5px;font-size:1.1em;">
                    <thead>
                        <tr>
                            <th width=5%>
                                &nbsp;
                            </th>
                            <th width="10%">
                                &nbsp;
                            </th>
                            <th width="15%">
                                Member
                            </th>
                            <th width="20%">
                                Added
                            </th>
                            <th width="15%">
                                Assigned To
                            </th>
                            <th width="10%">
                                Due
                            </th>
                            <th width="10%">
                                Status
                            </th>
                            <th width="10%">
                                Completed
                            </th>
                            <th width="5%">
                                &nbsp;
                            </th>
                        </tr>
                    </thead>

                    <tbody>
                        @foreach (var item in Model.CustomerNoteList)
                        {
                            <tr>
                                <td>
                                    @if (@item.NoteType == "Note")
                                    {
                                        <span>Note</span>
                                    }
                                    else
                                    {
                                        <span class="status-NEW">Task</span>
                                    }
                                </td>
                                <td>
                                    @Html.DisplayFor(modelItem => item.CommType) - @Html.DisplayFor(modelItem => item.CommDirection)
                                </td>
                                <td>
                                    @item.MemberName ( @item.CustID )<br /> @item.ContactName
                                </td>
                                <td>
                                    @item.PostDate.ToString("MM/dd/yy") by @item.OwnerName
                                </td>
                                <td>
                                    @if (@item.NoteType == "Task")
                                    {
                                        @Html.DisplayFor(modelItem => item.AssignedToName) <span> on </span> @Html.DisplayFor(modelItem => item.AssignedDate)
                                    }
                                </td>
                                <td>
                                    @if (@item.NoteType == "Task")
                                    {
                                        if (@item.ScheduledDate != null)
                                        {
                                            int cmp = item.ScheduledDate.Value.CompareTo(DateTime.Now);

                                            if (cmp >= 0)
                                            {
                                                <span class="status-NEW">@Html.DisplayFor(modelItem => item.ScheduledDate)</span>
                                            }
                                            else
                                            {
                                                <span class="status-DELETED">@Html.DisplayFor(modelItem => item.ScheduledDate)</span>
                                            }
                                        }
                                    }
                                </td>
                                <td>
                                    @if (@item.NoteType == "Task")
                                    {
                                        <span class="status-@item.Status.ToUpper()">@Html.DisplayFor(modelItem => item.Status)</span>
                                    }
                                </td>
                                <td>
                                    @if (@item.NoteType == "Task")
                                    {
                                        @Html.DisplayFor(modelItem => item.EndDate)
                                    }
                                </td>
                                <td>
                                    @if (item.OwnerID == ViewBag.AdminID || User.IsInRole("MemberServicesManager") || item.AssignedTo == ViewBag.AdminID)
                                    {
                                        <span>
                                            <a href="#" onclick="editNoteInit(@item.NoteID)"><span class="fa fa-edit"></span></a>&nbsp;<a href="#" onclick="showNote(@item.NoteID)"><span class="fa fa-search-plus"></span></a>
                                        </span>
                                    }
                                </td>
                            </tr>
                            <tr id="row@(item.NoteID)" style="display:none;">
                                <td>
                                    &nbsp;
                                </td>
                                <td colspan="9">
                                    @Html.DisplayFor(modelItem => item.NoteText)
                                </td>
                            </tr>
                        }
                    </tbody>
                </table>
            </div>
            <div id="editNoteAjaxForm" style="display:block;">
                @using (Ajax.BeginForm("EditNoteInit", "CustomerNotes", null,
                new AjaxOptions
                {
                    InsertionMode = InsertionMode.Replace,
                    HttpMethod = "POST",
                    OnFailure = "editNoteInitFailed",
                    OnSuccess = "editNoteInitSuccess",
                    UpdateTargetId = "editNoteContainerDiv"
                }, new { id = "editNoteInitForm" }))
                {
                    @Html.AntiForgeryToken()
                    @Html.HiddenFor(model => model.SearchActivityID)
                    @Html.HiddenFor(model => model.SearchCustID)
                    @Html.HiddenFor(model => model.SearchAssignedToID)
                    @Html.HiddenFor(model => model.SearchStartDate)
                    @Html.HiddenFor(model => model.SearchEndDate)
                    @Html.HiddenFor(model => model.SearchScheduledStartDate)
                    @Html.HiddenFor(model => model.SearchScheduledEndDate)
                    @Html.HiddenFor(model => model.SearchCompletedStartDate)
                    @Html.HiddenFor(model => model.SearchCompletedEndDate)
                    @Html.HiddenFor(model => model.SearchPhrase)
                    @Html.HiddenFor(model => model.SearchNoteType)
                    @Html.HiddenFor(model => model.SearchCommType)
                    @Html.HiddenFor(model => model.SearchCommDirection)
                    <input type="hidden" name="NoteID" id="editNoteID" value="" />
                }
            </div>
        </div>
    </div>
}
<script>
    $(document).ready(function () {
        $("#SearchStartDate").datepicker();
        $("#SearchEndDate").datepicker();
        $.validator.unobtrusive.parse(document);
    });

    function editNoteInit(thisNoteID) {
        $("#editNoteID").val(thisNoteID);
        $("#editNoteInitForm").submit();
    };

    function addNoteInitFailed() {
        alert("Error encountered, unable to initialize Add Note form.");
    }

    function addNoteInitSuccess() {
        $("#addNoteContainerDiv").show();
        $("#editNoteContainerDiv").hide();
    }
    function editNoteInitFailed() {
        alert("Error encountered, unable to initialize Edit Note form.");
    }

    function editNoteInitSuccess() {
        $("#addNoteContainerDiv").hide();
        $("#editNoteContainerDiv").show();
    }

    function showSearchNoteForm() {
        $('#addNoteContainerDiv').hide();
        $("#editNoteContainerDiv").hide();
        $('#searchNoteFormDiv').show();
    }

    function showNote(rowid) {
        $("#row" + rowid).show();
    }

</script>
